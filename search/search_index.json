{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 Hi there \ud83d\udc4b I'm MangataTS \u00b6 \ud83d\udd2d SWPU\u672c\u79d1\u7535\u5b50\u4e0e\u8ba1\u7b97\u673a\u5de5\u7a0b\u5728\u8bfb \ud83c\udf31 \u6b63\u5728\u5b66\u4e60ACM/ICPC&OI\u76f8\u5173\u7b97\u6cd5 \ud83d\udc6f \u76ee\u524d\u6b63\u5728\u5b8c\u5584\u5e38\u7528 \u7b97\u6cd5\u6559\u5b66 \u5185\u5bb9 \u26a1 \u8ffd\u68a6\u7b97\u6cd5\u7f51 \u306e\u7ad9\u957f&\u7ef4\u62a4\u8005 \ud83d\udceb QQ\u4ea4\u6d41\u7fa4\uff1a 1055277728 \ud83d\ude04 Blogs: acmer.blog.csdn.net \ud83e\udd2b Algorithm Visitors \u00b6 \u7f51\u7ad9\u7b80\u4ecb \u00b6 \u6b22\u8fce\u6765\u5230\u6211\u7684\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u5b66\u4e60\u7b14\u8bb0\u7684\u4e00\u4e2a\u5c0f\u7f51\u7ad9\uff0c\u5728\u8fd9\u91cc\u6211\u5c06\u8bb0\u5f55\u4e00\u4e9b\u7b97\u6cd5\u7684\u4e2a\u4eba\u7406\u89e3\u4ee5\u53ca\u9898\u76ee\u96c6\u5408\uff0c\u5305\u62ec\u4e0d\u9650\u4e8e\u5404\u5927OJ\u4ee5\u53ca\u84dd\u6865\u676f\u3001\u5929\u68af\u8d5b\u3001ICPC\u3001CCPC\u7b49\u8bad\u7ec3\u7684\u9898\u89e3\u3002 \u611f\u8c22 \u00b6 \u672c\u7f51\u7ad9\u6a21\u5f0f\u53c2\u8003 \\(OI \\ Wiki\\) \u611f\u8c22 \\(OI \\ wiki\\) \u793e\u533a\u7684\u5e2e\u52a9 \u611f\u8c22\u7f51\u4e0a\u7684\u5404\u79cd\u8d44\u6e90 \u611f\u8c22\u4e00\u76f4\u652f\u6301\u6211\u7684\u540c\u5b66","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#hi-there-im-mangatats","text":"\ud83d\udd2d SWPU\u672c\u79d1\u7535\u5b50\u4e0e\u8ba1\u7b97\u673a\u5de5\u7a0b\u5728\u8bfb \ud83c\udf31 \u6b63\u5728\u5b66\u4e60ACM/ICPC&OI\u76f8\u5173\u7b97\u6cd5 \ud83d\udc6f \u76ee\u524d\u6b63\u5728\u5b8c\u5584\u5e38\u7528 \u7b97\u6cd5\u6559\u5b66 \u5185\u5bb9 \u26a1 \u8ffd\u68a6\u7b97\u6cd5\u7f51 \u306e\u7ad9\u957f&\u7ef4\u62a4\u8005 \ud83d\udceb QQ\u4ea4\u6d41\u7fa4\uff1a 1055277728 \ud83d\ude04 Blogs: acmer.blog.csdn.net","title":"Hi there \ud83d\udc4b I'm MangataTS "},{"location":"#algorithm-visitors","text":"","title":"&#x1f92b; Algorithm Visitors"},{"location":"#_1","text":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u5b66\u4e60\u7b14\u8bb0\u7684\u4e00\u4e2a\u5c0f\u7f51\u7ad9\uff0c\u5728\u8fd9\u91cc\u6211\u5c06\u8bb0\u5f55\u4e00\u4e9b\u7b97\u6cd5\u7684\u4e2a\u4eba\u7406\u89e3\u4ee5\u53ca\u9898\u76ee\u96c6\u5408\uff0c\u5305\u62ec\u4e0d\u9650\u4e8e\u5404\u5927OJ\u4ee5\u53ca\u84dd\u6865\u676f\u3001\u5929\u68af\u8d5b\u3001ICPC\u3001CCPC\u7b49\u8bad\u7ec3\u7684\u9898\u89e3\u3002","title":"\u7f51\u7ad9\u7b80\u4ecb"},{"location":"#_2","text":"\u672c\u7f51\u7ad9\u6a21\u5f0f\u53c2\u8003 \\(OI \\ Wiki\\) \u611f\u8c22 \\(OI \\ wiki\\) \u793e\u533a\u7684\u5e2e\u52a9 \u611f\u8c22\u7f51\u4e0a\u7684\u5404\u79cd\u8d44\u6e90 \u611f\u8c22\u4e00\u76f4\u652f\u6301\u6211\u7684\u540c\u5b66","title":"\u611f\u8c22"},{"location":"%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81/","text":"","title":"\u51ef\u6492\u5bc6\u7801"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/","text":"01\u80cc\u5305 \u00b6 \u4e00\u3001\u95ee\u9898\u5f15\u51fa \u00b6 \u73b0\u5728\u4e00\u5171\u6709 \\(N\\) \u4ef6\u7269\u54c1\uff0c\u7b2ci\uff08i\u4ece1\u5f00\u59cb\uff09\u4ef6\u7269\u54c1\u7684\u91cd\u91cf\u4e3a \\(v[i]\\) \uff0c\u4ef7\u503c\u4e3a \\(w[i]\\) \u3002\u6bcf\u4e2a\u7269\u54c1\u81f3\u591a\u6311\u9009\u4e00\u6b21\uff0c\u4e14\u5728\u6311\u9009\u51fa\u6765\u7684\u7269\u54c1\u7684\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 \\(V\\) \u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u88c5\u5165\u80cc\u5305\u7684\u7269\u54c1\u7684\u603b\u4ef7\u503c\u548c\u6700\u5927\u4e3a\u591a\u5c11 \u4e8c\u3001\u5206\u6790 \u00b6 2.1 \u66b4\u529b\u601d\u8003 \u00b6 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7269\u54c1\u6211\u4eec\u65e0\u975e\u5c31\u4e24\u79cd\u9009\u62e9\uff0c \u9009 \u548c \u4e0d\u9009 \u90a3\u4e48\u5bf9\u4e8eN\u4ef6\u7269\u54c1\u7684\u6289\u62e9\u65b9\u6848\u6570\u5c31\u662f \\(2^N\\) \u79cd\uff0c\u5f53 \\(N < 27\\) \u5de6\u53f3\u7684\u65f6\u5019\uff0c\u8c8c\u4f3c\u8fd8\u53ef\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \u66b4\u529b\u641c\u7d22 \u6765\u627e\u51fa\u6700\u5927\u7684\u603b\u4ef7\u503c\uff0c\u90a3\u4e48\u5f53 \\(N\\) \u6bd4\u8f83\u5927\u7684\u65f6\u5019\u5462\uff0c\u8fd9\u79cd\u66b4\u529b\u505a\u6cd5\u5c31\u4e0d\u53ef\u53d6 2.1.1 \u66b4\u641c\u4ee3\u7801 \u00b6 C++ #include <bits/stdc++.h> using namespace std ; const int N = 1e3 + 10 ; int n , V , v [ N ], w [ N ]; int ans = 0 ; /* loc \u8868\u793a\u5f53\u524d\u6289\u62e9\u7684\u4f4d\u7f6e\uff0csum_v\u8868\u793a\u5f53\u524d \u6311\u9009\u7269\u54c1\u7684\u603b\u5bb9\u91cfres_w\u8868\u793a\u5f53\u524d\u6311\u9009\u7269\u54c1\u603b\u4ef7\u503c */ void dfs ( int loc , int sum_v , int res_w ) { if ( sum_v > V || vis [ loc ]) return ; if ( loc == n + 1 ){ ans = max ( ans , res_w ); return ; } dfs ( loc + 1 , sum_v + v [ loc ], res_w + w [ loc ]); //\u9009\u53d6\u7b2cloc\u4e2a\u4f4d\u7f6e\u7684\u6570 dfs ( loc + 1 , sum_v , res_w ); //\u4e0d\u9009\u53bb\u7b2cloc\u4e2a\u4f4d\u7f6e\u7684\u6570 } int main () { scanf ( \"%d%d\" , & n , & V ); ans = 0 ; for ( int i = 1 ; i <= n ; ++ i ) scanf ( \"%d%d\" , & v [ i ], & w [ i ]); dfs ( 1 , 0 , 0 ); printf ( \"%d \\n \" , ans ); return 0 ; } 2.2 \u5b50\u95ee\u9898\u5206\u6790 \u00b6 \u5bf9\u4e8e01\u80cc\u5305\u7684\u5b50\u95ee\u9898\u662f\u4ec0\u4e48\u5462\uff0c\u6211\u4eec\u5b9a\u4e49 \\(f[i][j]\\) \u8868\u793a\u4ece\u524d \\(i\\) \u4ef6\u7269\u54c1\u4e2d\u6bcf\u4ef6\u7269\u54c1\u6700\u591a\u9009\u4e00\u6b21\u4e14\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 \\(j\\) \u7684\u6700\u5927\u4ef7\u503c\u548c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u5f97\u5230 \\(f[N][V]\\) \u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684\u95ee\u9898\uff0c\u5373\uff1a \u4ece\u524dN\u4e2a\u7269\u54c1\u4e2d\uff0c\u6bcf\u4e2a\u7269\u54c1\u81f3\u591a\u6311\u9009\u4e00\u6b21\uff0c\u4e14\u5728\u6311\u9009\u51fa\u6765\u7684\u7269\u54c1\u7684\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 \\(V\\) \u7684\u6700\u5927\u4ef7\u503c\u548c \u6211\u4eec\u6765\u770b\u8fd9\u4e2a\u95ee\u9898\u7684\u7279\u70b9\uff1a\u6bcf\u4ef6\u7269\u54c1\u8981\u4e48\u9009\u62e9\uff0c\u8981\u4e48\u4e0d\u9009 \u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e \\(f[i][j]\\) \u8fd9\u4e2a\u5b50\u95ee\u9898\uff0c\u662f\u4ece\u524d \\(i-1\\) \u4ef6\u7269\u54c1\u8f6c\u79fb\u8fc7\u6765\u7684\uff0c\u56e0\u4e3a\u7b2c \\(i\\) \u4ef6\u7269\u54c1\u8981\u4e48\u9009\u62e9\u8981\u4e48\u4e0d\u9009\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u524d\u7f6e\u72b6\u6001\u5c31\u662f \\(f[i-1][j-v[i]] + w[i]\\) \u548c \\(f[i-1][j]\\) \u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e24\u4e2a\u5462\uff1f - \u5982\u679c\u9009\u62e9\u7b2ci\u4ef6\u7269\u54c1\uff08\u524d\u63d0\u662f\u88c5\u5f97\u4e0b\uff09\uff0c\u90a3\u4e48\u7559\u7ed9\u524d \\(i-1\\) \u4e2a\u7269\u54c1\u9009\u62e9\u7684\u7a7a\u95f4\u5927\u5c0f \u81f3\u591a \u4e3a \\(j-v[i]\\) \u7684\u5bb9\u91cf \u5982\u679c\u4e0d\u9009\u62e9\u7b2ci\u4ef6\u7269\u54c1\uff0c\u90a3\u4e48\u7559\u7ed9\u524d \\(i-1\\) \u4ef6\u7269\u54c1\u9009\u62e9\u7684\u7a7a\u95f4\u7684\u5927\u5c0f \u81f3\u591a \u4e3a \\(j\\) \u90a3\u4e48\u5bf9\u4e8e \\(f[i][j]\\) \u6765\u8bf4\u5c31\u53ea\u9700\u8981\u5728\u8fd9\u4e24\u79cd\u65b9\u6848\u4e2d\u6289\u62e9\u5c31\u597d\u4e86 \u90a3\u4e48\u6211\u4eec\u5c31\u5f97\u5230\u4e8601\u80cc\u5305\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[f[i][j]=max(f[i-1][j],f[i-1][j-v[i]] + w[i])\\] \u8fd9\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u4f60\u5b66\u5230\u540e\u9762\u4f1a\u53d1\u73b0\u57fa\u672c\u4e0a\u6240\u6709\u7684\u80cc\u5305\u95ee\u9898\uff0c\u4f8b\u5982\uff1a\u5b8c\u5168\u80cc\u5305\u3001\u591a\u91cd\u80cc\u5305\u3001\u6df7\u5408\u80cc\u5305\u7b49\u7b49\u4e00\u4e9b\u5217\u80cc\u5305\u90fd\u662f\u901a\u8fc701\u80cc\u5305\u884d\u751f\u51fa\u6765\u7684 \u53c2\u8003\u4ee3\u7801 \u00b6 C++ const int N = 1e3 + 10 ; int n , V , v [ N ], w [ N ]; int f [ N ][ N ]; void dp (){ for ( int i = 1 ; i <= n ; ++ i ) for ( int j = v [ i ]; j <= V ; ++ j ) f [ i ][ j ] = max ( f [ i -1 ][ j ], f [ i -1 ][ j - v [ i ]] + w [ i ]); printf ( \"%d \\n \" , f [ n ][ V ]); } 2.3 \u590d\u6742\u5ea6\u5206\u6790 \u00b6 2.3.1 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u6211\u4eec\u4f1a\u53d1\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(NV)\\) \u7684\uff0c\u5e76\u4e0d\u80fd\u5bf9\u4e0a\u5f0f\u505a\u4e00\u4e9b\u4f18\u5316\uff0c\u4f46\u662f\u7a7a\u95f4\u590d\u6742\u5ea6\u5374\u53ef\u4ee5 2.3.2 \u7a7a\u95f4\u590d\u6742\u5ea6 \u00b6 \u5206\u6790\u4e0a\u5f0f\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a \\(O(NV)\\) \uff0c\u4f46\u662f\u5176\u5b9e\u7a7a\u95f4\u590d\u6742\u5ea6\u8fd8\u53ef\u4ee5\u4f18\u5316\u5230 \\(O(V)\\) 2.3.2.1 01\u6eda\u52a8\u4f18\u5316 \u00b6 \u6211\u4eec\u7ee7\u7eed\u6765\u5206\u6790\u4e0a\u9762\u7684\u8f6c\u79fb\u65b9\u7a0b\uff0c\u6211\u4eec\u53ea\u7528\u5230\u4e86\u4e24\u5c42\u72b6\u6001\uff0c\u7b2c \\(i-1\\) \u5c42\u548c\u7b2c \\(i\\) \u5c42\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u6bcf\u6b21\u5b58\u50a8\u8fd9\u4e24\u5c42\u7684\u72b6\u6001\u5c31\u597d\u5566\uff0c\u8fd9\u4e5f\u53eb\u505a \u6eda\u52a8\u6570\u7ec4 \u7684 01\u6eda\u52a8\u4f18\u5316 2.3.2.2 \u5c31\u5730\u6eda\u52a8\u4f18\u5316 \u00b6 \u4f46\u662f\u4e0a\u9762\u7684 01\u6eda\u52a8 \u5e76\u4e0d\u80fd\u6ee1\u8db3\u6211\u4eec\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6b21\u9700\u8981\u5bf9\u5f53\u524d\u7684\u7b2ci\u5c42\u72b6\u6001\u8fdb\u884c\u4e00\u4e2a\u5907\u4efd\uff0c\u4f1a\u589e\u5927\u6211\u4eec\u7684\u5e38\u6570\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u6709\u4e00\u79cd\u66f4\u597d\u7684\u6eda\u52a8\u4f18\u5316 -> \u5c31\u5730\u6eda\u52a8 \uff0c\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u4e5f\u5c31\u662f\u6211\u4eec\u53ea\u9700\u8981\u5f00\u4e00\u4e2a\u7a7a\u95f4\u5927\u5c0f\u4e3a \\(V\\) \u7684\u6570\u7ec4\u5373\u53ef\uff0c\u4f46\u662f\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0c\u6b64\u65f6\u6211\u4eec \\(V\\) \u7684\u904d\u5386\u65b9\u5f0f\u9700\u8981 \u4ece\u540e\u5f80\u524d \uff0c\u6211\u4eec\u6765\u601d\u8003\u4e3a\u4ec0\u4e48\uff0c\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u4ecd\u7136\u4ece\u524d\u5f80\u540e\u904d\u5386\u7684\u8bdd\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u65e7\u7684\u72b6\u6001\u5c31\u4f1a\u88ab\u65b0\u7684\u72b6\u6001\u8986\u76d6\u4e86\uff0c\u90a3\u4e48\u6b64\u65f6\u6211\u4eec\u7528\u5230\u7684\u72b6\u6001\u5c31\u4e0d\u662f\u4e0a\u4e00\u5c42\u7684\u72b6\u6001\u4e86\u800c\u662f\u88ab\u8fd9\u4e00\u5c42\u8986\u76d6\u4e86\u7684\u72b6\u6001\uff0c\u6362\u53e5\u8bdd\u8bf4\u6b64\u65f6\u7684 \\(f[j]\\) \u4e0d\u80fd\u4ece \\(i-1\\) \u5c42\u8f6c\u79fb\u8fc7\u6765\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u76f8\u5f53\u4e8e\u5bf9\u4e8e\u6bcf\u4e00\u4ef6\u7269\u54c1\u53ef\u4ee5\u9009\u62e9 \u65e0\u9650\u6b21 \u7684\u6548\u679c\u4e86\uff0c\u800c\u8fd9\u6b63\u662f \u5b8c\u5168\u80cc\u5305 \u7684\u5c31\u5730\u6eda\u52a8\u4f18\u5316 2.3.2.3 \u6eda\u52a8\u4f18\u5316\u4ee3\u7801 \u00b6 01\u6eda\u52a8\uff1a C++ const int N = 1e3 + 10 ; int n , V , v [ N ], w [ N ]; int f [ 2 ][ N ]; void dp (){ for ( int i = 1 ; i <= n ; ++ i ){ for ( int j = v [ i ]; j <= V ; ++ j ) f [ 1 ][ j ] = max ( f [ 0 ][ j ], f [ 0 ][ j - v [ i ]] + w [ i ]); for ( int j = 0 ; j <= V ; ++ j ) f [ 0 ][ j ] = f [ 1 ][ j ]; } printf ( \"%d \\n \" , f [ 1 ][ V ]); } \u5c31\u5730\u6eda\u52a8\uff1a C++ const int N = 1e3 + 10 ; int n , V , v [ N ], w [ N ]; int f [ N ]; void dp (){ for ( int i = 1 ; i <= n ; ++ i ) for ( int j = V ; j >= v [ i ]; -- j ) f [ j ] = max ( f [ j ], f [ j - v [ i ]] + w [ i ]); printf ( \"%d \\n \" , f [ V ]); } 2.4 \u8bb0\u5fc6\u5316\u641c\u7d22 \u00b6 \u4e0a\u9762\u6211\u4eec\u5206\u6790\u4e86\u4e00\u79cd\u66b4\u529b\u7684\u505a\u6cd5\uff0c\u5728\u901a\u8fc7\u5206\u6790\u5b50\u95ee\u9898\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7a0d\u5fae\u4f18\u5316\u4e00\u4e0b\uff0c\u5199\u6210\u8fd9\u6837\uff1a C++ //\u4ece\u7b2ci\u4e2a\u7269\u54c1\u5f00\u59cb\u6311\u9009\u603b\u91cd\u91cf\u5c0f\u4e8ej\u7684\u6700\u5927\u4ef7\u503c\u548c int dfs ( int i , int j ){ int res ; //\u5df2\u7ecf\u6ca1\u6709\u5269\u4f59\u7269\u54c1 if ( i == n + 1 ) res = 0 ; //\u65e0\u6cd5\u6311\u9009\u7b2ci\u4e2a\u7269\u54c1 else if ( j < v [ i ]) res = dfs ( i + 1 , j ); //\u6bd4\u8f83\u6311\u548c\u4e0d\u6311\u7684\u60c5\u51b5\uff0c\u9009\u53d6\u6700\u5927\u7684\u60c5\u51b5 else res = max ( dfs ( i + 1 , j ), dfs ( i + 1 , j - v [ i ]) + w [ i ]); return res ; } \u4f46\u662f\u8fd9\u6837\u4ecd\u7136\u4f1a\u8d85\u65f6\uff0c\u6211\u4eec\u5206\u6790\u4f1a\u53d1\u73b0\u5bf9\u4e8e\u67d0\u4e9b\u72b6\u6001\u5176\u5b9e\u6211\u4eec\u91cd\u590d\u591a\u6b21\u8bbf\u95ee\u4e86\uff0c\u9020\u6210\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\u975e\u5e38\u9ad8\uff0c\u6240\u4ee5\u6211\u4eec\u901a\u8fc7\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u5c06\u6211\u4eec\u641c\u5230\u7684\u72b6\u6001\u90fd\u8bb0\u5f55\u4e0b\u6765\uff0c\u7b2c\u4e8c\u6b21\u8bbf\u95ee\u7684\u65f6\u5019\u76f4\u63a5\u8fd4\u56de\u5373\u53ef\uff1a C++ //n,W \u5982\u9898\u610f\u6240\u8ff0 int W , n ; int w [ N ], v [ N ]; int f [ N ][ N ]; //\u4ece\u7b2ci\u4e2a\u7269\u54c1\u5f00\u59cb\u6311\u9009\u603b\u91cd\u91cf\u5c0f\u4e8ej\u7684\u6700\u5927\u4ef7\u503c\u548c int dfs ( int i , int j ){ if ( f [ i ][ j ] > 0 ) return f [ i ][ j ]; int res ; //\u5df2\u7ecf\u6ca1\u6709\u5269\u4f59\u7269\u54c1 if ( i == n + 1 ) res = 0 ; //\u65e0\u6cd5\u6311\u9009\u7b2ci\u4e2a\u7269\u54c1 else if ( j < v [ i ]) res = dfs ( i + 1 , j ); //\u6bd4\u8f83\u6311\u548c\u4e0d\u6311\u7684\u60c5\u51b5\uff0c\u9009\u53d6\u6700\u5927\u7684\u60c5\u51b5 else res = max ( dfs ( i + 1 , j ), dfs ( i + 1 , j - v [ i ]) + w [ i ]); //\u5c06\u7ed3\u679c\u8bb0\u5f55\u5728dp\u6570\u7ec4\u4e2d return f [ i ][ j ] = res ; } \u5176\u5b9e\u5173\u4e8e\u4e0a\u9762\u7684\u641c\u7d22\u90e8\u5206\u6211\u4eec\u53ef\u4ee5\u5199\u7684\u66f4\u7b80\u5355\u4e00\u70b9\uff1a C++ ////\u8868\u793a\u7684\u662f\u4ece\u7b2ci\u4e2a\u7269\u54c1\u5230\u7b2cn\u4e2a\u7269\u54c1\u9009\u62e9\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7j\u7684\u6700\u5927\u4ef7\u503c //\u521d\u59cb\u5316f\u6570\u7ec4\u5168\u4e3a0 int dfs ( int i , int j ){ if ( f [ i ][ j ] > 0 || i == n + 1 ) return f [ i ][ j ]; return f [ i ][ j ] = ( j < v [ i ] ? dfs ( i + 1 , j ) : max ( dfs ( i + 1 , j ), dfs ( i + 1 , j - v [ i ]) + w [ i ])); } \u6216\u8005\u4ece\u540e\u5f80\u524d\u9012\u5f52\uff1a C++ //\u8868\u793a\u7684\u662f\u4ece\u7b2c\u4e00\u4e2a\u7269\u54c1\u5230\u7b2ci\u4e2a\u7269\u54c1\u9009\u62e9\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7j\u7684\u6700\u5927\u4ef7\u503c //\u521d\u59cb\u5316f\u6570\u7ec4\u5168\u4e3a0 int dfs ( int i , int j ){ if ( f [ i ][ j ] > 0 || i == 0 ) return f [ i ][ j ]; return ( f [ i ][ j ] = j < v [ i ] ? dfs ( i -1 , j ) : max ( dfs ( i -1 , j - v [ i ]) + w [ i ], dfs ( i -1 , j ))); } \u4e09\u3001\u4e00\u4e9b\u7ec6\u8282 \u00b6 3.1 \u521d\u59cb\u5316\u7ec6\u8282 \u00b6 \u6211\u4eec\u5728\u6c42\u89e3\u5173\u4e8e01\u80cc\u5305\u7684\u95ee\u9898\u7684\u65f6\u5019\uff0c\u5927\u4f53\u5206\u4e3a\u4e24\u79cd\u95ee\u9898\uff0c\u8fd9\u4e24\u79cd\u95ee\u9898\u7684\u521d\u59cb\u5316\u65b9\u5f0f\u90fd\u4e0d\u592a\u4e00\u6837\uff1a \u7b2c\u4e00\u79cd \uff1a\u8981\u6c42\u521a\u597d\u88c5\u6ee1\u80cc\u5305\uff0c\u5bf9\u4e8e\u8fd9\u4e00\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u521d\u59cb\u5316\u7684\u65f6\u5019\u5e94\u5f53\u5c06\u9664\u4e86 \\(f[0]\\) \u7684\u72b6\u6001\u8bbe\u7f6e\u4e3a0\uff0c\u5176\u4f59\u72b6\u6001\u5e94\u521d\u59cb\u5316\u4e3a -INF \u8868\u793a\u76ee\u524d\u4e0d\u80fd\u8fbe\u5230\uff0c\u56e0\u4e3a\u4e00\u5f00\u59cb\u4ec0\u4e48\u90fd\u6ca1\u9009\u7684\u65f6\u5019\u53ea\u6709\u5bb9\u91cf\u4e3a0\u7684\u65f6\u5019\u80fd\u8fbe\u5230\uff0c\u5176\u4ef7\u503c\u4e3a0 \u7b2c\u4e8c\u79cd \uff1a\u8981\u6c42\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5bf9\u4e8e\u8fd9\u4e00\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u76f4\u63a5\u5c06\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u521d\u59cb\u5316\u4e3a0\u5c31\u597d\u5566\uff0c\u56e0\u4e3a\u4e0d\u8981\u6c42\u521a\u597d\u586b\u6ee1\u80cc\u5305\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u72b6\u6001\u6211\u4eec\u90fd\u80fd\u88c5\u51650\u4e2a\u7269\u54c1\u6765\u8fbe\u5230 \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u80cc\u5305\uff0c\u53ef\u4ee5\u6765\u53c2\u8003\u8fd9\u9053\u9898\u7684\u9898\u89e3\uff1a acmer.blog.csdn.net/article/details/122839724 \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u80cc\u5305\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u9053\u9898\u7684\u9898\u89e3\uff1a acmer.blog.csdn.net/article/details/122989979 3.2 \u5e38\u6570\u7ec6\u8282 \u00b6 \u6ce8\u610f\u6211\u4eec\u4e0a\u9762\u7684\u4ee3\u7801\u5728\u5185\u5c42\u7684\u80cc\u5305\u5bb9\u91cf\u904d\u5386\u7684\u65f6\u5019\u662f\u76f4\u63a5\u4ece \\(V\\) \u904d\u5386\u5230 \\(v[i]\\) \u7684\uff0c\u800c\u4e0d\u662f1\uff0c\u8fd9\u6837\u5728 \\(v[i]\\) \u548c \\(V\\) \u6bd4\u8f83\u5927\u7684\u65f6\u5019\u5e38\u6570\u4f1a\u5c0f\u4e00\u70b9 \u56db\u3001\u62d3\u5c55 \u00b6 4.1 \u8d85\u5927\u80cc\u5305 \u00b6 \u5bf9\u4e8e\u8fd9\u79cd\u70b8\u7a7a\u95f4\u7684\u80cc\u5305\uff0c\u6211\u4eec\u610f\u5916\u53d1\u73b0n\u7684\u8303\u56f4\u53ea\u6709 \\(40\\) \uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e9b\u7269\u54c1\u62c6\u5206\u6210\u4e24\u5806\uff0c\u7136\u540e\u6211\u4eec\u7528\u4e8c\u8fdb\u5236\u679a\u4e3e\u4e24\u4e2a\u5806\u7684\u7269\u54c1\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n\u22172(n/2))\\) \u5728\u679a\u4e3e\u7b2c\u4e8c\u5806\u7684\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u7b2c\u4e00\u4e2a\u5806\u91cc\u901a\u8fc7\u4e8c\u5206\u641c\u7d22\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7269\u54c1\u5806\uff0c\u7136\u540e\u9009\u62e9\u6700\u4f18\u7684\u7ed3\u679c\u5c31\u884c\u6bcf\u6b21\u4e8c\u5206\u67e5\u8be2\u65f6\u95f4 \\(log(m)\\) , \\(m\\) \u8868\u793a\u7684\u662f\u7b2c\u4e00\u5806\u7269\u54c1\u6709\u6548\u4e2a\u6570\uff0c\u5177\u4f53\u8bf7\u770b\u4ee3\u7801\u8bb2\u89e3 C++ #include <cstdio> #include <cstring> #include <algorithm> using namespace std ; const int N = 45 ; typedef long long ll ; ll w [ N ], v [ N ], W ; int n ; struct Node { ll w , v ; } ps [ 1 << ( N / 2 )]; //\u8868\u793a\u7684\u662f\u7b2c\u4e00\u4e2a\u5806\u679a\u4e3e\u7684\u53ef\u80fd\u7684\u60c5\u51b5\u603b\u6570 bool cmp ( Node a , Node b ) { //\u6392\u5e8f\u51fd\u6570\uff0c\u56e0\u4e3a\u5f85\u4f1a\u6211\u4eec\u641c\u7d22\u7684\u65f6\u5019\u662f\u6309\u7167W\u7684\u5927\u5c0f\u8fdb\u884c\u4e8c\u5206 if ( a . w != b . w ) return a . w < b . w ; return a . v > b . v ; } int erfen ( int l , int r , ll k ) { //\u4e8c\u5206\u641c\u7d22 while ( l + 1 < r ) { int mid = l + r >> 1 ; if ( ps [ mid ]. w <= k ) { l = mid ; } else { r = mid ; } } //\u6b64\u65f6\u7684r\u8868\u793a\u7684\u662f\u5927\u4e8ek\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e return r - 1 ; } void slove () { int len1 = n / 2 ; for ( int i = 0 , len = 1 << len1 ; i < len ; ++ i ) { //\u4e8c\u8fdb\u5236\u679a\u4e3e\u7b2c\u4e00\u4e2a\u5806\u53ef\u80fd\u7684\u60c5\u51b5 int tempw = 0 , tempv = 0 ; for ( int j = 0 ; j < len1 ; ++ j ) { if ( i >> j & 1 ) { //\u662f\u5426\u9009\u53d6 tempw += w [ j ]; tempv += v [ j ]; } } ps [ i ] = ( Node ){ tempw , tempv }; } sort ( ps , ps + ( 1 << len1 ), cmp ); //\u6392\u5e8f int m = 1 ; for ( int i = 1 , len = 1 << len1 ; i < len ; ++ i ) { //\u8fd9\u91cc\u7b5b\u51fa\u65e0\u7528\u7684\u9009\u53d6\u7ec4\u5408\uff0c if ( ps [ m - 1 ]. v < ps [ i ]. v ) { //\u8fd9\u6837\u80fd\u8ba9ps\u4ece0\u5230m-1\u7684\u5143\u7d20\u90fd\u662fw\u548cv\u5347\u5e8f\u7684 ps [ m ++ ] = ps [ i ]; //\u4e5f\u5c31\u662f\u8ba9\u540e\u4e00\u4e2a\u5143\u7d20\u7684v\u4e00\u5b9a\u662f\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684v } } ll ans = 0 ; for ( int i = 0 , len = ( 1 << ( n - len1 )); i < len ; ++ i ) { //\u4e8c\u8fdb\u5236\u679a\u4e3e\u7b2c\u4e8c\u4e2a\u5806\u7684\u9009\u53d6\u60c5\u51b5 int tempw = 0 , tempv = 0 ; for ( int j = 0 ; j < n - len1 ; ++ j ) { if ( i >> j & 1 ) { tempw += w [ len1 + j ]; tempv += v [ len1 + j ]; } } if ( tempw <= W ) { int loc = erfen ( -1 , m , W - tempw ); ll key = 0 ; if ( loc != -1 ) //\u53ef\u80fd\u7b2c\u4e00\u4e2a\u5806\u4ec0\u4e48\u4e5f\u4e0d\u9009\u5c31\u6ee1\u4e86 key = ps [ loc ]. v ; ans = max ( ans , key + tempv ); //\u9009\u53d6\u6700\u4f18\u60c5\u51b5 } } printf ( \"%lld \\n \" , ans ); } int main () { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%lld\" , & w [ i ]); } for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%lld\" , & v [ i ]); } scanf ( \"%lld\" , & W ); slove (); return 0 ; } 4.2 \u9006\u541101\u80cc\u5305 \u00b6 \u6765\u81ea\u725b\u5ba2\u5bd2\u5047\u8bad\u7ec3\u8425\u7684\u4e00\u9053\u9898\uff1a 4.2.1 \u601d\u8def \u00b6 \u6211\u4eec\u73b0\u5728\u662f\u5df2\u7ecf\u77e5\u9053\u6bcf\u4e2a\u91cd\u91cf\u7684\u74dc\u7684\u4e2a\u6570\uff0c\u51fa\u73b0\u8d28\u91cf\u548c\u4e3a\u5947\u6570\u662f\u7531\u4e8e\u6211\u4eec\u8d2d\u4e70\u534a\u4e2a\u74dc\u7684\u64cd\u4f5c \u90a3\u4e48\u5c31\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u9006\u63a8\uff0c\u9996\u5148\u80fd\u591f\u77e5\u9053\uff0c \\(f[1]\\) \u7684\u503c\u5b9e\u9645\u4e0a\u5c31\u662f\u8d28\u91cf\u4e3a2\u7684\u74dc\u7684\u6570\u76ee\u3002 \u7136\u540e\u6211\u4eec\u56de\u987e\u4e0a\u4e00\u9898\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(f[i][j] =f[i-1][j] + f[i-1][j-a[i]] + f[i-1][j-a[i]*2]\\) \u6211\u4eec\u901a\u8fc7\u9006\u5411\u601d\u7ef4\uff0c\u600e\u4e48\u52a0\u4e0a\u53bb\u7684\uff0c\u5c31\u600e\u4e48\u51cf\u56de\u6765\u5373\u53ef \\(f[i-1][j] = f[i][j] - f[i-1][j-a[i]] - f[i-1][j-a[i] * 2]\\) \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u539f\u9898\u7684\u9006\u52a8\u6001\u89c4\u5212\u8f6c\u79fb\u65b9\u7a0b\uff0c\u5012\u7740\u6765\u4e00\u904d\u8fd8\u539f\u5373\u53ef\uff0c\u540c\u6837\u4e5f\u53ef\u4ee5\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u5230\u4e00\u7ef4 4.2.2 \u62d3\u5c55 \u00b6 \u6765\u81ea\u51fa\u9898\u4eba\u7684\u60f3\u6cd5\uff1a 4.2.3 \u4ee3\u7801 \u00b6 C++ #include <bits/stdc++.h> using namespace std ; //----------------\u81ea\u5b9a\u4e49\u90e8\u5206---------------- #define ll long long #define mod 1000000007 #define endl \"\\n\" #define PII pair<int,int> #define INF 0x3f3f3f3f int dx [ 4 ] = { 0 , -1 , 0 , 1 }, dy [ 4 ] = { -1 , 0 , 1 , 0 }; ll ksm ( ll a , ll b ) { ll ans = 1 ; for (; b ; b >>= 1L L ) { if ( b & 1 ) ans = ans * a % mod ; a = a * a % mod ; } return ans ; } ll lowbit ( ll x ){ return - x & x ;} const int N = 2e6 + 10 ; //----------------\u81ea\u5b9a\u4e49\u90e8\u5206---------------- ll n , m , q , a [ N ], f [ N ]; vector < ll > Vec ; int main () { std :: ios :: sync_with_stdio ( false ); std :: cin . tie ( nullptr ); std :: cout . tie ( nullptr ); cin >> m ; for ( int i = 1 ; i <= m ; ++ i ) { cin >> f [ i ]; } f [ 0 ] = 1 ; for ( int i = 1 ; i <= m ; ++ i ) { while ( f [ i ]){ Vec . push_back ( i * 2 ); for ( int j = 0 ; j <= m ; ++ j ) { if ( i + j <= m ) f [ i + j ] = ( f [ i + j ] - f [ j ] + mod ) % mod ; if ( 2 * i + j <= m ) f [ 2 * i + j ] = ( f [ 2 * i + j ] - f [ j ] + mod ) % mod ; } } } n = Vec . size (); cout << n << endl ; for ( int i = 0 ; i < n ; ++ i ) cout << Vec [ i ] << \" \\n \" [ i == n -1 ]; return 0 ; } \u4e94\u3001\u9898\u5355 \u00b6 \u9898\u76ee \u94fe\u63a5 \u9898\u89e3 [NOIP2005 \u666e\u53ca\u7ec4] \u91c7\u836f www.luogu.com.cn/problem/P1048 [USACO07DEC]Charm Bracelet S www.luogu.com.cn/problem/P2871 [NOIP2001 \u666e\u53ca\u7ec4] \u88c5\u7bb1\u95ee\u9898 www.luogu.com.cn/training/8917 [NOIP2006 \u666e\u53ca\u7ec4] \u5f00\u5fc3\u7684\u91d1\u660e www.luogu.com.cn/problem/P1060 \u5c0fA\u70b9\u83dc www.luogu.com.cn/problem/P1164 \u7cbe\u536b\u586b\u6d77 www.luogu.com.cn/problem/P1510 [USACO09OCT]Bessie's Weight Problem G www.luogu.com.cn/problem/P2639 [USACO08DEC]Hay For Sale S www.luogu.com.cn/problem/P2925 \u5c0f\u4e66\u7ae5\u2014\u2014\u5237\u9898\u5927\u519b www.luogu.com.cn/problem/P1926 5 \u500d\u7ecf\u9a8c\u65e5 www.luogu.com.cn/problem/P1802 \u6700\u5927\u7ea6\u6570\u548c www.luogu.com.cn/problem/P1734 kkksc03\u8003\u524d\u4e34\u65f6\u62b1\u4f5b\u811a www.luogu.com.cn/problem/P2392 [USACO2.2]\u96c6\u5408 Subset Sums www.luogu.com.cn/problem/P1466 yyy2015c01 \u7684 U \u76d8 www.luogu.com.cn/problem/P2370 Checkout Assistant www.luogu.com.cn/problem/CF19B \u4e5d\u5c0f\u65f6\u4e5d\u4e2a\u4eba\u4e5d\u6247\u95e8 ac.nowcoder.com/acm/contest/23106/A acmer.blog.csdn.net/article/details/122721955 \u7206\u70b8\u7684\u7b26\u5361\u6d0b\u6d0b\u6d12\u6d12 ac.nowcoder.com/acm/contest/23479/I acmer.blog.csdn.net/article/details/122839724 \u667a\u4e43\u4e70\u74dc ac.nowcoder.com/acm/contest/23478/B acmer.blog.csdn.net/article/details/122790042 \u667a\u4e43\u4e70\u74dc(another version) ac.nowcoder.com/acm/contest/23478/C acmer.blog.csdn.net/article/details/122790612","title":"01\u80cc\u5305"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#01","text":"","title":"01\u80cc\u5305"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#_1","text":"\u73b0\u5728\u4e00\u5171\u6709 \\(N\\) \u4ef6\u7269\u54c1\uff0c\u7b2ci\uff08i\u4ece1\u5f00\u59cb\uff09\u4ef6\u7269\u54c1\u7684\u91cd\u91cf\u4e3a \\(v[i]\\) \uff0c\u4ef7\u503c\u4e3a \\(w[i]\\) \u3002\u6bcf\u4e2a\u7269\u54c1\u81f3\u591a\u6311\u9009\u4e00\u6b21\uff0c\u4e14\u5728\u6311\u9009\u51fa\u6765\u7684\u7269\u54c1\u7684\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 \\(V\\) \u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u88c5\u5165\u80cc\u5305\u7684\u7269\u54c1\u7684\u603b\u4ef7\u503c\u548c\u6700\u5927\u4e3a\u591a\u5c11","title":"\u4e00\u3001\u95ee\u9898\u5f15\u51fa"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#_2","text":"","title":"\u4e8c\u3001\u5206\u6790"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#21","text":"\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7269\u54c1\u6211\u4eec\u65e0\u975e\u5c31\u4e24\u79cd\u9009\u62e9\uff0c \u9009 \u548c \u4e0d\u9009 \u90a3\u4e48\u5bf9\u4e8eN\u4ef6\u7269\u54c1\u7684\u6289\u62e9\u65b9\u6848\u6570\u5c31\u662f \\(2^N\\) \u79cd\uff0c\u5f53 \\(N < 27\\) \u5de6\u53f3\u7684\u65f6\u5019\uff0c\u8c8c\u4f3c\u8fd8\u53ef\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \u66b4\u529b\u641c\u7d22 \u6765\u627e\u51fa\u6700\u5927\u7684\u603b\u4ef7\u503c\uff0c\u90a3\u4e48\u5f53 \\(N\\) \u6bd4\u8f83\u5927\u7684\u65f6\u5019\u5462\uff0c\u8fd9\u79cd\u66b4\u529b\u505a\u6cd5\u5c31\u4e0d\u53ef\u53d6","title":"2.1 \u66b4\u529b\u601d\u8003"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#211","text":"C++ #include <bits/stdc++.h> using namespace std ; const int N = 1e3 + 10 ; int n , V , v [ N ], w [ N ]; int ans = 0 ; /* loc \u8868\u793a\u5f53\u524d\u6289\u62e9\u7684\u4f4d\u7f6e\uff0csum_v\u8868\u793a\u5f53\u524d \u6311\u9009\u7269\u54c1\u7684\u603b\u5bb9\u91cfres_w\u8868\u793a\u5f53\u524d\u6311\u9009\u7269\u54c1\u603b\u4ef7\u503c */ void dfs ( int loc , int sum_v , int res_w ) { if ( sum_v > V || vis [ loc ]) return ; if ( loc == n + 1 ){ ans = max ( ans , res_w ); return ; } dfs ( loc + 1 , sum_v + v [ loc ], res_w + w [ loc ]); //\u9009\u53d6\u7b2cloc\u4e2a\u4f4d\u7f6e\u7684\u6570 dfs ( loc + 1 , sum_v , res_w ); //\u4e0d\u9009\u53bb\u7b2cloc\u4e2a\u4f4d\u7f6e\u7684\u6570 } int main () { scanf ( \"%d%d\" , & n , & V ); ans = 0 ; for ( int i = 1 ; i <= n ; ++ i ) scanf ( \"%d%d\" , & v [ i ], & w [ i ]); dfs ( 1 , 0 , 0 ); printf ( \"%d \\n \" , ans ); return 0 ; }","title":"2.1.1 \u66b4\u641c\u4ee3\u7801"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#22","text":"\u5bf9\u4e8e01\u80cc\u5305\u7684\u5b50\u95ee\u9898\u662f\u4ec0\u4e48\u5462\uff0c\u6211\u4eec\u5b9a\u4e49 \\(f[i][j]\\) \u8868\u793a\u4ece\u524d \\(i\\) \u4ef6\u7269\u54c1\u4e2d\u6bcf\u4ef6\u7269\u54c1\u6700\u591a\u9009\u4e00\u6b21\u4e14\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 \\(j\\) \u7684\u6700\u5927\u4ef7\u503c\u548c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u5f97\u5230 \\(f[N][V]\\) \u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684\u95ee\u9898\uff0c\u5373\uff1a \u4ece\u524dN\u4e2a\u7269\u54c1\u4e2d\uff0c\u6bcf\u4e2a\u7269\u54c1\u81f3\u591a\u6311\u9009\u4e00\u6b21\uff0c\u4e14\u5728\u6311\u9009\u51fa\u6765\u7684\u7269\u54c1\u7684\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 \\(V\\) \u7684\u6700\u5927\u4ef7\u503c\u548c \u6211\u4eec\u6765\u770b\u8fd9\u4e2a\u95ee\u9898\u7684\u7279\u70b9\uff1a\u6bcf\u4ef6\u7269\u54c1\u8981\u4e48\u9009\u62e9\uff0c\u8981\u4e48\u4e0d\u9009 \u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e \\(f[i][j]\\) \u8fd9\u4e2a\u5b50\u95ee\u9898\uff0c\u662f\u4ece\u524d \\(i-1\\) \u4ef6\u7269\u54c1\u8f6c\u79fb\u8fc7\u6765\u7684\uff0c\u56e0\u4e3a\u7b2c \\(i\\) \u4ef6\u7269\u54c1\u8981\u4e48\u9009\u62e9\u8981\u4e48\u4e0d\u9009\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u524d\u7f6e\u72b6\u6001\u5c31\u662f \\(f[i-1][j-v[i]] + w[i]\\) \u548c \\(f[i-1][j]\\) \u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e24\u4e2a\u5462\uff1f - \u5982\u679c\u9009\u62e9\u7b2ci\u4ef6\u7269\u54c1\uff08\u524d\u63d0\u662f\u88c5\u5f97\u4e0b\uff09\uff0c\u90a3\u4e48\u7559\u7ed9\u524d \\(i-1\\) \u4e2a\u7269\u54c1\u9009\u62e9\u7684\u7a7a\u95f4\u5927\u5c0f \u81f3\u591a \u4e3a \\(j-v[i]\\) \u7684\u5bb9\u91cf \u5982\u679c\u4e0d\u9009\u62e9\u7b2ci\u4ef6\u7269\u54c1\uff0c\u90a3\u4e48\u7559\u7ed9\u524d \\(i-1\\) \u4ef6\u7269\u54c1\u9009\u62e9\u7684\u7a7a\u95f4\u7684\u5927\u5c0f \u81f3\u591a \u4e3a \\(j\\) \u90a3\u4e48\u5bf9\u4e8e \\(f[i][j]\\) \u6765\u8bf4\u5c31\u53ea\u9700\u8981\u5728\u8fd9\u4e24\u79cd\u65b9\u6848\u4e2d\u6289\u62e9\u5c31\u597d\u4e86 \u90a3\u4e48\u6211\u4eec\u5c31\u5f97\u5230\u4e8601\u80cc\u5305\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[f[i][j]=max(f[i-1][j],f[i-1][j-v[i]] + w[i])\\] \u8fd9\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u4f60\u5b66\u5230\u540e\u9762\u4f1a\u53d1\u73b0\u57fa\u672c\u4e0a\u6240\u6709\u7684\u80cc\u5305\u95ee\u9898\uff0c\u4f8b\u5982\uff1a\u5b8c\u5168\u80cc\u5305\u3001\u591a\u91cd\u80cc\u5305\u3001\u6df7\u5408\u80cc\u5305\u7b49\u7b49\u4e00\u4e9b\u5217\u80cc\u5305\u90fd\u662f\u901a\u8fc701\u80cc\u5305\u884d\u751f\u51fa\u6765\u7684","title":"2.2 \u5b50\u95ee\u9898\u5206\u6790"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#_3","text":"C++ const int N = 1e3 + 10 ; int n , V , v [ N ], w [ N ]; int f [ N ][ N ]; void dp (){ for ( int i = 1 ; i <= n ; ++ i ) for ( int j = v [ i ]; j <= V ; ++ j ) f [ i ][ j ] = max ( f [ i -1 ][ j ], f [ i -1 ][ j - v [ i ]] + w [ i ]); printf ( \"%d \\n \" , f [ n ][ V ]); }","title":"\u53c2\u8003\u4ee3\u7801"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#23","text":"","title":"2.3 \u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#231","text":"\u6211\u4eec\u4f1a\u53d1\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(NV)\\) \u7684\uff0c\u5e76\u4e0d\u80fd\u5bf9\u4e0a\u5f0f\u505a\u4e00\u4e9b\u4f18\u5316\uff0c\u4f46\u662f\u7a7a\u95f4\u590d\u6742\u5ea6\u5374\u53ef\u4ee5","title":"2.3.1 \u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#232","text":"\u5206\u6790\u4e0a\u5f0f\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a \\(O(NV)\\) \uff0c\u4f46\u662f\u5176\u5b9e\u7a7a\u95f4\u590d\u6742\u5ea6\u8fd8\u53ef\u4ee5\u4f18\u5316\u5230 \\(O(V)\\)","title":"2.3.2 \u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#2321-01","text":"\u6211\u4eec\u7ee7\u7eed\u6765\u5206\u6790\u4e0a\u9762\u7684\u8f6c\u79fb\u65b9\u7a0b\uff0c\u6211\u4eec\u53ea\u7528\u5230\u4e86\u4e24\u5c42\u72b6\u6001\uff0c\u7b2c \\(i-1\\) \u5c42\u548c\u7b2c \\(i\\) \u5c42\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u6bcf\u6b21\u5b58\u50a8\u8fd9\u4e24\u5c42\u7684\u72b6\u6001\u5c31\u597d\u5566\uff0c\u8fd9\u4e5f\u53eb\u505a \u6eda\u52a8\u6570\u7ec4 \u7684 01\u6eda\u52a8\u4f18\u5316","title":"2.3.2.1 01\u6eda\u52a8\u4f18\u5316"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#2322","text":"\u4f46\u662f\u4e0a\u9762\u7684 01\u6eda\u52a8 \u5e76\u4e0d\u80fd\u6ee1\u8db3\u6211\u4eec\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6b21\u9700\u8981\u5bf9\u5f53\u524d\u7684\u7b2ci\u5c42\u72b6\u6001\u8fdb\u884c\u4e00\u4e2a\u5907\u4efd\uff0c\u4f1a\u589e\u5927\u6211\u4eec\u7684\u5e38\u6570\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u6709\u4e00\u79cd\u66f4\u597d\u7684\u6eda\u52a8\u4f18\u5316 -> \u5c31\u5730\u6eda\u52a8 \uff0c\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u4e5f\u5c31\u662f\u6211\u4eec\u53ea\u9700\u8981\u5f00\u4e00\u4e2a\u7a7a\u95f4\u5927\u5c0f\u4e3a \\(V\\) \u7684\u6570\u7ec4\u5373\u53ef\uff0c\u4f46\u662f\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0c\u6b64\u65f6\u6211\u4eec \\(V\\) \u7684\u904d\u5386\u65b9\u5f0f\u9700\u8981 \u4ece\u540e\u5f80\u524d \uff0c\u6211\u4eec\u6765\u601d\u8003\u4e3a\u4ec0\u4e48\uff0c\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u4ecd\u7136\u4ece\u524d\u5f80\u540e\u904d\u5386\u7684\u8bdd\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u65e7\u7684\u72b6\u6001\u5c31\u4f1a\u88ab\u65b0\u7684\u72b6\u6001\u8986\u76d6\u4e86\uff0c\u90a3\u4e48\u6b64\u65f6\u6211\u4eec\u7528\u5230\u7684\u72b6\u6001\u5c31\u4e0d\u662f\u4e0a\u4e00\u5c42\u7684\u72b6\u6001\u4e86\u800c\u662f\u88ab\u8fd9\u4e00\u5c42\u8986\u76d6\u4e86\u7684\u72b6\u6001\uff0c\u6362\u53e5\u8bdd\u8bf4\u6b64\u65f6\u7684 \\(f[j]\\) \u4e0d\u80fd\u4ece \\(i-1\\) \u5c42\u8f6c\u79fb\u8fc7\u6765\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u76f8\u5f53\u4e8e\u5bf9\u4e8e\u6bcf\u4e00\u4ef6\u7269\u54c1\u53ef\u4ee5\u9009\u62e9 \u65e0\u9650\u6b21 \u7684\u6548\u679c\u4e86\uff0c\u800c\u8fd9\u6b63\u662f \u5b8c\u5168\u80cc\u5305 \u7684\u5c31\u5730\u6eda\u52a8\u4f18\u5316","title":"2.3.2.2 \u5c31\u5730\u6eda\u52a8\u4f18\u5316"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#2323","text":"01\u6eda\u52a8\uff1a C++ const int N = 1e3 + 10 ; int n , V , v [ N ], w [ N ]; int f [ 2 ][ N ]; void dp (){ for ( int i = 1 ; i <= n ; ++ i ){ for ( int j = v [ i ]; j <= V ; ++ j ) f [ 1 ][ j ] = max ( f [ 0 ][ j ], f [ 0 ][ j - v [ i ]] + w [ i ]); for ( int j = 0 ; j <= V ; ++ j ) f [ 0 ][ j ] = f [ 1 ][ j ]; } printf ( \"%d \\n \" , f [ 1 ][ V ]); } \u5c31\u5730\u6eda\u52a8\uff1a C++ const int N = 1e3 + 10 ; int n , V , v [ N ], w [ N ]; int f [ N ]; void dp (){ for ( int i = 1 ; i <= n ; ++ i ) for ( int j = V ; j >= v [ i ]; -- j ) f [ j ] = max ( f [ j ], f [ j - v [ i ]] + w [ i ]); printf ( \"%d \\n \" , f [ V ]); }","title":"2.3.2.3 \u6eda\u52a8\u4f18\u5316\u4ee3\u7801"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#24","text":"\u4e0a\u9762\u6211\u4eec\u5206\u6790\u4e86\u4e00\u79cd\u66b4\u529b\u7684\u505a\u6cd5\uff0c\u5728\u901a\u8fc7\u5206\u6790\u5b50\u95ee\u9898\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7a0d\u5fae\u4f18\u5316\u4e00\u4e0b\uff0c\u5199\u6210\u8fd9\u6837\uff1a C++ //\u4ece\u7b2ci\u4e2a\u7269\u54c1\u5f00\u59cb\u6311\u9009\u603b\u91cd\u91cf\u5c0f\u4e8ej\u7684\u6700\u5927\u4ef7\u503c\u548c int dfs ( int i , int j ){ int res ; //\u5df2\u7ecf\u6ca1\u6709\u5269\u4f59\u7269\u54c1 if ( i == n + 1 ) res = 0 ; //\u65e0\u6cd5\u6311\u9009\u7b2ci\u4e2a\u7269\u54c1 else if ( j < v [ i ]) res = dfs ( i + 1 , j ); //\u6bd4\u8f83\u6311\u548c\u4e0d\u6311\u7684\u60c5\u51b5\uff0c\u9009\u53d6\u6700\u5927\u7684\u60c5\u51b5 else res = max ( dfs ( i + 1 , j ), dfs ( i + 1 , j - v [ i ]) + w [ i ]); return res ; } \u4f46\u662f\u8fd9\u6837\u4ecd\u7136\u4f1a\u8d85\u65f6\uff0c\u6211\u4eec\u5206\u6790\u4f1a\u53d1\u73b0\u5bf9\u4e8e\u67d0\u4e9b\u72b6\u6001\u5176\u5b9e\u6211\u4eec\u91cd\u590d\u591a\u6b21\u8bbf\u95ee\u4e86\uff0c\u9020\u6210\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\u975e\u5e38\u9ad8\uff0c\u6240\u4ee5\u6211\u4eec\u901a\u8fc7\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u5c06\u6211\u4eec\u641c\u5230\u7684\u72b6\u6001\u90fd\u8bb0\u5f55\u4e0b\u6765\uff0c\u7b2c\u4e8c\u6b21\u8bbf\u95ee\u7684\u65f6\u5019\u76f4\u63a5\u8fd4\u56de\u5373\u53ef\uff1a C++ //n,W \u5982\u9898\u610f\u6240\u8ff0 int W , n ; int w [ N ], v [ N ]; int f [ N ][ N ]; //\u4ece\u7b2ci\u4e2a\u7269\u54c1\u5f00\u59cb\u6311\u9009\u603b\u91cd\u91cf\u5c0f\u4e8ej\u7684\u6700\u5927\u4ef7\u503c\u548c int dfs ( int i , int j ){ if ( f [ i ][ j ] > 0 ) return f [ i ][ j ]; int res ; //\u5df2\u7ecf\u6ca1\u6709\u5269\u4f59\u7269\u54c1 if ( i == n + 1 ) res = 0 ; //\u65e0\u6cd5\u6311\u9009\u7b2ci\u4e2a\u7269\u54c1 else if ( j < v [ i ]) res = dfs ( i + 1 , j ); //\u6bd4\u8f83\u6311\u548c\u4e0d\u6311\u7684\u60c5\u51b5\uff0c\u9009\u53d6\u6700\u5927\u7684\u60c5\u51b5 else res = max ( dfs ( i + 1 , j ), dfs ( i + 1 , j - v [ i ]) + w [ i ]); //\u5c06\u7ed3\u679c\u8bb0\u5f55\u5728dp\u6570\u7ec4\u4e2d return f [ i ][ j ] = res ; } \u5176\u5b9e\u5173\u4e8e\u4e0a\u9762\u7684\u641c\u7d22\u90e8\u5206\u6211\u4eec\u53ef\u4ee5\u5199\u7684\u66f4\u7b80\u5355\u4e00\u70b9\uff1a C++ ////\u8868\u793a\u7684\u662f\u4ece\u7b2ci\u4e2a\u7269\u54c1\u5230\u7b2cn\u4e2a\u7269\u54c1\u9009\u62e9\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7j\u7684\u6700\u5927\u4ef7\u503c //\u521d\u59cb\u5316f\u6570\u7ec4\u5168\u4e3a0 int dfs ( int i , int j ){ if ( f [ i ][ j ] > 0 || i == n + 1 ) return f [ i ][ j ]; return f [ i ][ j ] = ( j < v [ i ] ? dfs ( i + 1 , j ) : max ( dfs ( i + 1 , j ), dfs ( i + 1 , j - v [ i ]) + w [ i ])); } \u6216\u8005\u4ece\u540e\u5f80\u524d\u9012\u5f52\uff1a C++ //\u8868\u793a\u7684\u662f\u4ece\u7b2c\u4e00\u4e2a\u7269\u54c1\u5230\u7b2ci\u4e2a\u7269\u54c1\u9009\u62e9\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7j\u7684\u6700\u5927\u4ef7\u503c //\u521d\u59cb\u5316f\u6570\u7ec4\u5168\u4e3a0 int dfs ( int i , int j ){ if ( f [ i ][ j ] > 0 || i == 0 ) return f [ i ][ j ]; return ( f [ i ][ j ] = j < v [ i ] ? dfs ( i -1 , j ) : max ( dfs ( i -1 , j - v [ i ]) + w [ i ], dfs ( i -1 , j ))); }","title":"2.4 \u8bb0\u5fc6\u5316\u641c\u7d22"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#_4","text":"","title":"\u4e09\u3001\u4e00\u4e9b\u7ec6\u8282"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#31","text":"\u6211\u4eec\u5728\u6c42\u89e3\u5173\u4e8e01\u80cc\u5305\u7684\u95ee\u9898\u7684\u65f6\u5019\uff0c\u5927\u4f53\u5206\u4e3a\u4e24\u79cd\u95ee\u9898\uff0c\u8fd9\u4e24\u79cd\u95ee\u9898\u7684\u521d\u59cb\u5316\u65b9\u5f0f\u90fd\u4e0d\u592a\u4e00\u6837\uff1a \u7b2c\u4e00\u79cd \uff1a\u8981\u6c42\u521a\u597d\u88c5\u6ee1\u80cc\u5305\uff0c\u5bf9\u4e8e\u8fd9\u4e00\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u521d\u59cb\u5316\u7684\u65f6\u5019\u5e94\u5f53\u5c06\u9664\u4e86 \\(f[0]\\) \u7684\u72b6\u6001\u8bbe\u7f6e\u4e3a0\uff0c\u5176\u4f59\u72b6\u6001\u5e94\u521d\u59cb\u5316\u4e3a -INF \u8868\u793a\u76ee\u524d\u4e0d\u80fd\u8fbe\u5230\uff0c\u56e0\u4e3a\u4e00\u5f00\u59cb\u4ec0\u4e48\u90fd\u6ca1\u9009\u7684\u65f6\u5019\u53ea\u6709\u5bb9\u91cf\u4e3a0\u7684\u65f6\u5019\u80fd\u8fbe\u5230\uff0c\u5176\u4ef7\u503c\u4e3a0 \u7b2c\u4e8c\u79cd \uff1a\u8981\u6c42\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5bf9\u4e8e\u8fd9\u4e00\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u76f4\u63a5\u5c06\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u521d\u59cb\u5316\u4e3a0\u5c31\u597d\u5566\uff0c\u56e0\u4e3a\u4e0d\u8981\u6c42\u521a\u597d\u586b\u6ee1\u80cc\u5305\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u72b6\u6001\u6211\u4eec\u90fd\u80fd\u88c5\u51650\u4e2a\u7269\u54c1\u6765\u8fbe\u5230 \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u80cc\u5305\uff0c\u53ef\u4ee5\u6765\u53c2\u8003\u8fd9\u9053\u9898\u7684\u9898\u89e3\uff1a acmer.blog.csdn.net/article/details/122839724 \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u80cc\u5305\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u9053\u9898\u7684\u9898\u89e3\uff1a acmer.blog.csdn.net/article/details/122989979","title":"3.1 \u521d\u59cb\u5316\u7ec6\u8282"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#32","text":"\u6ce8\u610f\u6211\u4eec\u4e0a\u9762\u7684\u4ee3\u7801\u5728\u5185\u5c42\u7684\u80cc\u5305\u5bb9\u91cf\u904d\u5386\u7684\u65f6\u5019\u662f\u76f4\u63a5\u4ece \\(V\\) \u904d\u5386\u5230 \\(v[i]\\) \u7684\uff0c\u800c\u4e0d\u662f1\uff0c\u8fd9\u6837\u5728 \\(v[i]\\) \u548c \\(V\\) \u6bd4\u8f83\u5927\u7684\u65f6\u5019\u5e38\u6570\u4f1a\u5c0f\u4e00\u70b9","title":"3.2 \u5e38\u6570\u7ec6\u8282"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#_5","text":"","title":"\u56db\u3001\u62d3\u5c55"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#41","text":"\u5bf9\u4e8e\u8fd9\u79cd\u70b8\u7a7a\u95f4\u7684\u80cc\u5305\uff0c\u6211\u4eec\u610f\u5916\u53d1\u73b0n\u7684\u8303\u56f4\u53ea\u6709 \\(40\\) \uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e9b\u7269\u54c1\u62c6\u5206\u6210\u4e24\u5806\uff0c\u7136\u540e\u6211\u4eec\u7528\u4e8c\u8fdb\u5236\u679a\u4e3e\u4e24\u4e2a\u5806\u7684\u7269\u54c1\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n\u22172(n/2))\\) \u5728\u679a\u4e3e\u7b2c\u4e8c\u5806\u7684\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u7b2c\u4e00\u4e2a\u5806\u91cc\u901a\u8fc7\u4e8c\u5206\u641c\u7d22\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7269\u54c1\u5806\uff0c\u7136\u540e\u9009\u62e9\u6700\u4f18\u7684\u7ed3\u679c\u5c31\u884c\u6bcf\u6b21\u4e8c\u5206\u67e5\u8be2\u65f6\u95f4 \\(log(m)\\) , \\(m\\) \u8868\u793a\u7684\u662f\u7b2c\u4e00\u5806\u7269\u54c1\u6709\u6548\u4e2a\u6570\uff0c\u5177\u4f53\u8bf7\u770b\u4ee3\u7801\u8bb2\u89e3 C++ #include <cstdio> #include <cstring> #include <algorithm> using namespace std ; const int N = 45 ; typedef long long ll ; ll w [ N ], v [ N ], W ; int n ; struct Node { ll w , v ; } ps [ 1 << ( N / 2 )]; //\u8868\u793a\u7684\u662f\u7b2c\u4e00\u4e2a\u5806\u679a\u4e3e\u7684\u53ef\u80fd\u7684\u60c5\u51b5\u603b\u6570 bool cmp ( Node a , Node b ) { //\u6392\u5e8f\u51fd\u6570\uff0c\u56e0\u4e3a\u5f85\u4f1a\u6211\u4eec\u641c\u7d22\u7684\u65f6\u5019\u662f\u6309\u7167W\u7684\u5927\u5c0f\u8fdb\u884c\u4e8c\u5206 if ( a . w != b . w ) return a . w < b . w ; return a . v > b . v ; } int erfen ( int l , int r , ll k ) { //\u4e8c\u5206\u641c\u7d22 while ( l + 1 < r ) { int mid = l + r >> 1 ; if ( ps [ mid ]. w <= k ) { l = mid ; } else { r = mid ; } } //\u6b64\u65f6\u7684r\u8868\u793a\u7684\u662f\u5927\u4e8ek\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e return r - 1 ; } void slove () { int len1 = n / 2 ; for ( int i = 0 , len = 1 << len1 ; i < len ; ++ i ) { //\u4e8c\u8fdb\u5236\u679a\u4e3e\u7b2c\u4e00\u4e2a\u5806\u53ef\u80fd\u7684\u60c5\u51b5 int tempw = 0 , tempv = 0 ; for ( int j = 0 ; j < len1 ; ++ j ) { if ( i >> j & 1 ) { //\u662f\u5426\u9009\u53d6 tempw += w [ j ]; tempv += v [ j ]; } } ps [ i ] = ( Node ){ tempw , tempv }; } sort ( ps , ps + ( 1 << len1 ), cmp ); //\u6392\u5e8f int m = 1 ; for ( int i = 1 , len = 1 << len1 ; i < len ; ++ i ) { //\u8fd9\u91cc\u7b5b\u51fa\u65e0\u7528\u7684\u9009\u53d6\u7ec4\u5408\uff0c if ( ps [ m - 1 ]. v < ps [ i ]. v ) { //\u8fd9\u6837\u80fd\u8ba9ps\u4ece0\u5230m-1\u7684\u5143\u7d20\u90fd\u662fw\u548cv\u5347\u5e8f\u7684 ps [ m ++ ] = ps [ i ]; //\u4e5f\u5c31\u662f\u8ba9\u540e\u4e00\u4e2a\u5143\u7d20\u7684v\u4e00\u5b9a\u662f\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684v } } ll ans = 0 ; for ( int i = 0 , len = ( 1 << ( n - len1 )); i < len ; ++ i ) { //\u4e8c\u8fdb\u5236\u679a\u4e3e\u7b2c\u4e8c\u4e2a\u5806\u7684\u9009\u53d6\u60c5\u51b5 int tempw = 0 , tempv = 0 ; for ( int j = 0 ; j < n - len1 ; ++ j ) { if ( i >> j & 1 ) { tempw += w [ len1 + j ]; tempv += v [ len1 + j ]; } } if ( tempw <= W ) { int loc = erfen ( -1 , m , W - tempw ); ll key = 0 ; if ( loc != -1 ) //\u53ef\u80fd\u7b2c\u4e00\u4e2a\u5806\u4ec0\u4e48\u4e5f\u4e0d\u9009\u5c31\u6ee1\u4e86 key = ps [ loc ]. v ; ans = max ( ans , key + tempv ); //\u9009\u53d6\u6700\u4f18\u60c5\u51b5 } } printf ( \"%lld \\n \" , ans ); } int main () { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%lld\" , & w [ i ]); } for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%lld\" , & v [ i ]); } scanf ( \"%lld\" , & W ); slove (); return 0 ; }","title":"4.1 \u8d85\u5927\u80cc\u5305"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#42-01","text":"\u6765\u81ea\u725b\u5ba2\u5bd2\u5047\u8bad\u7ec3\u8425\u7684\u4e00\u9053\u9898\uff1a","title":"4.2 \u9006\u541101\u80cc\u5305"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#421","text":"\u6211\u4eec\u73b0\u5728\u662f\u5df2\u7ecf\u77e5\u9053\u6bcf\u4e2a\u91cd\u91cf\u7684\u74dc\u7684\u4e2a\u6570\uff0c\u51fa\u73b0\u8d28\u91cf\u548c\u4e3a\u5947\u6570\u662f\u7531\u4e8e\u6211\u4eec\u8d2d\u4e70\u534a\u4e2a\u74dc\u7684\u64cd\u4f5c \u90a3\u4e48\u5c31\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u9006\u63a8\uff0c\u9996\u5148\u80fd\u591f\u77e5\u9053\uff0c \\(f[1]\\) \u7684\u503c\u5b9e\u9645\u4e0a\u5c31\u662f\u8d28\u91cf\u4e3a2\u7684\u74dc\u7684\u6570\u76ee\u3002 \u7136\u540e\u6211\u4eec\u56de\u987e\u4e0a\u4e00\u9898\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(f[i][j] =f[i-1][j] + f[i-1][j-a[i]] + f[i-1][j-a[i]*2]\\) \u6211\u4eec\u901a\u8fc7\u9006\u5411\u601d\u7ef4\uff0c\u600e\u4e48\u52a0\u4e0a\u53bb\u7684\uff0c\u5c31\u600e\u4e48\u51cf\u56de\u6765\u5373\u53ef \\(f[i-1][j] = f[i][j] - f[i-1][j-a[i]] - f[i-1][j-a[i] * 2]\\) \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u539f\u9898\u7684\u9006\u52a8\u6001\u89c4\u5212\u8f6c\u79fb\u65b9\u7a0b\uff0c\u5012\u7740\u6765\u4e00\u904d\u8fd8\u539f\u5373\u53ef\uff0c\u540c\u6837\u4e5f\u53ef\u4ee5\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u5230\u4e00\u7ef4","title":"4.2.1 \u601d\u8def"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#422","text":"\u6765\u81ea\u51fa\u9898\u4eba\u7684\u60f3\u6cd5\uff1a","title":"4.2.2 \u62d3\u5c55"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#423","text":"C++ #include <bits/stdc++.h> using namespace std ; //----------------\u81ea\u5b9a\u4e49\u90e8\u5206---------------- #define ll long long #define mod 1000000007 #define endl \"\\n\" #define PII pair<int,int> #define INF 0x3f3f3f3f int dx [ 4 ] = { 0 , -1 , 0 , 1 }, dy [ 4 ] = { -1 , 0 , 1 , 0 }; ll ksm ( ll a , ll b ) { ll ans = 1 ; for (; b ; b >>= 1L L ) { if ( b & 1 ) ans = ans * a % mod ; a = a * a % mod ; } return ans ; } ll lowbit ( ll x ){ return - x & x ;} const int N = 2e6 + 10 ; //----------------\u81ea\u5b9a\u4e49\u90e8\u5206---------------- ll n , m , q , a [ N ], f [ N ]; vector < ll > Vec ; int main () { std :: ios :: sync_with_stdio ( false ); std :: cin . tie ( nullptr ); std :: cout . tie ( nullptr ); cin >> m ; for ( int i = 1 ; i <= m ; ++ i ) { cin >> f [ i ]; } f [ 0 ] = 1 ; for ( int i = 1 ; i <= m ; ++ i ) { while ( f [ i ]){ Vec . push_back ( i * 2 ); for ( int j = 0 ; j <= m ; ++ j ) { if ( i + j <= m ) f [ i + j ] = ( f [ i + j ] - f [ j ] + mod ) % mod ; if ( 2 * i + j <= m ) f [ 2 * i + j ] = ( f [ 2 * i + j ] - f [ j ] + mod ) % mod ; } } } n = Vec . size (); cout << n << endl ; for ( int i = 0 ; i < n ; ++ i ) cout << Vec [ i ] << \" \\n \" [ i == n -1 ]; return 0 ; }","title":"4.2.3 \u4ee3\u7801"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85/#_6","text":"\u9898\u76ee \u94fe\u63a5 \u9898\u89e3 [NOIP2005 \u666e\u53ca\u7ec4] \u91c7\u836f www.luogu.com.cn/problem/P1048 [USACO07DEC]Charm Bracelet S www.luogu.com.cn/problem/P2871 [NOIP2001 \u666e\u53ca\u7ec4] \u88c5\u7bb1\u95ee\u9898 www.luogu.com.cn/training/8917 [NOIP2006 \u666e\u53ca\u7ec4] \u5f00\u5fc3\u7684\u91d1\u660e www.luogu.com.cn/problem/P1060 \u5c0fA\u70b9\u83dc www.luogu.com.cn/problem/P1164 \u7cbe\u536b\u586b\u6d77 www.luogu.com.cn/problem/P1510 [USACO09OCT]Bessie's Weight Problem G www.luogu.com.cn/problem/P2639 [USACO08DEC]Hay For Sale S www.luogu.com.cn/problem/P2925 \u5c0f\u4e66\u7ae5\u2014\u2014\u5237\u9898\u5927\u519b www.luogu.com.cn/problem/P1926 5 \u500d\u7ecf\u9a8c\u65e5 www.luogu.com.cn/problem/P1802 \u6700\u5927\u7ea6\u6570\u548c www.luogu.com.cn/problem/P1734 kkksc03\u8003\u524d\u4e34\u65f6\u62b1\u4f5b\u811a www.luogu.com.cn/problem/P2392 [USACO2.2]\u96c6\u5408 Subset Sums www.luogu.com.cn/problem/P1466 yyy2015c01 \u7684 U \u76d8 www.luogu.com.cn/problem/P2370 Checkout Assistant www.luogu.com.cn/problem/CF19B \u4e5d\u5c0f\u65f6\u4e5d\u4e2a\u4eba\u4e5d\u6247\u95e8 ac.nowcoder.com/acm/contest/23106/A acmer.blog.csdn.net/article/details/122721955 \u7206\u70b8\u7684\u7b26\u5361\u6d0b\u6d0b\u6d12\u6d12 ac.nowcoder.com/acm/contest/23479/I acmer.blog.csdn.net/article/details/122839724 \u667a\u4e43\u4e70\u74dc ac.nowcoder.com/acm/contest/23478/B acmer.blog.csdn.net/article/details/122790042 \u667a\u4e43\u4e70\u74dc(another version) ac.nowcoder.com/acm/contest/23478/C acmer.blog.csdn.net/article/details/122790612","title":"\u4e94\u3001\u9898\u5355"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/","text":"\u5b8c\u5168\u80cc\u5305 \u00b6 \u4e00\u3001\u95ee\u9898\u5f15\u51fa \u00b6 \u73b0\u5728\u4e00\u5171\u6709 \\(N\\) \u4ef6\u7269\u54c1\uff0c\u7b2ci\uff08i\u4ece1\u5f00\u59cb\uff09\u4ef6\u7269\u54c1\u7684\u91cd\u91cf\u4e3a \\(v[i]\\) \uff0c\u4ef7\u503c\u4e3a \\(w[i]\\) \u3002\u6bcf\u4e2a\u7269\u54c1\u53ef\u4ee5\u6311\u9009 \u65e0\u6570\u6b21 \uff0c\u4e14\u5728\u6311\u9009\u51fa\u6765\u7684\u7269\u54c1\u7684\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 \\(V\\) \u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u88c5\u5165\u80cc\u5305\u7684\u7269\u54c1\u7684\u603b\u4ef7\u503c\u548c\u6700\u5927\u4e3a\u591a\u5c11 \u4e8c\u3001\u5206\u6790 \u00b6 \u73b0\u5728\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u7269\u54c1\u7684\u6289\u62e9\u5c31\u4e0d\u53ea\u662f \u201c\u9009\u201d \u548c \u201c\u4e0d\u9009\u201d \u4e86\uff0c\u56e0\u4e3a\u73b0\u5728\u6bcf\u4e00\u4e2a\u7269\u54c1\u53ef\u4ee5\u9009\u62e9\u65e0\u9650\u6b21\uff0c\u4f46\u662f\u6211\u4eec\u7684\u80cc\u5305\u5bb9\u91cf\u8fd8\u662f\u6709\u9650\u5236\u7684\uff0c\u5047\u8bbe\u8bf4\u4e00\u4e2a\u80cc\u5305\u5168\u88c5\u7b2c \\(i\\) \u4e2a\u7269\u54c1\uff0c\u90a3\u4e48\u6700\u591a\u88c5 \\(K = \\left \\lfloor \\frac{V}{v[i]} \\right \\rfloor\\) \u8fd9\u4e48\u591a\u4e2a\uff0c\u4e8e\u662f\u6211\u4eec\u5c06\u6bcf\u4e00\u4e2a\u7269\u54c1\u7684 \u4e0a\u9650\u6b21\u6570 \u6c42\u51fa\u6765\u4e86 \u90a3\u4e48\u6211\u4eec\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5176\u5b9e\u5c31\u53ef\u4ee5\u5199\u6210\u8fd9\u6837: \\[F[i][j] = max\\{F[i-1][V-k\\times v[i]] + k\\times w[i]\\} \\ (0<=k\\times v[i]<= V)\\] 2.1 \u8f6c\u5316\u4e3a01\u80cc\u5305 \u00b6 \u6211\u4eec\u5c06\u8fd9 \\(K\\) \u4e2a\u7269\u54c1\u770b\u4f5c\u72ec\u7acb\u7684\u7269\u54c1\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u6bcf\u4e00\u4e2a\u7269\u54c1\u90fd\u8fd9\u6837\u62c6\u5206\u7136\u540e\u518d\u653e\u8fdb\u6211\u4eec\u7684\u6570\u7ec4\u91cc\u9762\uff0c\u6700\u540e\u8dd1\u4e00\u6b2101\u80cc\u5305\u5c31\u80fd\u89e3\u51b3\u6211\u4eec\u8fd9\u4e2a\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u4e86,\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u5982\u4e0b\u4ee3\u7801\uff1a C++ #include <bits/stdc++.h> using namespace std ; const int N = 1000 + 10 , M = N * N ; int v [ M ], w [ M ], n , V ; int f [ N ]; int main () { cin >> n >> V ; int a , b ; int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> a >> b ; for ( int j = 1 , l = V / a ; j <= l ; ++ j ) //\u5c06\u5176\u62c6\u5206\u4e3a\u5355\u4e2a\u7269\u54c1 v [ ++ cnt ] = a , w [ cnt ] = b ; } for ( int i = 1 ; i <= cnt ; ++ i ) for ( int j = V ; j >= v [ i ]; -- j ) f [ j ] = max ( f [ j ], f [ j - v [ i ]] + w [ i ]); cout << f [ V ] << endl ; } 2.2 \u7a7a\u95f4\u4f18\u5316 \u00b6 \u4e0a\u9762\u5c06\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u8f6c\u5316\u4e3a\u4e8601\u80cc\u5305\u95ee\u9898\uff0c\u4f46\u662f\u5e26\u6765\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u6bcf\u4e00\u4ef6\u7269\u54c1\u62c6\u5206\u7684\u6b21\u6570\u90fd\u5f88\u591a\uff0c\u5bfc\u81f4\u8d85\u51fa\u4e86\u7a7a\u95f4\u9650\u5236\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u4e0d\u7528\u5c06\u6bcf\u4e00\u4e2a\u7269\u54c1\u76f4\u63a5\u653e\u8fdb\u6211\u4eec\u7684 \\(v[]\\) \u548c \\(w[]\\) \u6570\u7ec4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u72b6\u6001\u8f6c\u79fb\u7684\u65f6\u5019\u7528\u5230\u5c31\u597d\u4e86\uff0c\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u4e2a\u4ee3\u7801\uff1a C++ #include <bits/stdc++.h> using namespace std ; const int N = 1000 + 10 , M = N * N ; int v [ N ], w [ N ], n , V ; int f [ N ]; int main () { cin >> n >> V ; int a , b ; int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> v [ i ] >> w [ i ]; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = V ; j >= v [ i ]; -- j ) for ( int k = 1 , l = V / v [ i ]; k <= l ; ++ k ) if ( j >= v [ i ] * k ) f [ j ] = max ( f [ j ], f [ j - v [ i ] * k ] + w [ i ] * k ); cout << f [ V ] << endl ; } \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e24\u4e2a\u70b9\uff1a 1.\u6211\u4eec\u5faa\u73af\u80cc\u5305\u7684\u5927\u5c0f\u7684\u65f6\u5019\u9700\u8981\u4ece\u540e\u5f80\u524d\u5faa\u73af 2.\u6211\u4eec\u5728 for \u5faa\u73af\u7684\u65f6\u5019 \u80cc\u5305\u7a7a\u95f4 \u7684\u5faa\u73af\u662f\u8981\u653e\u5728 \u6b21\u6570\u679a\u4e3e \u5faa\u73af\u7684\u4e0a\u9762\u7684\uff0c\u5982\u679c\u6211\u4eec\u5c06\u7a7a\u95f4\u679a\u4e3e\u653e\u5728\u6700\u91cc\u5c42\uff0c\u8868\u793a\u7684\u542b\u4e49\u5c31\u662f\u5bf9\u4e8ek\u4e2a\u7269\u54c1\uff0c\u6bcf\u4e00\u4e2a\u53ef\u9009\u53ef\u4e0d\u9009\uff0c\u90a3\u4e48\u6700\u540e\u8986\u76d6\u7684\u8303\u56f4\u5c31\u4f1a\u53d1\u751f\u91cd\u590d\uff0c\u8fd9\u4e00\u70b9\u5176\u5b9e\u53ef\u4ee5\u548c\u4e0b\u9762\u7684\u65f6\u95f4\u4f18\u5316\u505a\u4e00\u4e2a\u5bf9\u6bd4 2.3 \u65f6\u95f4\u4f18\u5316 \u00b6 \u5bf9\u4e8e\u6211\u4eec\u679a\u4e3e\u4e00\u4e2a\u7269\u54c1\u53d6 \\(K\\) \u6b21\u7684\u65f6\u5019\u5176\u5b9e\u662f\u53ef\u4ee5\u901a\u8fc7 \u4e8c\u8fdb\u5236\u4f18\u5316 \u7684\uff0c\u6211\u4eec\u6765\u601d\u8003\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u6709\u4e86 \\(1\u30012\u30014\\) \u4e09\u4f4d\u6570\u6211\u4eec\u5c31\u80fd\u62fc\u51d1\u51fa \\([1,7]\\) \u8303\u56f4\u5185\u6240\u6709\u7684\u6570\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u60f3\u51d1\u51fa \\([1,12]\\) \u8303\u56f4\u5185\u6240\u6709\u7684\u6570\u5462\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u518d\u6761\u4ef6\u4e00\u4e2a\u6570 \\(5\\) \uff0c\u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u524d\u9762\u80fd\u62fc\u51d1\u51fa \\([1,7]\\) \u8303\u56f4\u5185\u7684\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u518d\u6dfb\u52a0\u4e00\u4e2a \\(5\\) \u5c31\u80fd\u6269\u5927\u6211\u4eec\u62fc\u51d1\u7684\u6570\u7684\u8303\u56f4 \\([1,12]\\) \uff0c\u5bf9\u4e8e\u6211\u4eec\u8fd9\u4e2a\u96c6\u5408\u7684\u6bcf\u4e00\u4e2a\u6570\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u6216\u8005\u662f\u4e0d\u9009\u6765\u5b9e\u73b0\u6240\u6709\u6570\u4f4d\u7684\u679a\u4e3e\uff0c\u800c\u8fd9\u5c31\u7c7b\u4f3c\u6211\u4eec\u7684\u4e8c\u8fdb\u5236\u4e00\u6837 0 \u8868\u793a\u7684\u5c31\u662f\u4e0d\u9009\uff0c 1 \u8868\u793a\u7684\u5c31\u662f\u9009\u62e9\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u628ak\u79cd\u7269\u54c1\u7684\u9009\u6cd5\u4ece0\u679a\u4e3e\u5b8c\uff0c\u53ea\u9700\u8981\u5c06\u5176\u4e8c\u8fdb\u5236\u62c6\u5206\u51fa\u6765\u7136\u540e\u4e00\u4e00\u679a\u4e3e\u5373\u53ef\uff0c\u800c\u8fd9\u4e00\u90e8\u5206\u7684\u5185\u5bb9\u5176\u5b9e\u662f\u653e\u5728\u4e86 \u591a\u91cd\u80cc\u5305 \u90e8\u5206\u7684\uff0c\u5173\u4e8e\u5b8c\u5168\u80cc\u5305\u5176\u5b9e\u6709\u66f4\u52a0\u4f18\u79c0\u7684\u4f18\u5316\u65b9\u6cd5\uff0c\u6545\u5728\u6b64\u5c31\u4e0d\u591a\u8d58\u8ff0\u5173\u4e8e\u4e8c\u8fdb\u5236\u4f18\u5316\u7684\u7ec6\u5219\u4e86\uff0c\u5173\u4e8e\u4ee3\u7801\u5927\u5bb6\u53ef\u4ee5\u5148\u81ea\u5df1\u601d\u8003\u4e00\u4e0b\uff0c\u5728\u4e0b\u4e00\u7ae0\u7684\u591a\u91cd\u80cc\u5305\u4f1a\u7ec6\u8c08\u7684 2.4 \u5e38\u6570\u4f18\u5316 \u00b6 \u82e5\u4e24\u4ef6\u7269\u54c1 \\(i\u3001j\\) \u6ee1\u8db3 \\(v_i \u2264 v_j\\) \u4e14 \\(w_i \u2265 w_j\\) \uff0c\u5219\u5c06\u53ef\u4ee5\u5c06\u7269\u54c1 \\(j\\) \u76f4\u63a5\u53bb\u6389\uff0c\u4e0d\u7528\u8003\u8651\u3002 \u8fd9\u4e2a\u4f18\u5316\u7684\u6b63\u786e\u6027\u662f\u663e\u7136\u7684\uff1a\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u53ef\u5c06\u4ef7\u503c\u5c0f\u8d39\u7528\u9ad8\u7684 \\(j\\) \u6362\u6210\u7269\u7f8e\u4ef7\u5ec9\u7684 i\uff0c\u5f97\u5230\u7684\u65b9\u6848\u81f3\u5c11\u4e0d\u4f1a\u66f4\u5dee\u3002\u5bf9\u4e8e\u968f\u673a\u751f\u6210\u7684\u6570\u636e\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5f80\u5f80\u4f1a\u5927\u5927\u51cf\u5c11\u7269\u54c1\u7684 \u4ef6\u6570\uff0c\u4ece\u800c\u52a0\u5feb\u901f\u5ea6\u3002\u7136\u800c\u8fd9\u4e2a\u5e76\u4e0d\u80fd\u6539\u5584\u6700\u574f\u60c5\u51b5\u7684\u590d\u6742\u5ea6\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u7279\u522b\u8bbe\u8ba1\u7684 \u6570\u636e\u53ef\u4ee5\u4e00\u4ef6\u7269\u54c1\u4e5f\u53bb\u4e0d\u6389\u3002 \u9996\u5148\u5c06\u4f53\u79ef\u5927\u4e8e \\(V\\) \u7684\u7269\u54c1\u53bb\u6389\uff0c\u7136\u540e\u4f7f\u7528\u7c7b\u4f3c\u8ba1\u6570\u6392\u5e8f\u7684\u505a\u6cd5\uff0c\u8ba1\u7b97\u51fa\u8d39\u7528\u76f8\u540c\u7684\u7269\u54c1\u4e2d\u4ef7\u503c\u6700\u9ad8\u7684\u662f\u54ea\u4e2a\uff0c\u53ef\u4ee5 \\(O(V + N)\\) \u5730\u5b8c\u6210\u8fd9\u4e2a\u4f18\u5316\u3002 \u4e00\u822c\u6765\u8bf4\u80cc\u5305\u95ee\u9898\u90fd\u4e0d\u4f1a\u5361\u5e38\uff0c\u6545\u4e0a\u8ff0\u4f18\u5316\u4ee3\u7801\u5c31\u4e0d\u7ed9\u51fa\u4ee3\u7801\u4e86\uff0c\u6839\u636e\u5b9e\u9645\u95ee\u9898\u5206\u6790\u5427 2.5 \u6700\u4f18\u4f18\u5316 \u00b6 \u5728\u524d\u9762\u7684\u4e8c\u8fdb\u5236\u4f18\u5316\u7684\u5730\u65b9\u6211\u4eec\u8bb2\u4e86\uff0c\u5bf9\u4e8e\u5b8c\u5168\u80cc\u5305\u6709\u7740\u6bd4\u4e8c\u8fdb\u5236\u4f18\u5316\u66f4\u52a0\u597d\u7684\u4e00\u4e2a\u4f18\u5316\uff0c\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u5148\u6765\u770b\u770b\u4e0a\u9762\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[F[i][j] = max\\{F[i-1][V-k\\times v[i]] + k\\times w[i]\\} \\ (0<=k\\times v[i]<= V)\\] \u6211\u4eec\u89c2\u5bdf\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u6211\u4eec\u8981\u5c06\u8fd9\u4e00\u4ef6\u7269\u54c1\u653e\u5165\u6211\u4eec\u7684\u80cc\u5305\u4e2d\u5047\u8bbe\u4e0d\u679a\u4e3e \\(k\\) \u90a3\u5e94\u8be5\u662f\u600e\u6837\u5462\uff1f \u4e0d\u653e\u5165\u7b2c \\(i\\) \u4ef6\u7269\u54c1\uff0c\u5373 \\(f[i][j]=f[i-1][j]\\) \u653e\u5165\u7b2c \\(i\\) \u4ef6\u7269\u54c1\uff0c\u5373 \\(f[i][j] = f[i][j-v[i]]+w[i]\\) \u56e0\u4e3a\u8fd9\u6837\u88c5\u8f7d\u7684\u8bdd\u65b0\u7684\u72b6\u6001\u5c31\u4f1a\u8986\u76d6\u4e45\u7684\u72b6\u6001\uff0c\u4e5f\u5c31\u9020\u6210\u4e86\u5bf9\u4e8e\u4e00\u4e2a\u7269\u54c1\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u65e0\u9650\u6b21\u7684\u60c5\u51b5\uff0c\u800c\u8fd9\u79cd\u6548\u679c\u6b63\u662f\u6211\u4eec\u60f3\u8981\u7684\uff08\u5728\u524d\u9762\u768401\u80cc\u5305\u5904\u6211\u4eec\u4e5f\u8bb2\u8fc7\u4e86\uff09 \u90a3\u4e48\u4e0d\u96be\u5f97\u51fa\u4ee3\u7801\u5982\u4e0b\uff1a C++ #include <bits/stdc++.h> using namespace std ; const int N = 1000 + 10 , M = N * N ; int v [ N ], w [ N ], n , V ; int f [ N ][ N ]; int main () { cin >> n >> V ; int a , b ; for ( int i = 1 ; i <= n ; ++ i ) cin >> v [ i ] >> w [ i ]; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 0 ; j <= V ; ++ j ){ if ( j >= v [ i ]) f [ i ][ j ] = max ( f [ i -1 ][ j ], f [ i ][ j - v [ i ]] + w [ i ]); else f [ i ][ j ] = f [ i -1 ][ j ]; } cout << f [ n ][ V ] << endl ; } \u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u8fd9\u91cc \\(f[i][j]\\) \u7684\u72b6\u6001\u5982\u679c\u5728 \\(j\\) \u6bd4 \\(v[i]\\) \u5c0f\u7684\u65f6\u5019\u5e94\u8be5\u7531\u4e0a\u4e00\u5c42\u76f4\u63a5\u8f6c\u79fb\u8fc7\u6765 \u7136\u540e\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u7b2c\u4e00\u5c42\u72b6\u6001\u6211\u4eec\u53bb\u6389\u4e0d\u4f1a\u5f71\u54cd\u72b6\u6001\u8f6c\u79fb\uff0c\u56e0\u4e3a\u6211\u4eec\u5982\u679c\u662f\u65b0\u4e00\u5c42\u90a3\u4e48\u76f4\u63a5\u5148\u7531\u4e0a\u4e00\u5c42\u8f6c\u79fb\u8fc7\u6765\u5c31\u597d\u4e86\uff0c\u5982\u679c\u8fd8\u662f\u5f53\u524d\u8fd9\u4e00\u5c42\u90a3\u4e48\u4e5f\u76f4\u63a5\u7531 \\(j-v[i]\\) \u7684\u72b6\u6001\u8f6c\u79fb\u8fc7\u6765\u5c31\u597d\uff0c\u603b\u800c\u8a00\u4e4b\u6211\u4eec\u901a\u8fc7\u6eda\u52a8\u4f18\u5316\u53ef\u4ee5\u53bb\u6389\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ #include <bits/stdc++.h> using namespace std ; const int N = 1000 + 10 , M = N * N ; int v [ N ], w [ N ], n , V ; int f [ N ]; int main () { cin >> n >> V ; int a , b ; for ( int i = 1 ; i <= n ; ++ i ) cin >> v [ i ] >> w [ i ]; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = v [ i ]; j <= V ; ++ j ) f [ j ] = max ( f [ j ], f [ j - v [ i ]] + w [ i ]); cout << f [ V ] << endl ; } \u73b0\u5728\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86 \\(O(NV)\\) ,\u800c\u7a7a\u95f4\u590d\u6742\u5ea6\u53d8\u6210\u4e86 \\(O(V)\\) 2.6 \u5c0f\u7ed3 \u00b6 \u81f3\u6b64\u6211\u4eec\u7684\u5b8c\u5168\u80cc\u5305\u5185\u5bb9\u5927\u6982\u5982\u4e0a\uff0c\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u4e5f\u662f\u4e00\u4e2a\u76f8\u5f53\u57fa\u7840\u7684\u80cc\u5305\u95ee\u9898\uff0c\u5b83\u6709\u4e24\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u3002\u5e0c\u671b\u8bfb\u8005\u80fd\u591f\u5bf9\u8fd9\u4e24\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u90fd\u4ed4\u7ec6\u5730\u4f53\u4f1a\uff0c\u4e0d\u4ec5\u8bb0\u4f4f\uff0c\u4e5f\u8981\u5f04\u660e\u767d\u5b83\u4eec\u662f\u600e\u4e48\u5f97\u51fa\u6765\u7684\uff0c\u6700\u597d\u80fd\u591f\u81ea\u5df1\u60f3\u4e00\u79cd\u5f97\u5230\u8fd9\u4e9b\u65b9\u7a0b\u7684\u65b9\u6cd5\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u6bcf\u4e00\u9053\u52a8\u6001\u89c4\u5212\u9898\u76ee\u90fd\u601d\u8003\u5176\u65b9\u7a0b\u7684\u610f\u4e49\u4ee5\u53ca\u5982\u4f55\u5f97\u6765\uff0c\u662f\u52a0\u6df1\u5bf9\u52a8\u6001\u89c4\u5212\u7684\u7406\u89e3\u3001\u63d0\u9ad8\u52a8\u6001\u89c4\u5212\u529f\u529b\u7684\u597d\u65b9\u6cd5\u3002 \u4e09\u3001\u9898\u5355 \u00b6 \u591a\u52a0\u7ec3\u4e60\u80fd\u591f\u66f4\u5feb\u7684\u638c\u63e1\u5b8c\u5168\u80cc\u5305\u7684\u7cbe\u9ad3\uff0c\u6545\u9644\u4e0a\u9898\u5355\uff1a \u9898\u76ee \u94fe\u63a5 \u9898\u89e3 \u75af\u72c2\u7684\u91c7\u836f https://www.luogu.com.cn/problem/P1616 [USACO3.1]Score Inflation https://www.luogu.com.cn/problem/P2722 \u795e\u5947\u7684\u56db\u6b21\u65b9\u6570 https://www.luogu.com.cn/problem/P1679 A+B Problem\uff08\u518d\u5347\u7ea7\uff09 https://www.luogu.com.cn/problem/P1832 \u6295\u8d44\u7684\u6700\u5927\u6548\u76ca https://www.luogu.com.cn/problem/P1853 Cut Ribbon https://www.luogu.com.cn/problem/CF189A Elimination https://www.luogu.com.cn/problem/CF417A [USACO08NOV]Buying Hay S https://www.luogu.com.cn/problem/P2918 [CSP-J2019] \u7eaa\u5ff5\u54c1 https://www.luogu.com.cn/problem/P5662 [NOIP2018 \u63d0\u9ad8\u7ec4] \u8d27\u5e01\u7cfb\u7edf https://www.luogu.com.cn/problem/P5020 \u6574\u6570\u5212\u5206 https://www.acwing.com/problem/content/description/902/ https://acmer.blog.csdn.net/article/details/123052271","title":"\u5b8c\u5168\u80cc\u5305"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/#_1","text":"","title":"\u5b8c\u5168\u80cc\u5305"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/#_2","text":"\u73b0\u5728\u4e00\u5171\u6709 \\(N\\) \u4ef6\u7269\u54c1\uff0c\u7b2ci\uff08i\u4ece1\u5f00\u59cb\uff09\u4ef6\u7269\u54c1\u7684\u91cd\u91cf\u4e3a \\(v[i]\\) \uff0c\u4ef7\u503c\u4e3a \\(w[i]\\) \u3002\u6bcf\u4e2a\u7269\u54c1\u53ef\u4ee5\u6311\u9009 \u65e0\u6570\u6b21 \uff0c\u4e14\u5728\u6311\u9009\u51fa\u6765\u7684\u7269\u54c1\u7684\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 \\(V\\) \u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u88c5\u5165\u80cc\u5305\u7684\u7269\u54c1\u7684\u603b\u4ef7\u503c\u548c\u6700\u5927\u4e3a\u591a\u5c11","title":"\u4e00\u3001\u95ee\u9898\u5f15\u51fa"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/#_3","text":"\u73b0\u5728\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u7269\u54c1\u7684\u6289\u62e9\u5c31\u4e0d\u53ea\u662f \u201c\u9009\u201d \u548c \u201c\u4e0d\u9009\u201d \u4e86\uff0c\u56e0\u4e3a\u73b0\u5728\u6bcf\u4e00\u4e2a\u7269\u54c1\u53ef\u4ee5\u9009\u62e9\u65e0\u9650\u6b21\uff0c\u4f46\u662f\u6211\u4eec\u7684\u80cc\u5305\u5bb9\u91cf\u8fd8\u662f\u6709\u9650\u5236\u7684\uff0c\u5047\u8bbe\u8bf4\u4e00\u4e2a\u80cc\u5305\u5168\u88c5\u7b2c \\(i\\) \u4e2a\u7269\u54c1\uff0c\u90a3\u4e48\u6700\u591a\u88c5 \\(K = \\left \\lfloor \\frac{V}{v[i]} \\right \\rfloor\\) \u8fd9\u4e48\u591a\u4e2a\uff0c\u4e8e\u662f\u6211\u4eec\u5c06\u6bcf\u4e00\u4e2a\u7269\u54c1\u7684 \u4e0a\u9650\u6b21\u6570 \u6c42\u51fa\u6765\u4e86 \u90a3\u4e48\u6211\u4eec\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5176\u5b9e\u5c31\u53ef\u4ee5\u5199\u6210\u8fd9\u6837: \\[F[i][j] = max\\{F[i-1][V-k\\times v[i]] + k\\times w[i]\\} \\ (0<=k\\times v[i]<= V)\\]","title":"\u4e8c\u3001\u5206\u6790"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/#21-01","text":"\u6211\u4eec\u5c06\u8fd9 \\(K\\) \u4e2a\u7269\u54c1\u770b\u4f5c\u72ec\u7acb\u7684\u7269\u54c1\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u6bcf\u4e00\u4e2a\u7269\u54c1\u90fd\u8fd9\u6837\u62c6\u5206\u7136\u540e\u518d\u653e\u8fdb\u6211\u4eec\u7684\u6570\u7ec4\u91cc\u9762\uff0c\u6700\u540e\u8dd1\u4e00\u6b2101\u80cc\u5305\u5c31\u80fd\u89e3\u51b3\u6211\u4eec\u8fd9\u4e2a\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u4e86,\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u5982\u4e0b\u4ee3\u7801\uff1a C++ #include <bits/stdc++.h> using namespace std ; const int N = 1000 + 10 , M = N * N ; int v [ M ], w [ M ], n , V ; int f [ N ]; int main () { cin >> n >> V ; int a , b ; int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> a >> b ; for ( int j = 1 , l = V / a ; j <= l ; ++ j ) //\u5c06\u5176\u62c6\u5206\u4e3a\u5355\u4e2a\u7269\u54c1 v [ ++ cnt ] = a , w [ cnt ] = b ; } for ( int i = 1 ; i <= cnt ; ++ i ) for ( int j = V ; j >= v [ i ]; -- j ) f [ j ] = max ( f [ j ], f [ j - v [ i ]] + w [ i ]); cout << f [ V ] << endl ; }","title":"2.1 \u8f6c\u5316\u4e3a01\u80cc\u5305"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/#22","text":"\u4e0a\u9762\u5c06\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u8f6c\u5316\u4e3a\u4e8601\u80cc\u5305\u95ee\u9898\uff0c\u4f46\u662f\u5e26\u6765\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u6bcf\u4e00\u4ef6\u7269\u54c1\u62c6\u5206\u7684\u6b21\u6570\u90fd\u5f88\u591a\uff0c\u5bfc\u81f4\u8d85\u51fa\u4e86\u7a7a\u95f4\u9650\u5236\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u4e0d\u7528\u5c06\u6bcf\u4e00\u4e2a\u7269\u54c1\u76f4\u63a5\u653e\u8fdb\u6211\u4eec\u7684 \\(v[]\\) \u548c \\(w[]\\) \u6570\u7ec4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u72b6\u6001\u8f6c\u79fb\u7684\u65f6\u5019\u7528\u5230\u5c31\u597d\u4e86\uff0c\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u4e2a\u4ee3\u7801\uff1a C++ #include <bits/stdc++.h> using namespace std ; const int N = 1000 + 10 , M = N * N ; int v [ N ], w [ N ], n , V ; int f [ N ]; int main () { cin >> n >> V ; int a , b ; int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> v [ i ] >> w [ i ]; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = V ; j >= v [ i ]; -- j ) for ( int k = 1 , l = V / v [ i ]; k <= l ; ++ k ) if ( j >= v [ i ] * k ) f [ j ] = max ( f [ j ], f [ j - v [ i ] * k ] + w [ i ] * k ); cout << f [ V ] << endl ; } \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e24\u4e2a\u70b9\uff1a 1.\u6211\u4eec\u5faa\u73af\u80cc\u5305\u7684\u5927\u5c0f\u7684\u65f6\u5019\u9700\u8981\u4ece\u540e\u5f80\u524d\u5faa\u73af 2.\u6211\u4eec\u5728 for \u5faa\u73af\u7684\u65f6\u5019 \u80cc\u5305\u7a7a\u95f4 \u7684\u5faa\u73af\u662f\u8981\u653e\u5728 \u6b21\u6570\u679a\u4e3e \u5faa\u73af\u7684\u4e0a\u9762\u7684\uff0c\u5982\u679c\u6211\u4eec\u5c06\u7a7a\u95f4\u679a\u4e3e\u653e\u5728\u6700\u91cc\u5c42\uff0c\u8868\u793a\u7684\u542b\u4e49\u5c31\u662f\u5bf9\u4e8ek\u4e2a\u7269\u54c1\uff0c\u6bcf\u4e00\u4e2a\u53ef\u9009\u53ef\u4e0d\u9009\uff0c\u90a3\u4e48\u6700\u540e\u8986\u76d6\u7684\u8303\u56f4\u5c31\u4f1a\u53d1\u751f\u91cd\u590d\uff0c\u8fd9\u4e00\u70b9\u5176\u5b9e\u53ef\u4ee5\u548c\u4e0b\u9762\u7684\u65f6\u95f4\u4f18\u5316\u505a\u4e00\u4e2a\u5bf9\u6bd4","title":"2.2 \u7a7a\u95f4\u4f18\u5316"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/#23","text":"\u5bf9\u4e8e\u6211\u4eec\u679a\u4e3e\u4e00\u4e2a\u7269\u54c1\u53d6 \\(K\\) \u6b21\u7684\u65f6\u5019\u5176\u5b9e\u662f\u53ef\u4ee5\u901a\u8fc7 \u4e8c\u8fdb\u5236\u4f18\u5316 \u7684\uff0c\u6211\u4eec\u6765\u601d\u8003\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u6709\u4e86 \\(1\u30012\u30014\\) \u4e09\u4f4d\u6570\u6211\u4eec\u5c31\u80fd\u62fc\u51d1\u51fa \\([1,7]\\) \u8303\u56f4\u5185\u6240\u6709\u7684\u6570\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u60f3\u51d1\u51fa \\([1,12]\\) \u8303\u56f4\u5185\u6240\u6709\u7684\u6570\u5462\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u518d\u6761\u4ef6\u4e00\u4e2a\u6570 \\(5\\) \uff0c\u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u524d\u9762\u80fd\u62fc\u51d1\u51fa \\([1,7]\\) \u8303\u56f4\u5185\u7684\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u518d\u6dfb\u52a0\u4e00\u4e2a \\(5\\) \u5c31\u80fd\u6269\u5927\u6211\u4eec\u62fc\u51d1\u7684\u6570\u7684\u8303\u56f4 \\([1,12]\\) \uff0c\u5bf9\u4e8e\u6211\u4eec\u8fd9\u4e2a\u96c6\u5408\u7684\u6bcf\u4e00\u4e2a\u6570\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u6216\u8005\u662f\u4e0d\u9009\u6765\u5b9e\u73b0\u6240\u6709\u6570\u4f4d\u7684\u679a\u4e3e\uff0c\u800c\u8fd9\u5c31\u7c7b\u4f3c\u6211\u4eec\u7684\u4e8c\u8fdb\u5236\u4e00\u6837 0 \u8868\u793a\u7684\u5c31\u662f\u4e0d\u9009\uff0c 1 \u8868\u793a\u7684\u5c31\u662f\u9009\u62e9\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u628ak\u79cd\u7269\u54c1\u7684\u9009\u6cd5\u4ece0\u679a\u4e3e\u5b8c\uff0c\u53ea\u9700\u8981\u5c06\u5176\u4e8c\u8fdb\u5236\u62c6\u5206\u51fa\u6765\u7136\u540e\u4e00\u4e00\u679a\u4e3e\u5373\u53ef\uff0c\u800c\u8fd9\u4e00\u90e8\u5206\u7684\u5185\u5bb9\u5176\u5b9e\u662f\u653e\u5728\u4e86 \u591a\u91cd\u80cc\u5305 \u90e8\u5206\u7684\uff0c\u5173\u4e8e\u5b8c\u5168\u80cc\u5305\u5176\u5b9e\u6709\u66f4\u52a0\u4f18\u79c0\u7684\u4f18\u5316\u65b9\u6cd5\uff0c\u6545\u5728\u6b64\u5c31\u4e0d\u591a\u8d58\u8ff0\u5173\u4e8e\u4e8c\u8fdb\u5236\u4f18\u5316\u7684\u7ec6\u5219\u4e86\uff0c\u5173\u4e8e\u4ee3\u7801\u5927\u5bb6\u53ef\u4ee5\u5148\u81ea\u5df1\u601d\u8003\u4e00\u4e0b\uff0c\u5728\u4e0b\u4e00\u7ae0\u7684\u591a\u91cd\u80cc\u5305\u4f1a\u7ec6\u8c08\u7684","title":"2.3 \u65f6\u95f4\u4f18\u5316"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/#24","text":"\u82e5\u4e24\u4ef6\u7269\u54c1 \\(i\u3001j\\) \u6ee1\u8db3 \\(v_i \u2264 v_j\\) \u4e14 \\(w_i \u2265 w_j\\) \uff0c\u5219\u5c06\u53ef\u4ee5\u5c06\u7269\u54c1 \\(j\\) \u76f4\u63a5\u53bb\u6389\uff0c\u4e0d\u7528\u8003\u8651\u3002 \u8fd9\u4e2a\u4f18\u5316\u7684\u6b63\u786e\u6027\u662f\u663e\u7136\u7684\uff1a\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u53ef\u5c06\u4ef7\u503c\u5c0f\u8d39\u7528\u9ad8\u7684 \\(j\\) \u6362\u6210\u7269\u7f8e\u4ef7\u5ec9\u7684 i\uff0c\u5f97\u5230\u7684\u65b9\u6848\u81f3\u5c11\u4e0d\u4f1a\u66f4\u5dee\u3002\u5bf9\u4e8e\u968f\u673a\u751f\u6210\u7684\u6570\u636e\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5f80\u5f80\u4f1a\u5927\u5927\u51cf\u5c11\u7269\u54c1\u7684 \u4ef6\u6570\uff0c\u4ece\u800c\u52a0\u5feb\u901f\u5ea6\u3002\u7136\u800c\u8fd9\u4e2a\u5e76\u4e0d\u80fd\u6539\u5584\u6700\u574f\u60c5\u51b5\u7684\u590d\u6742\u5ea6\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u7279\u522b\u8bbe\u8ba1\u7684 \u6570\u636e\u53ef\u4ee5\u4e00\u4ef6\u7269\u54c1\u4e5f\u53bb\u4e0d\u6389\u3002 \u9996\u5148\u5c06\u4f53\u79ef\u5927\u4e8e \\(V\\) \u7684\u7269\u54c1\u53bb\u6389\uff0c\u7136\u540e\u4f7f\u7528\u7c7b\u4f3c\u8ba1\u6570\u6392\u5e8f\u7684\u505a\u6cd5\uff0c\u8ba1\u7b97\u51fa\u8d39\u7528\u76f8\u540c\u7684\u7269\u54c1\u4e2d\u4ef7\u503c\u6700\u9ad8\u7684\u662f\u54ea\u4e2a\uff0c\u53ef\u4ee5 \\(O(V + N)\\) \u5730\u5b8c\u6210\u8fd9\u4e2a\u4f18\u5316\u3002 \u4e00\u822c\u6765\u8bf4\u80cc\u5305\u95ee\u9898\u90fd\u4e0d\u4f1a\u5361\u5e38\uff0c\u6545\u4e0a\u8ff0\u4f18\u5316\u4ee3\u7801\u5c31\u4e0d\u7ed9\u51fa\u4ee3\u7801\u4e86\uff0c\u6839\u636e\u5b9e\u9645\u95ee\u9898\u5206\u6790\u5427","title":"2.4 \u5e38\u6570\u4f18\u5316"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/#25","text":"\u5728\u524d\u9762\u7684\u4e8c\u8fdb\u5236\u4f18\u5316\u7684\u5730\u65b9\u6211\u4eec\u8bb2\u4e86\uff0c\u5bf9\u4e8e\u5b8c\u5168\u80cc\u5305\u6709\u7740\u6bd4\u4e8c\u8fdb\u5236\u4f18\u5316\u66f4\u52a0\u597d\u7684\u4e00\u4e2a\u4f18\u5316\uff0c\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u5148\u6765\u770b\u770b\u4e0a\u9762\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[F[i][j] = max\\{F[i-1][V-k\\times v[i]] + k\\times w[i]\\} \\ (0<=k\\times v[i]<= V)\\] \u6211\u4eec\u89c2\u5bdf\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u6211\u4eec\u8981\u5c06\u8fd9\u4e00\u4ef6\u7269\u54c1\u653e\u5165\u6211\u4eec\u7684\u80cc\u5305\u4e2d\u5047\u8bbe\u4e0d\u679a\u4e3e \\(k\\) \u90a3\u5e94\u8be5\u662f\u600e\u6837\u5462\uff1f \u4e0d\u653e\u5165\u7b2c \\(i\\) \u4ef6\u7269\u54c1\uff0c\u5373 \\(f[i][j]=f[i-1][j]\\) \u653e\u5165\u7b2c \\(i\\) \u4ef6\u7269\u54c1\uff0c\u5373 \\(f[i][j] = f[i][j-v[i]]+w[i]\\) \u56e0\u4e3a\u8fd9\u6837\u88c5\u8f7d\u7684\u8bdd\u65b0\u7684\u72b6\u6001\u5c31\u4f1a\u8986\u76d6\u4e45\u7684\u72b6\u6001\uff0c\u4e5f\u5c31\u9020\u6210\u4e86\u5bf9\u4e8e\u4e00\u4e2a\u7269\u54c1\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u65e0\u9650\u6b21\u7684\u60c5\u51b5\uff0c\u800c\u8fd9\u79cd\u6548\u679c\u6b63\u662f\u6211\u4eec\u60f3\u8981\u7684\uff08\u5728\u524d\u9762\u768401\u80cc\u5305\u5904\u6211\u4eec\u4e5f\u8bb2\u8fc7\u4e86\uff09 \u90a3\u4e48\u4e0d\u96be\u5f97\u51fa\u4ee3\u7801\u5982\u4e0b\uff1a C++ #include <bits/stdc++.h> using namespace std ; const int N = 1000 + 10 , M = N * N ; int v [ N ], w [ N ], n , V ; int f [ N ][ N ]; int main () { cin >> n >> V ; int a , b ; for ( int i = 1 ; i <= n ; ++ i ) cin >> v [ i ] >> w [ i ]; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 0 ; j <= V ; ++ j ){ if ( j >= v [ i ]) f [ i ][ j ] = max ( f [ i -1 ][ j ], f [ i ][ j - v [ i ]] + w [ i ]); else f [ i ][ j ] = f [ i -1 ][ j ]; } cout << f [ n ][ V ] << endl ; } \u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u8fd9\u91cc \\(f[i][j]\\) \u7684\u72b6\u6001\u5982\u679c\u5728 \\(j\\) \u6bd4 \\(v[i]\\) \u5c0f\u7684\u65f6\u5019\u5e94\u8be5\u7531\u4e0a\u4e00\u5c42\u76f4\u63a5\u8f6c\u79fb\u8fc7\u6765 \u7136\u540e\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u7b2c\u4e00\u5c42\u72b6\u6001\u6211\u4eec\u53bb\u6389\u4e0d\u4f1a\u5f71\u54cd\u72b6\u6001\u8f6c\u79fb\uff0c\u56e0\u4e3a\u6211\u4eec\u5982\u679c\u662f\u65b0\u4e00\u5c42\u90a3\u4e48\u76f4\u63a5\u5148\u7531\u4e0a\u4e00\u5c42\u8f6c\u79fb\u8fc7\u6765\u5c31\u597d\u4e86\uff0c\u5982\u679c\u8fd8\u662f\u5f53\u524d\u8fd9\u4e00\u5c42\u90a3\u4e48\u4e5f\u76f4\u63a5\u7531 \\(j-v[i]\\) \u7684\u72b6\u6001\u8f6c\u79fb\u8fc7\u6765\u5c31\u597d\uff0c\u603b\u800c\u8a00\u4e4b\u6211\u4eec\u901a\u8fc7\u6eda\u52a8\u4f18\u5316\u53ef\u4ee5\u53bb\u6389\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ #include <bits/stdc++.h> using namespace std ; const int N = 1000 + 10 , M = N * N ; int v [ N ], w [ N ], n , V ; int f [ N ]; int main () { cin >> n >> V ; int a , b ; for ( int i = 1 ; i <= n ; ++ i ) cin >> v [ i ] >> w [ i ]; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = v [ i ]; j <= V ; ++ j ) f [ j ] = max ( f [ j ], f [ j - v [ i ]] + w [ i ]); cout << f [ V ] << endl ; } \u73b0\u5728\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86 \\(O(NV)\\) ,\u800c\u7a7a\u95f4\u590d\u6742\u5ea6\u53d8\u6210\u4e86 \\(O(V)\\)","title":"2.5 \u6700\u4f18\u4f18\u5316"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/#26","text":"\u81f3\u6b64\u6211\u4eec\u7684\u5b8c\u5168\u80cc\u5305\u5185\u5bb9\u5927\u6982\u5982\u4e0a\uff0c\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u4e5f\u662f\u4e00\u4e2a\u76f8\u5f53\u57fa\u7840\u7684\u80cc\u5305\u95ee\u9898\uff0c\u5b83\u6709\u4e24\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u3002\u5e0c\u671b\u8bfb\u8005\u80fd\u591f\u5bf9\u8fd9\u4e24\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u90fd\u4ed4\u7ec6\u5730\u4f53\u4f1a\uff0c\u4e0d\u4ec5\u8bb0\u4f4f\uff0c\u4e5f\u8981\u5f04\u660e\u767d\u5b83\u4eec\u662f\u600e\u4e48\u5f97\u51fa\u6765\u7684\uff0c\u6700\u597d\u80fd\u591f\u81ea\u5df1\u60f3\u4e00\u79cd\u5f97\u5230\u8fd9\u4e9b\u65b9\u7a0b\u7684\u65b9\u6cd5\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u6bcf\u4e00\u9053\u52a8\u6001\u89c4\u5212\u9898\u76ee\u90fd\u601d\u8003\u5176\u65b9\u7a0b\u7684\u610f\u4e49\u4ee5\u53ca\u5982\u4f55\u5f97\u6765\uff0c\u662f\u52a0\u6df1\u5bf9\u52a8\u6001\u89c4\u5212\u7684\u7406\u89e3\u3001\u63d0\u9ad8\u52a8\u6001\u89c4\u5212\u529f\u529b\u7684\u597d\u65b9\u6cd5\u3002","title":"2.6 \u5c0f\u7ed3"},{"location":"%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/#_4","text":"\u591a\u52a0\u7ec3\u4e60\u80fd\u591f\u66f4\u5feb\u7684\u638c\u63e1\u5b8c\u5168\u80cc\u5305\u7684\u7cbe\u9ad3\uff0c\u6545\u9644\u4e0a\u9898\u5355\uff1a \u9898\u76ee \u94fe\u63a5 \u9898\u89e3 \u75af\u72c2\u7684\u91c7\u836f https://www.luogu.com.cn/problem/P1616 [USACO3.1]Score Inflation https://www.luogu.com.cn/problem/P2722 \u795e\u5947\u7684\u56db\u6b21\u65b9\u6570 https://www.luogu.com.cn/problem/P1679 A+B Problem\uff08\u518d\u5347\u7ea7\uff09 https://www.luogu.com.cn/problem/P1832 \u6295\u8d44\u7684\u6700\u5927\u6548\u76ca https://www.luogu.com.cn/problem/P1853 Cut Ribbon https://www.luogu.com.cn/problem/CF189A Elimination https://www.luogu.com.cn/problem/CF417A [USACO08NOV]Buying Hay S https://www.luogu.com.cn/problem/P2918 [CSP-J2019] \u7eaa\u5ff5\u54c1 https://www.luogu.com.cn/problem/P5662 [NOIP2018 \u63d0\u9ad8\u7ec4] \u8d27\u5e01\u7cfb\u7edf https://www.luogu.com.cn/problem/P5020 \u6574\u6570\u5212\u5206 https://www.acwing.com/problem/content/description/902/ https://acmer.blog.csdn.net/article/details/123052271","title":"\u4e09\u3001\u9898\u5355"},{"location":"%E5%9B%BE%E8%AE%BA/DFS%E5%92%8CBFS/","text":"DFS\u548cBFS \u00b6 \u4e00\u3001\u914d\u5957\u89c6\u9891 \u00b6 https://www.bilibili.com/video/BV1RD4y1F7Fq \u4e8c\u3001DFS\uff08\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff09 \u00b6 2.1\u95ee\u9898\u5f15\u51fa \u00b6 \u6211\u4eec\u60f3\u77e5\u9053\u5728\u4e00\u4e2a\u8ff7\u5bab\u91cc\u9762\u662f\u5426\u6709\u4e00\u4e2a\u8def\u7ebf\u80fd\u8ba9\u6211\u4eec\u4ece\u8d77\u70b9\u8d70\u5230\u7ec8\u70b9\uff0c\u65e0\u8bba\u6539\u8def\u5f84\u662f\u5426\u662f\u6700\u4f18\u7684 \u4f8b\u9898\uff1a http://acm.mangata.ltd/p/E427 2.2\u601d\u8def \u00b6 \u7531\u4e8e\u6211\u4eec\u53ea\u60f3\u77e5\u9053\u8fd9\u4e2a\u8ff7\u5bab\u6709\u6ca1\u6709\u89e3\uff0c\u6240\u4ee5\u6211\u4eec\u671f\u671b\u80fd\u591f\u4e00\u6761\u8def\u5c31\u8d70\u5230\u7ec8\u70b9\uff0c\u7136\u540e\u4fdd\u5b58\u8fd9\u4e2a\u4fe1\u606f\uff0c\u4f46\u662f\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6211\u4eec\u5f88\u53ef\u80fd\u5c31\u8d70\u5230\u4e86\u4e00\u4e2a\u6b7b\u8def\uff0c\u6b63\u5e38\u7684\u601d\u7ef4\u4f1a\u600e\u4e48\u60f3\u5462\uff1f\u9000\u56de\u6765\uff0c\u4e00\u53ea\u9000\u56de\u5230\u6709\u6ca1\u8d70\u8fc7\u7684\u5c94\u8def\u53e3\uff0c\u7136\u540e\u8d70\u5411\u53e6\u4e00\u4e2a\u65b9\u5411\uff0c\u7136\u540e\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u76f4\u5230\u627e\u5230\u4e86\u7ec8\u70b9\uff0c\u6216\u8005\u8bf4\u6240\u6709\u7684\u70b9\u90fd\u8d70\u8fc7\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9000\u51fa\uff0c\u8fd9\u5c31\u662f\u6df1\u5ea6\u4f18\u5148\u7684\u601d\u60f3\u3002 2.3\u91cd\u70b9 \u00b6 \u91cd\u70b9\u7406\u89e3\u4e00\u4e0b\u8fd9\u4e2a\u9012\u5f52\u7684\u8fc7\u7a0b\uff0c\u9012\u7684\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u5f80\u4e0b\u4e00\u4e2a\u5730\u65b9\u8d70\uff0c\u5f52\u7684\u8fc7\u7a0b\u5c31\u662f\u8d70\u5230\u6b7b\u80e1\u540c\u4e86\uff0c\u6211\u4eec\u8981\u8fd4\u56de\u5230\u5c94\u8def\u53e3\u3002\u8fd9\u91cc\u5f52\u7684\u8fc7\u7a0b\u4e5f\u5c31\u662f**\u56de\u6eaf**\uff0c\u56de\u6eaf\u7684\u72b6\u6001\u662f\u975e\u5e38\u5173\u952e\u7684\uff0c\u6709\u7684\u65f6\u5019\u6211\u4eec\u8981\u5229\u7528\u56de\u6eaf\u8fd9\u4e2a\u8fc7\u7a0b\u8bb0\u5f55\u4e00\u4e9b\u4fe1\u606f\uff0c\u6bd4\u5982**\u8def\u5f84**\u3001**\u6743\u503c\u548c**\u7b49\uff0c\u6240\u4ee5DFS\u4e0d\u4ec5\u80fd\u8fd0\u7528\u5230\u8def\u5f84\u7684\u641c\u7d22\uff0c\u5728\u5f88\u591a\u5730\u65b9\u90fd\u80fd\u7528\u5230 2.4\u5b9e\u73b0\u7684\u65b9\u5f0f \u00b6 \u5b9e\u73b0\u7684\u65b9\u5f0f\u4e5f\u5c31\u662f\u901a\u8fc7\u9012\u5f52\u5b9e\u73b0\uff0c\u4e0d\u65ad\u5411\u4e0b\u63a2\u7d22\uff0c\u7136\u540e\u9047\u5230\u6b7b\u80e1\u540c\u5c31\u5f52\u4e0a\u6765 \u7ed9\u51fa\u4e00\u4e2a\u6a21\u677f\uff1a C++ void dfs ( int x , int y ){ //x\u3001y\u8868\u793a\u7684\u662f\u5750\u6807\u70b9\u7684\u4f4d\u7f6e if ( vis [ x ][ y ]) return ; //\u8fd9\u4e2a\u8868\u793a\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86 vis [ x ][ y ] = true ; //\u5982\u679c\u6ca1\u6709\u8bbf\u95ee\u8fc7\uff0c\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u8bbf\u95ee\u8fc7\u4e86 ans ++ ; for ( int i = 0 ; i < 4 ; ++ i ) { //\u8fd9\u91cc\u5c31\u662f\u5f80\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u904d\u5386 int nx = x + dx [ i ]; int ny = y + dy [ i ]; if ( ! vis [ nx ][ ny ] && nx > 0 && nx <= H && ny > 0 && ny <= W && mp [ nx ][ ny ] != '#' ) { //\u6211\u4eec\u8fd9\u91cc\u5c31\u662f\u770b\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u662f\u5426\u80fd\u9012\u5f52\u8bbf\u95ee dfs ( nx , ny ); } } } \u4e09\u3001BFS\uff08\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09 \u00b6 3.1\u95ee\u9898\u5f15\u51fa \u00b6 \u6211\u4eec\u60f3\u77e5\u9053\u5728\u4e00\u4e2a\u8ff7\u5bab\u91cc\u9762\u662f\u5426\u6709\u4e00\u4e2a\u8def\u7ebf\u80fd\u8ba9\u6211\u4eec\u4ece\u8d77\u70b9\u8d70\u5230\u7ec8\u70b9\uff0c\u5e76\u4e14\u8def\u7ebf\u662f\u6700\u4f18\u7684\uff0c\u7136\u540e\u8f93\u51fa\u6700\u4f18\u8def\u5f84\u7684\u957f\u5ea6 \u4f8b\u9898\uff1a http://acm.mangata.ltd/p/E427 3.2\u601d\u8def \u00b6 \u7531\u4e8e\u6211\u4eec\u73b0\u5728\u7684\u8fd9\u4e2a\u95ee\u9898\u8f6c\u53d8\u4e3a\u4e86\u6700\u4f18\u8def\u5f84\u6c42\u89e3\uff0c\u6240\u4ee5\u6211\u4eec\u7ecf\u91cf\u5c31\u4e0d\u8981\u4f7f\u7528DFS\uff08\u56e0\u4e3a\u9012\u5f52\u7684\u8fc7\u7a0b\u5f88\u8017\u65f6\u95f4\uff09\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981BFS\uff08\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09\uff0c\u4ec0\u4e48\u610f\u601d\u5462\uff0c\u6211\u4eec\u5c3d\u53ef\u80fd\u5730\u627e\u5230\u9760\u8fd1\u6211\u4eec\u5f53\u524d\u8fd9\u4e2a\u70b9\u7684\u5468\u56f4\u7684\u70b9\u3002\u7136\u540e\u5c06\u8fd9\u4e2a\u5468\u56f4\u7684\u70b9\u52a0\u5165\u6211\u4eec\u5373\u5c06\u63a2\u5bfb\u7684\u8fd9\u4e2a**\u961f\u5217**\u91cc\u9762\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5927\u6982\u5c31\u662f\u4e00\u5c42\u4e00\u5c42\u7684\u53bb\u8bbf\u95ee\u8fd9\u4e9b\u53ef\u884c\u7684\u70b9\uff0c\u8fd9\u4e5f\u5c31\u662f\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3002 1.\u6211\u4eec\u5148\u5c06\u8d77\u70b9\u653e\u8fdb\u961f\u5217\uff0c\u7136\u540e\u9010\u6b65\u53bb\u627e\u8d77\u70b9\u5468\u56f4\u7684\u70b9\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u5468\u56f4\u7684\u70b9\u4e5f\u653e\u8fdb\u961f\u5217\uff0c\u7136\u540e\u5c06\u8d77\u70b9\u79fb\u51fa\u961f\u9996\u3002 2.\u6211\u4eec\u518d\u53d6\u51fa\u5f53\u524d\u961f\u9996\u7684\u70b9\uff0c\u7136\u540e\u91cd\u590d\u4e0a\u9762\u7684\u8fc7\u7a0b\uff0c\u76f4\u5230\u53d6\u51fa\u7684\u70b9\u662f\u7ec8\u70b9\u3002 3.3\u91cd\u70b9 \u00b6 \u91cd\u70b9\u5c31\u662f\u8fd9\u4e2a\u5165\u961f\u7684\u8fc7\u7a0b\u7684\u7406\u89e3\uff0c\u4f60\u8981\u77e5\u9053\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u5de5\u4f5c\u65b9\u5f0f\u662f\u4f18\u5148\u5c06**\u9760\u8fd1\u5f53\u524d\u70b9\u7684\u5468\u56f4\u7684\u70b9\u653e\u8fdb\u961f\u5217**\uff0c\u7136\u540e\u9010\u6b65\u53bb\u8bbf\u95ee\u64cd\u4f5c\uff0c\u5728\u540e\u7eed\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u601d\u7ef4\u53bb\u4f18\u5316SPFA\u7b97\u6cd5\u4ee5\u53ca\u4f18\u5316\u3002 3.4\u5b9e\u73b0\u65b9\u5f0f \u00b6 \u5b9e\u73b0\u65b9\u5f0f\u4e5f\u5c31\u662f\u961f\u5217\u7684\u5e94\u7528\uff0c\u4e3b\u8981\u7406\u89e3\u7684\u8fd9\u4e2a\u601d\u8def\u662f**\u5e7f\u5ea6\u4f18\u5148** C++ int dx [ 4 ] = { 0 , 0 , -1 , 1 }; int dy [ 4 ] = { 1 , -1 , 0 , 0 }; int bfs ( int sx , int sy ){ int cnt = 0 ; q . push ( node { sx , sy , 0 }); //\u538b\u5165\u961f\u5217 while ( ! q . empty ()){ //\u961f\u5217\u4e0d\u4e3a\u7a7a node p = q . top (); //\u53d6\u51fa\u961f\u5217\u7b2c\u4e00\u4e2a\u5143\u7d20 q . pop (); //\u5f39\u51fa if ( p . x == ex , p . y == ey ){ //\u627e\u5230\u7ec8\u70b9\u7136\u540e\u76f4\u63a5\u8fd4\u56de\u8def\u5f84\u7684\u957f\u5ea6 return p . k ; } if ( vis [ p . x ][ p . y ]) continue ; //\u5df2\u53bb\u8fc7\u5c31\u4e0d\u53bb\u4e86 vis [ p . x ][ p . y ] = true ; //\u6807\u8bb0\u5df2\u53bb\u8fc7 for ( int i = 0 ; i < 4 ; ++ i ){ int nx = x + dx [ i ]; int ny = y + dy [ i ]; if ( check ( nx , ny )){ que . push ( node { nx , ny , p . k + 1 }); } } } return -1 ; //\u6ca1\u6709\u8def\u5f84\u7684 } \u56db\u3001\u603b\u7ed3\u4e24\u79cd\u65b9\u5f0f \u00b6 4.1\u7ef4\u62a4\u65b9\u5f0f \u00b6 DFS\u7528\u9012\u5f52\u7684\u5f62\u5f0f\uff0c\u7528\u5230\u4e86\u6808\u7ed3\u6784\uff0c\u5148\u8fdb\u540e\u51fa\u3002 BFS\u9009\u53d6\u72b6\u6001\u7528\u961f\u5217\u7684\u5f62\u5f0f\uff0c\u5148\u8fdb\u5148\u51fa\u3002 4.2\u590d\u6742\u5ea6 \u00b6 DFS\u7684\u590d\u6742\u5ea6\u4e0eBFS\u7684\u590d\u6742\u5ea6\u5927\u4f53\u4e00\u81f4\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u904d\u5386\u7684\u65b9\u5f0f\u4e0e\u5bf9\u4e8e\u95ee\u9898\u7684\u89e3\u51b3\u51fa\u53d1\u70b9\u4e0d\u540c\uff0cDFS\u9002\u5408\u76ee\u6807\u660e\u786e\uff0c\u800cBFS\u9002\u5408\u5927\u8303\u56f4\u7684\u5bfb\u627e\u3002 4.3\u601d\u60f3 \u00b6 \u601d\u60f3\u4e0a\u6765\u8bf4\u8fd9\u4e24\u79cd\u65b9\u6cd5\u90fd\u662f\u7a77\u7aed\u5217\u4e3e\u6240\u6709\u7684\u60c5\u51b5\u3002\u4f46\u662f\u4e0d\u540c\u7684\u662f\uff0cDFS\u53ef\u4ee5\u901a\u8fc7\u526a\u679d\u7b49\u64cd\u4f5c\u4f18\u5316\uff0c\u800cBFS\u5fc5\u987b\u7a77\u4e3e\u51fa\u6240\u6709\u60c5\u51b5","title":"DFS\u548cBFS"},{"location":"%E5%9B%BE%E8%AE%BA/DFS%E5%92%8CBFS/#dfsbfs","text":"","title":"DFS\u548cBFS"},{"location":"%E5%9B%BE%E8%AE%BA/DFS%E5%92%8CBFS/#_1","text":"https://www.bilibili.com/video/BV1RD4y1F7Fq","title":"\u4e00\u3001\u914d\u5957\u89c6\u9891"},{"location":"%E5%9B%BE%E8%AE%BA/DFS%E5%92%8CBFS/#dfs","text":"","title":"\u4e8c\u3001DFS\uff08\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff09"},{"location":"%E5%9B%BE%E8%AE%BA/DFS%E5%92%8CBFS/#21","text":"\u6211\u4eec\u60f3\u77e5\u9053\u5728\u4e00\u4e2a\u8ff7\u5bab\u91cc\u9762\u662f\u5426\u6709\u4e00\u4e2a\u8def\u7ebf\u80fd\u8ba9\u6211\u4eec\u4ece\u8d77\u70b9\u8d70\u5230\u7ec8\u70b9\uff0c\u65e0\u8bba\u6539\u8def\u5f84\u662f\u5426\u662f\u6700\u4f18\u7684 \u4f8b\u9898\uff1a http://acm.mangata.ltd/p/E427","title":"2.1\u95ee\u9898\u5f15\u51fa"},{"location":"%E5%9B%BE%E8%AE%BA/DFS%E5%92%8CBFS/#22","text":"\u7531\u4e8e\u6211\u4eec\u53ea\u60f3\u77e5\u9053\u8fd9\u4e2a\u8ff7\u5bab\u6709\u6ca1\u6709\u89e3\uff0c\u6240\u4ee5\u6211\u4eec\u671f\u671b\u80fd\u591f\u4e00\u6761\u8def\u5c31\u8d70\u5230\u7ec8\u70b9\uff0c\u7136\u540e\u4fdd\u5b58\u8fd9\u4e2a\u4fe1\u606f\uff0c\u4f46\u662f\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6211\u4eec\u5f88\u53ef\u80fd\u5c31\u8d70\u5230\u4e86\u4e00\u4e2a\u6b7b\u8def\uff0c\u6b63\u5e38\u7684\u601d\u7ef4\u4f1a\u600e\u4e48\u60f3\u5462\uff1f\u9000\u56de\u6765\uff0c\u4e00\u53ea\u9000\u56de\u5230\u6709\u6ca1\u8d70\u8fc7\u7684\u5c94\u8def\u53e3\uff0c\u7136\u540e\u8d70\u5411\u53e6\u4e00\u4e2a\u65b9\u5411\uff0c\u7136\u540e\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u76f4\u5230\u627e\u5230\u4e86\u7ec8\u70b9\uff0c\u6216\u8005\u8bf4\u6240\u6709\u7684\u70b9\u90fd\u8d70\u8fc7\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9000\u51fa\uff0c\u8fd9\u5c31\u662f\u6df1\u5ea6\u4f18\u5148\u7684\u601d\u60f3\u3002","title":"2.2\u601d\u8def"},{"location":"%E5%9B%BE%E8%AE%BA/DFS%E5%92%8CBFS/#23","text":"\u91cd\u70b9\u7406\u89e3\u4e00\u4e0b\u8fd9\u4e2a\u9012\u5f52\u7684\u8fc7\u7a0b\uff0c\u9012\u7684\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u5f80\u4e0b\u4e00\u4e2a\u5730\u65b9\u8d70\uff0c\u5f52\u7684\u8fc7\u7a0b\u5c31\u662f\u8d70\u5230\u6b7b\u80e1\u540c\u4e86\uff0c\u6211\u4eec\u8981\u8fd4\u56de\u5230\u5c94\u8def\u53e3\u3002\u8fd9\u91cc\u5f52\u7684\u8fc7\u7a0b\u4e5f\u5c31\u662f**\u56de\u6eaf**\uff0c\u56de\u6eaf\u7684\u72b6\u6001\u662f\u975e\u5e38\u5173\u952e\u7684\uff0c\u6709\u7684\u65f6\u5019\u6211\u4eec\u8981\u5229\u7528\u56de\u6eaf\u8fd9\u4e2a\u8fc7\u7a0b\u8bb0\u5f55\u4e00\u4e9b\u4fe1\u606f\uff0c\u6bd4\u5982**\u8def\u5f84**\u3001**\u6743\u503c\u548c**\u7b49\uff0c\u6240\u4ee5DFS\u4e0d\u4ec5\u80fd\u8fd0\u7528\u5230\u8def\u5f84\u7684\u641c\u7d22\uff0c\u5728\u5f88\u591a\u5730\u65b9\u90fd\u80fd\u7528\u5230","title":"2.3\u91cd\u70b9"},{"location":"%E5%9B%BE%E8%AE%BA/DFS%E5%92%8CBFS/#24","text":"\u5b9e\u73b0\u7684\u65b9\u5f0f\u4e5f\u5c31\u662f\u901a\u8fc7\u9012\u5f52\u5b9e\u73b0\uff0c\u4e0d\u65ad\u5411\u4e0b\u63a2\u7d22\uff0c\u7136\u540e\u9047\u5230\u6b7b\u80e1\u540c\u5c31\u5f52\u4e0a\u6765 \u7ed9\u51fa\u4e00\u4e2a\u6a21\u677f\uff1a C++ void dfs ( int x , int y ){ //x\u3001y\u8868\u793a\u7684\u662f\u5750\u6807\u70b9\u7684\u4f4d\u7f6e if ( vis [ x ][ y ]) return ; //\u8fd9\u4e2a\u8868\u793a\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86 vis [ x ][ y ] = true ; //\u5982\u679c\u6ca1\u6709\u8bbf\u95ee\u8fc7\uff0c\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u8bbf\u95ee\u8fc7\u4e86 ans ++ ; for ( int i = 0 ; i < 4 ; ++ i ) { //\u8fd9\u91cc\u5c31\u662f\u5f80\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u904d\u5386 int nx = x + dx [ i ]; int ny = y + dy [ i ]; if ( ! vis [ nx ][ ny ] && nx > 0 && nx <= H && ny > 0 && ny <= W && mp [ nx ][ ny ] != '#' ) { //\u6211\u4eec\u8fd9\u91cc\u5c31\u662f\u770b\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u662f\u5426\u80fd\u9012\u5f52\u8bbf\u95ee dfs ( nx , ny ); } } }","title":"2.4\u5b9e\u73b0\u7684\u65b9\u5f0f"},{"location":"%E5%9B%BE%E8%AE%BA/DFS%E5%92%8CBFS/#bfs","text":"","title":"\u4e09\u3001BFS\uff08\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09"},{"location":"%E5%9B%BE%E8%AE%BA/DFS%E5%92%8CBFS/#31","text":"\u6211\u4eec\u60f3\u77e5\u9053\u5728\u4e00\u4e2a\u8ff7\u5bab\u91cc\u9762\u662f\u5426\u6709\u4e00\u4e2a\u8def\u7ebf\u80fd\u8ba9\u6211\u4eec\u4ece\u8d77\u70b9\u8d70\u5230\u7ec8\u70b9\uff0c\u5e76\u4e14\u8def\u7ebf\u662f\u6700\u4f18\u7684\uff0c\u7136\u540e\u8f93\u51fa\u6700\u4f18\u8def\u5f84\u7684\u957f\u5ea6 \u4f8b\u9898\uff1a http://acm.mangata.ltd/p/E427","title":"3.1\u95ee\u9898\u5f15\u51fa"},{"location":"%E5%9B%BE%E8%AE%BA/DFS%E5%92%8CBFS/#32","text":"\u7531\u4e8e\u6211\u4eec\u73b0\u5728\u7684\u8fd9\u4e2a\u95ee\u9898\u8f6c\u53d8\u4e3a\u4e86\u6700\u4f18\u8def\u5f84\u6c42\u89e3\uff0c\u6240\u4ee5\u6211\u4eec\u7ecf\u91cf\u5c31\u4e0d\u8981\u4f7f\u7528DFS\uff08\u56e0\u4e3a\u9012\u5f52\u7684\u8fc7\u7a0b\u5f88\u8017\u65f6\u95f4\uff09\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981BFS\uff08\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09\uff0c\u4ec0\u4e48\u610f\u601d\u5462\uff0c\u6211\u4eec\u5c3d\u53ef\u80fd\u5730\u627e\u5230\u9760\u8fd1\u6211\u4eec\u5f53\u524d\u8fd9\u4e2a\u70b9\u7684\u5468\u56f4\u7684\u70b9\u3002\u7136\u540e\u5c06\u8fd9\u4e2a\u5468\u56f4\u7684\u70b9\u52a0\u5165\u6211\u4eec\u5373\u5c06\u63a2\u5bfb\u7684\u8fd9\u4e2a**\u961f\u5217**\u91cc\u9762\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5927\u6982\u5c31\u662f\u4e00\u5c42\u4e00\u5c42\u7684\u53bb\u8bbf\u95ee\u8fd9\u4e9b\u53ef\u884c\u7684\u70b9\uff0c\u8fd9\u4e5f\u5c31\u662f\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3002 1.\u6211\u4eec\u5148\u5c06\u8d77\u70b9\u653e\u8fdb\u961f\u5217\uff0c\u7136\u540e\u9010\u6b65\u53bb\u627e\u8d77\u70b9\u5468\u56f4\u7684\u70b9\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u5468\u56f4\u7684\u70b9\u4e5f\u653e\u8fdb\u961f\u5217\uff0c\u7136\u540e\u5c06\u8d77\u70b9\u79fb\u51fa\u961f\u9996\u3002 2.\u6211\u4eec\u518d\u53d6\u51fa\u5f53\u524d\u961f\u9996\u7684\u70b9\uff0c\u7136\u540e\u91cd\u590d\u4e0a\u9762\u7684\u8fc7\u7a0b\uff0c\u76f4\u5230\u53d6\u51fa\u7684\u70b9\u662f\u7ec8\u70b9\u3002","title":"3.2\u601d\u8def"},{"location":"%E5%9B%BE%E8%AE%BA/DFS%E5%92%8CBFS/#33","text":"\u91cd\u70b9\u5c31\u662f\u8fd9\u4e2a\u5165\u961f\u7684\u8fc7\u7a0b\u7684\u7406\u89e3\uff0c\u4f60\u8981\u77e5\u9053\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u5de5\u4f5c\u65b9\u5f0f\u662f\u4f18\u5148\u5c06**\u9760\u8fd1\u5f53\u524d\u70b9\u7684\u5468\u56f4\u7684\u70b9\u653e\u8fdb\u961f\u5217**\uff0c\u7136\u540e\u9010\u6b65\u53bb\u8bbf\u95ee\u64cd\u4f5c\uff0c\u5728\u540e\u7eed\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u601d\u7ef4\u53bb\u4f18\u5316SPFA\u7b97\u6cd5\u4ee5\u53ca\u4f18\u5316\u3002","title":"3.3\u91cd\u70b9"},{"location":"%E5%9B%BE%E8%AE%BA/DFS%E5%92%8CBFS/#34","text":"\u5b9e\u73b0\u65b9\u5f0f\u4e5f\u5c31\u662f\u961f\u5217\u7684\u5e94\u7528\uff0c\u4e3b\u8981\u7406\u89e3\u7684\u8fd9\u4e2a\u601d\u8def\u662f**\u5e7f\u5ea6\u4f18\u5148** C++ int dx [ 4 ] = { 0 , 0 , -1 , 1 }; int dy [ 4 ] = { 1 , -1 , 0 , 0 }; int bfs ( int sx , int sy ){ int cnt = 0 ; q . push ( node { sx , sy , 0 }); //\u538b\u5165\u961f\u5217 while ( ! q . empty ()){ //\u961f\u5217\u4e0d\u4e3a\u7a7a node p = q . top (); //\u53d6\u51fa\u961f\u5217\u7b2c\u4e00\u4e2a\u5143\u7d20 q . pop (); //\u5f39\u51fa if ( p . x == ex , p . y == ey ){ //\u627e\u5230\u7ec8\u70b9\u7136\u540e\u76f4\u63a5\u8fd4\u56de\u8def\u5f84\u7684\u957f\u5ea6 return p . k ; } if ( vis [ p . x ][ p . y ]) continue ; //\u5df2\u53bb\u8fc7\u5c31\u4e0d\u53bb\u4e86 vis [ p . x ][ p . y ] = true ; //\u6807\u8bb0\u5df2\u53bb\u8fc7 for ( int i = 0 ; i < 4 ; ++ i ){ int nx = x + dx [ i ]; int ny = y + dy [ i ]; if ( check ( nx , ny )){ que . push ( node { nx , ny , p . k + 1 }); } } } return -1 ; //\u6ca1\u6709\u8def\u5f84\u7684 }","title":"3.4\u5b9e\u73b0\u65b9\u5f0f"},{"location":"%E5%9B%BE%E8%AE%BA/DFS%E5%92%8CBFS/#_2","text":"","title":"\u56db\u3001\u603b\u7ed3\u4e24\u79cd\u65b9\u5f0f"},{"location":"%E5%9B%BE%E8%AE%BA/DFS%E5%92%8CBFS/#41","text":"DFS\u7528\u9012\u5f52\u7684\u5f62\u5f0f\uff0c\u7528\u5230\u4e86\u6808\u7ed3\u6784\uff0c\u5148\u8fdb\u540e\u51fa\u3002 BFS\u9009\u53d6\u72b6\u6001\u7528\u961f\u5217\u7684\u5f62\u5f0f\uff0c\u5148\u8fdb\u5148\u51fa\u3002","title":"4.1\u7ef4\u62a4\u65b9\u5f0f"},{"location":"%E5%9B%BE%E8%AE%BA/DFS%E5%92%8CBFS/#42","text":"DFS\u7684\u590d\u6742\u5ea6\u4e0eBFS\u7684\u590d\u6742\u5ea6\u5927\u4f53\u4e00\u81f4\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u904d\u5386\u7684\u65b9\u5f0f\u4e0e\u5bf9\u4e8e\u95ee\u9898\u7684\u89e3\u51b3\u51fa\u53d1\u70b9\u4e0d\u540c\uff0cDFS\u9002\u5408\u76ee\u6807\u660e\u786e\uff0c\u800cBFS\u9002\u5408\u5927\u8303\u56f4\u7684\u5bfb\u627e\u3002","title":"4.2\u590d\u6742\u5ea6"},{"location":"%E5%9B%BE%E8%AE%BA/DFS%E5%92%8CBFS/#43","text":"\u601d\u60f3\u4e0a\u6765\u8bf4\u8fd9\u4e24\u79cd\u65b9\u6cd5\u90fd\u662f\u7a77\u7aed\u5217\u4e3e\u6240\u6709\u7684\u60c5\u51b5\u3002\u4f46\u662f\u4e0d\u540c\u7684\u662f\uff0cDFS\u53ef\u4ee5\u901a\u8fc7\u526a\u679d\u7b49\u64cd\u4f5c\u4f18\u5316\uff0c\u800cBFS\u5fc5\u987b\u7a77\u4e3e\u51fa\u6240\u6709\u60c5\u51b5","title":"4.3\u601d\u60f3"},{"location":"%E5%9B%BE%E8%AE%BA/%E5%BB%BA%E5%9B%BE%E5%9F%BA%E7%A1%80/","text":"\u5efa\u56fe\u57fa\u7840 \u00b6 \u4e00\u3001\u524d\u8a00 \u00b6 1.1\u914d\u5957\u89c6\u9891 \u00b6 https://www.bilibili.com/video/BV1RD4y1F7Fq 1.2 \u57fa\u7840\u8bf4\u660e \u00b6 \u56fe\u4e00\u822c\u5b9a\u4e49\u4e3a \u4e8c\u5143\u96c6 \uff1b \u7531 \u9876\u70b9\u96c6 \u4e0e \u8fb9\u96c6 \u6784\u6210\u3002 \u6216\u8005\u66f4\u62bd\u8c61\u7684\u8bf4\uff0c\u7531\u4e00\u4e2a\u96c6\u5408(\u9876\u70b9)\uff0c\u548c\u96c6\u5408\u4e0a\u7684\u5173\u7cfb\uff08\u8fb9\uff09\u6784\u6210 \u4e8c\u3001\u56fe\u7684\u57fa\u672c\u6982\u5ff5\u540d\u8bcd \u00b6 \u90bb\u63a5\u77e9\u9635 \u90bb\u63a5\u8868 \u5ea6\uff0c\u51fa\u5ea6\uff0c\u5165\u5ea6 \u5728\u6709\u5411\u56fe\u4e2d\uff0c\u7bad\u5934\u662f\u5177\u6709\u65b9\u5411\u7684\uff0c\u4ece\u4e00\u4e2a\u9876\u70b9\u6307\u5411\u53e6\u4e00\u4e2a\u9876\u70b9\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u6bcf\u4e2a\u9876\u70b9 \u88ab\u6307\u5411 \u7684\u7bad\u5934\u4e2a\u6570\uff0c\u5c31\u662f\u5b83\u7684\u5165\u5ea6\u3002\u4ece\u8fd9\u4e2a\u9876\u70b9\u6307\u51fa\u53bb\u7684\u7bad\u5934\u4e2a\u6570\uff0c\u5c31\u662f\u5b83\u7684\u51fa\u5ea6 \u6709\u5411\u8fb9\uff0c\u65e0\u5411\u8fb9\uff0c\u91cd\u8fb9\u3002 \u73af\uff0c\u81ea\u73af\u3002 \u95ed\u5305\u7b49 2.1\u6709\u5411\u56fe\u548c\u65e0\u5411\u56fe \u00b6 \u6709\u5411\u56fe\u5c31\u662f\u8fb9\u5728\u8868\u793a\u7684\u65f6\u5019\u6709\u4e00\u4e2a \u5355\u5411\u6027 \uff0c\u65e0\u5411\u56fe\u5c31\u662f\u5728\u8fb9\u8868\u793a\u7684\u65f6\u5019\u6709\u4e00\u4e2a \u53cc\u5411\u6027 \uff0c\u8fd9\u4e00\u70b9\u5728\u6211\u4eec\u5efa\u56fe\u7684\u65f6\u5019\u4e5f\u80fd\u63d0\u73b0\u5230 \u4e09\u3001\u90bb\u63a5\u77e9\u9635\uff08\u7a20\u5bc6\u56fe\uff09 \u00b6 \u6211\u4eec\u7528\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\u6765\u8868\u793a\u8fd9\u4e2a\u56fe\uff0c\u4e8c\u7ef4\u77e9\u9635\u7684\u4e24\u4e2a\u7ef4\u5ea6\u5c31\u5206\u522b\u5bf9\u5e94\u7740\u8d77\u70b9\uff0c\u548c\u7ec8\u70b9\uff0c\u6211\u4eec\u4e60\u60ef\u628a\u7b2c\u4e8c\u7ef4\u5ea6\u7684\u4f5c\u4e3a\u8d77\u70b9\uff0c\u7b2c\u4e00\u7ef4\u5ea6\u7684\u4f5c\u4e3a\u7ec8\u70b9 \u90a3\u4e48\u5bf9\u4e8e\u6709\u5411\u56fe\u6765\u8bf4\u6211\u4eec\u53ea\u7528\u4e0d\u65ad\u5730\u7ef4\u62a4\u9876\u70b9\u5730\u5173\u7cfb\u5373\u53ef\uff0c\u4e3e\u4e2a\u6817\u5b50 \\(mp[i][j]\\) \u8868\u793a\u5730\u662f \\(i\\) \u8fd9\u4e2a\u70b9\u6307\u5411j\u8fd9\u4e2a\u70b9\u7684\u65f6\u5019\u5730\u8fb9\u7684\u6743\u503c \u56db\u3001\u90bb\u63a5\u8868\uff08\u7a00\u758f\u56fe\uff09 \u00b6 \u5bf9\u4e8e\u90bb\u63a5\u8868\u800c\u8a00\uff0c\u6211\u4eec\u5efa\u56fe\u7684\u65b9\u5f0f\u5c31\u5f88\u591a\u4e86\uff0c\u6211\u8fd9\u91cc\u4e3e\u4e24\u4e2a\u5e38\u7528\u7684\u65b9\u5f0f 4.1\u4f7f\u7528\u5bb9\u5668vector \u00b6 \u5927\u5bb6\u90fd\u77e5\u9053\uff0cvector\u662f\u4e00\u4e2a\u53d8\u957f\u6570\u7ec4\u7684\u5bb9\u5668\uff0c\u5b83\u4f1a\u6839\u636e\u4f60\u7684\u9700\u6c42\u6765\u5206\u914d\u5bf9\u5e94\u7684\u7a7a\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6765\u5efa\u56fe \u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u8981\u5305\u542b\u54ea\u4e9b\u4fe1\u606f\u5462\uff1a\u7ec8\u70b9\u4fe1\u606f\u3001\u8fb9\u6743\u503c \u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u5199\u51fa\u6765\u4e86\uff1a C++ struct Edge { int v , w ; //v\u8868\u793a\u7684\u662f\u7ec8\u70b9\u3001w\u8868\u793a\u7684\u662f\u8d77\u70b9\u5230\u91cd\u70b9\u7684\u6743\u503c }; vector < Edge > E [ N ]; //\u8fd9\u4e2aN\u662f\u6839\u636e\u4f60\u7684\u9876\u70b9\u7684\u5927\u5c0f\u6765\u51b3\u5b9a\u7684 \u8fd9\u6837\u4e00\u6765\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u4e5f\u80fd\u7ef4\u62a4\u8fd9\u4e2a\u56fe push_back(node) 4.2\u4f7f\u7528\u539f\u751f\u6570\u7ec4 \u00b6 \u7531\u4e8e\u6570\u7ec4\u4e0d\u80fd\u662f\u53d8\u957f\u7684\uff0c\u6709\u4e9b\u65f6\u5019\u53c8\u56e0\u4e3a\u70b9\u4e0d\u591a\uff0c\u4f46\u662f\u90fd\u633a\u5927\uff0c\u9020\u6210\u4e86\u6570\u7ec4\u7a7a\u95f4\u4e0d\u591f\uff0c\u6211\u4eec\u56e0\u6b64\u5c31\u80fd\u60f3\u5230\u94fe\u8868\u7684\u7ed3\u6784\u6765\u7ef4\u62a4\u8fd9\u4e2a\u56fe\uff0c\u4e8e\u662f\u4f60\u5c31\u5f97\u5230\u4e86\u4e0b\u9762\u8fd9\u4e2a\u7ed3\u6784\u4f53 C++ struct Edge { int v , w ; struct Edge * next ; }; Edge E [ N ]; \u8fd9\u6837\u6bcf\u4e00\u4e2a\u70b9\u5c31\u662f\u4e00\u6761\u94fe\u8868\uff0c\u8fd9\u6837\u6211\u4eec\u4e5f\u80fd\u5f88\u597d\u7684\u7ef4\u62a4\u8fd9\u4e2a\u56fe \u4e94\u3001\u94fe\u5f0f\u524d\u5411\u661f \u00b6 5.1\u524d\u5411\u661f \u00b6 \u524d\u5411\u661f\u662f\u4e00\u79cd \u7279\u6b8a\u7684\u8fb9\u96c6\u6570\u7ec4 ,\u6211\u4eec\u628a\u8fb9\u96c6\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9 \u6309\u7167\u8d77\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f ,\u5982\u679c \u8d77\u70b9\u76f8\u540c\u5c31\u6309\u7167\u7ec8\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f ,\u5e76\u8bb0\u5f55\u4e0b \u4ee5\u67d0\u4e2a\u70b9\u4e3a\u8d77\u70b9 \u7684\u6240\u6709\u8fb9\u5728\u6570\u7ec4\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c\u5b58\u50a8\u957f\u5ea6,\u90a3\u4e48\u524d\u5411\u661f\u5c31\u6784\u9020\u597d\u4e86. \u6211\u4eec\u7528 \\(len[i]\\) \u6765\u8bb0\u5f55\u6240\u6709\u4ee5 \\(i\\) \u4e3a\u8d77\u70b9\u7684\u8fb9\u5728\u6570\u7ec4\u4e2d\u7684\u5b58\u50a8\u957f\u5ea6. \u6211\u4eec\u7528\u7528 \\(head[i]\\) \u8bb0\u5f55\u4ee5 \\(i\\) \u4e3a\u8fb9\u96c6\u5728\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b58\u50a8\u4f4d\u7f6e. \u4e3e\u4e2a\u6817\u5b50\uff1a \u5047\u8bbe\u6211\u4eec\u6709\u8fd9\u6837\u4e00\u4e2a\u56fe\uff1a \u8fd9\u4e2a\u8fb9\u7684\u8f93\u5165\u60c5\u51b5\u5982\u4e0b\uff1a 1 2 2 3 3 4 1 3 4 1 1 5 4 5 \u6392\u5b8c\u5e8f\u540e\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u8fb9\u987a\u5e8f\uff1a \u7f16\u53f7\uff1a 1 2 3 4 5 6 7 \u8d77\u70b9\uff1a 1 1 1 2 3 4 4 \u7ec8\u70b9\uff1a 2 3 5 3 4 1 5 \u7136\u540e\u6211\u4eec\u5c31\u80fd\u83b7\u5f97 head \u6570\u7ec4\u548c len \u6570\u7ec4\u7684\u4fe1\u606f\u4e86 head len head[1] = 1 len[1] = 3 head[2] = 4 len[2] = 1 head[3] = 5 len[3] = 1 head[4] = 6 len[4] = 2 \u8fd9\u4e2a\u5efa\u56fe\u7684\u65b9\u6cd5\u80fd\u5e2e\u6211\u4eec\u4f18\u5316\u540e\u9762\u8981\u5b66\u7684DFS\u548cBFS\uff0c\u4f46\u662f\u4ec5\u4ec5\u662f\u8fd9\u6837\u5c31\u8db3\u591f\u4e86\u5417\uff1f\u7b54\u6848\u663e\u7136\u662f\u4e0d\u591f\uff0c\u6211\u4eec\u53ef\u4ee5\u5b66\u5230\u4e00\u79cd\u66f4\u4f18\u7684\u5efa\u56fe\u65b9\u6cd5\uff1a \u94fe\u5f0f\u524d\u5411\u661f 5.2\u94fe\u5f0f\u524d\u5411\u661f \u00b6 \u6211\u4eec\u6839\u636e\u524d\u9762\u6240\u5b66\u7684\u542f\u53d1\u53ef\u4ee5\u60f3\u5230\u5efa\u7acb\u4e00\u79cd\u65b0\u7684\u8fb9\u7684\u7ed3\u6784\u4f53 C++ struct Edge { int last ; int to ; int w ; }; \u5176\u4e2d edge[i].to \u8868\u793a\u7b2c \\(i\\) \u6761\u8fb9\u7684\u7ec8\u70b9, edge[i].last \u8868\u793a\u4e0e\u7b2c \\(i\\) \u6761\u8fb9\u540c\u8d77\u70b9\u7684\u4e0a\u4e00\u6761\u8fb9\u7684\u5b58\u50a8\u4f4d\u7f6e, edge[i].w \u4e3a\u8fb9\u6743\u503c. \u53e6\u5916\u53d7\u5230\u524d\u5411\u661f\u7684\u542f\u53d1\uff0c\u6211\u4eec\u8fd8\u6709\u4e00\u4e2ahead\u6570\u7ec4\uff0c\u5b83\u662f\u7528\u6765\u8868\u793a\u4ee5 \\(i\\) \u4e3a\u8d77\u70b9\u7684 \u7b2c\u4e00\u6761\u8fb9\u5b58\u50a8 \u7684\u4f4d\u7f6e,\u5b9e\u9645\u4e0a\u4f60\u4f1a\u53d1\u73b0\u8fd9\u91cc\u7684\u7b2c\u4e00\u6761\u8fb9\u5b58\u50a8\u7684\u4f4d\u7f6e\u5176\u5b9e\u5728\u4ee5 \\(i\\) \u4e3a\u8d77\u70b9\u7684\u6240\u6709\u8fb9\u7684 \u6700\u540e\u8f93\u5165\u7684\u90a3\u4e2a\u7f16\u53f7 . \u6211\u4eec\u5c06head\u6570\u7ec4\u521d\u59cb\u5316\u4e3a-1\u6216\u80050\uff0c cnt \u521d\u59cb\u5316\u4e3a0\uff0c cnt \u8868\u793a\u7684\u662f\u5f53\u524d\u52a0\u7684\u8fb9\u6570\uff0c\u7136\u540e\u5bf9\u5b83\u4e0d\u65ad\u5730\u66f4\u65b0\u64cd\u4f5c\uff0c\u5f88\u663e\u7136\u6211\u4eec\u80fd\u5f97\u5230\u8fd9\u6837\u5730\u4e00\u4e2a\u52a0\u8fb9\u5730\u64cd\u4f5c C++ void add ( int u , int v , int w ) { edge [ cnt ]. w = w ; //\u66f4\u6539\u8fb9\u6743 edge [ cnt ]. to = v ; //\u66f4\u6539\u4e0b\u4e00\u4e2a\u70b9\u7684\u4f4d\u7f6e edge [ cnt ]. last = head [ u ]; //\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u4ee5u\u4e3a\u7ec8\u70b9\u7684\u8fb9\u7684\u4f4d\u7f6e head [ u ] = cnt ++ ; //\u66f4\u65b0\u4e00\u4e0bhead\u6570\u7ec4 } \u8fd8\u662f\u7528\u4e0a\u9762\u7684\u56fe\uff0c\u6211\u4eec\u5c31\u80fd\u5f97\u5230\u5982\u4e0b\u7684\u8fb9\u6743\u5173\u7cfb edge[i].to edge[i].last head[i] edge[0].to = 2 edge[0].last = -1 head[1] = 0; edge[1].to = 3 edge[1].last= -1 head[2] = 1 edge[2].to = 4 edge[2],last = -1 head[3] = 2 edge[3].to = 3 edge[3].last = 0 head[1] = 3 edge[4].to = 1 edge[4].last = -1 head[4] = 4 edge[5].to = 5 edge[5].last= 3 head[1] = 5 edge[6].to = 5 edge[6].last = 4 head[4] = 6 head[i]\u5c31\u662f\u4fdd\u5b58\u7684\u6700\u540e\u7684\u90a3\u6761\u8fb9\u7684\u7f16\u53f7\u3001\u8fd9\u4e2a\u94fe\u5f0f\u524d\u5411\u661f\u5728\u904d\u5386\u56fe\u7684\u65f6\u5019\u662f\u5012\u7740\u904d\u5386\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u5176\u4e2d\u4e00\u4e2a\u6210\u5458last\u8868\u793a\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u5bf9\u56fe\u4e5f\u4e0d\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd \u6240\u4ee5\u6211\u4eec\u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u904d\u5386\u7684\u65b9\u5f0f\uff1a C++ for ( int i = head [ u ]; i != -1 ; i = edge [ i ]. last ) //\u4e2d\u95f4\u90a3\u4e2a\u5faa\u73af\u5224\u65ad\u4e5f\u53ef\u4ee5\u5199\u6210~i\uff0c\u4e0d\u61c2\u5f97\u540c\u5b66\u53ef\u4ee5\u53bb\u4e86\u89e3\u4e00\u4e0b\u8d1f\u6570\u8865\u7801","title":"\u5efa\u56fe\u57fa\u7840"},{"location":"%E5%9B%BE%E8%AE%BA/%E5%BB%BA%E5%9B%BE%E5%9F%BA%E7%A1%80/#_1","text":"","title":"\u5efa\u56fe\u57fa\u7840"},{"location":"%E5%9B%BE%E8%AE%BA/%E5%BB%BA%E5%9B%BE%E5%9F%BA%E7%A1%80/#_2","text":"","title":"\u4e00\u3001\u524d\u8a00"},{"location":"%E5%9B%BE%E8%AE%BA/%E5%BB%BA%E5%9B%BE%E5%9F%BA%E7%A1%80/#11","text":"https://www.bilibili.com/video/BV1RD4y1F7Fq","title":"1.1\u914d\u5957\u89c6\u9891"},{"location":"%E5%9B%BE%E8%AE%BA/%E5%BB%BA%E5%9B%BE%E5%9F%BA%E7%A1%80/#12","text":"\u56fe\u4e00\u822c\u5b9a\u4e49\u4e3a \u4e8c\u5143\u96c6 \uff1b \u7531 \u9876\u70b9\u96c6 \u4e0e \u8fb9\u96c6 \u6784\u6210\u3002 \u6216\u8005\u66f4\u62bd\u8c61\u7684\u8bf4\uff0c\u7531\u4e00\u4e2a\u96c6\u5408(\u9876\u70b9)\uff0c\u548c\u96c6\u5408\u4e0a\u7684\u5173\u7cfb\uff08\u8fb9\uff09\u6784\u6210","title":"1.2 \u57fa\u7840\u8bf4\u660e"},{"location":"%E5%9B%BE%E8%AE%BA/%E5%BB%BA%E5%9B%BE%E5%9F%BA%E7%A1%80/#_3","text":"\u90bb\u63a5\u77e9\u9635 \u90bb\u63a5\u8868 \u5ea6\uff0c\u51fa\u5ea6\uff0c\u5165\u5ea6 \u5728\u6709\u5411\u56fe\u4e2d\uff0c\u7bad\u5934\u662f\u5177\u6709\u65b9\u5411\u7684\uff0c\u4ece\u4e00\u4e2a\u9876\u70b9\u6307\u5411\u53e6\u4e00\u4e2a\u9876\u70b9\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u6bcf\u4e2a\u9876\u70b9 \u88ab\u6307\u5411 \u7684\u7bad\u5934\u4e2a\u6570\uff0c\u5c31\u662f\u5b83\u7684\u5165\u5ea6\u3002\u4ece\u8fd9\u4e2a\u9876\u70b9\u6307\u51fa\u53bb\u7684\u7bad\u5934\u4e2a\u6570\uff0c\u5c31\u662f\u5b83\u7684\u51fa\u5ea6 \u6709\u5411\u8fb9\uff0c\u65e0\u5411\u8fb9\uff0c\u91cd\u8fb9\u3002 \u73af\uff0c\u81ea\u73af\u3002 \u95ed\u5305\u7b49","title":"\u4e8c\u3001\u56fe\u7684\u57fa\u672c\u6982\u5ff5\u540d\u8bcd"},{"location":"%E5%9B%BE%E8%AE%BA/%E5%BB%BA%E5%9B%BE%E5%9F%BA%E7%A1%80/#21","text":"\u6709\u5411\u56fe\u5c31\u662f\u8fb9\u5728\u8868\u793a\u7684\u65f6\u5019\u6709\u4e00\u4e2a \u5355\u5411\u6027 \uff0c\u65e0\u5411\u56fe\u5c31\u662f\u5728\u8fb9\u8868\u793a\u7684\u65f6\u5019\u6709\u4e00\u4e2a \u53cc\u5411\u6027 \uff0c\u8fd9\u4e00\u70b9\u5728\u6211\u4eec\u5efa\u56fe\u7684\u65f6\u5019\u4e5f\u80fd\u63d0\u73b0\u5230","title":"2.1\u6709\u5411\u56fe\u548c\u65e0\u5411\u56fe"},{"location":"%E5%9B%BE%E8%AE%BA/%E5%BB%BA%E5%9B%BE%E5%9F%BA%E7%A1%80/#_4","text":"\u6211\u4eec\u7528\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\u6765\u8868\u793a\u8fd9\u4e2a\u56fe\uff0c\u4e8c\u7ef4\u77e9\u9635\u7684\u4e24\u4e2a\u7ef4\u5ea6\u5c31\u5206\u522b\u5bf9\u5e94\u7740\u8d77\u70b9\uff0c\u548c\u7ec8\u70b9\uff0c\u6211\u4eec\u4e60\u60ef\u628a\u7b2c\u4e8c\u7ef4\u5ea6\u7684\u4f5c\u4e3a\u8d77\u70b9\uff0c\u7b2c\u4e00\u7ef4\u5ea6\u7684\u4f5c\u4e3a\u7ec8\u70b9 \u90a3\u4e48\u5bf9\u4e8e\u6709\u5411\u56fe\u6765\u8bf4\u6211\u4eec\u53ea\u7528\u4e0d\u65ad\u5730\u7ef4\u62a4\u9876\u70b9\u5730\u5173\u7cfb\u5373\u53ef\uff0c\u4e3e\u4e2a\u6817\u5b50 \\(mp[i][j]\\) \u8868\u793a\u5730\u662f \\(i\\) \u8fd9\u4e2a\u70b9\u6307\u5411j\u8fd9\u4e2a\u70b9\u7684\u65f6\u5019\u5730\u8fb9\u7684\u6743\u503c","title":"\u4e09\u3001\u90bb\u63a5\u77e9\u9635\uff08\u7a20\u5bc6\u56fe\uff09"},{"location":"%E5%9B%BE%E8%AE%BA/%E5%BB%BA%E5%9B%BE%E5%9F%BA%E7%A1%80/#_5","text":"\u5bf9\u4e8e\u90bb\u63a5\u8868\u800c\u8a00\uff0c\u6211\u4eec\u5efa\u56fe\u7684\u65b9\u5f0f\u5c31\u5f88\u591a\u4e86\uff0c\u6211\u8fd9\u91cc\u4e3e\u4e24\u4e2a\u5e38\u7528\u7684\u65b9\u5f0f","title":"\u56db\u3001\u90bb\u63a5\u8868\uff08\u7a00\u758f\u56fe\uff09"},{"location":"%E5%9B%BE%E8%AE%BA/%E5%BB%BA%E5%9B%BE%E5%9F%BA%E7%A1%80/#41vector","text":"\u5927\u5bb6\u90fd\u77e5\u9053\uff0cvector\u662f\u4e00\u4e2a\u53d8\u957f\u6570\u7ec4\u7684\u5bb9\u5668\uff0c\u5b83\u4f1a\u6839\u636e\u4f60\u7684\u9700\u6c42\u6765\u5206\u914d\u5bf9\u5e94\u7684\u7a7a\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6765\u5efa\u56fe \u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u8981\u5305\u542b\u54ea\u4e9b\u4fe1\u606f\u5462\uff1a\u7ec8\u70b9\u4fe1\u606f\u3001\u8fb9\u6743\u503c \u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u5199\u51fa\u6765\u4e86\uff1a C++ struct Edge { int v , w ; //v\u8868\u793a\u7684\u662f\u7ec8\u70b9\u3001w\u8868\u793a\u7684\u662f\u8d77\u70b9\u5230\u91cd\u70b9\u7684\u6743\u503c }; vector < Edge > E [ N ]; //\u8fd9\u4e2aN\u662f\u6839\u636e\u4f60\u7684\u9876\u70b9\u7684\u5927\u5c0f\u6765\u51b3\u5b9a\u7684 \u8fd9\u6837\u4e00\u6765\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u4e5f\u80fd\u7ef4\u62a4\u8fd9\u4e2a\u56fe push_back(node)","title":"4.1\u4f7f\u7528\u5bb9\u5668vector"},{"location":"%E5%9B%BE%E8%AE%BA/%E5%BB%BA%E5%9B%BE%E5%9F%BA%E7%A1%80/#42","text":"\u7531\u4e8e\u6570\u7ec4\u4e0d\u80fd\u662f\u53d8\u957f\u7684\uff0c\u6709\u4e9b\u65f6\u5019\u53c8\u56e0\u4e3a\u70b9\u4e0d\u591a\uff0c\u4f46\u662f\u90fd\u633a\u5927\uff0c\u9020\u6210\u4e86\u6570\u7ec4\u7a7a\u95f4\u4e0d\u591f\uff0c\u6211\u4eec\u56e0\u6b64\u5c31\u80fd\u60f3\u5230\u94fe\u8868\u7684\u7ed3\u6784\u6765\u7ef4\u62a4\u8fd9\u4e2a\u56fe\uff0c\u4e8e\u662f\u4f60\u5c31\u5f97\u5230\u4e86\u4e0b\u9762\u8fd9\u4e2a\u7ed3\u6784\u4f53 C++ struct Edge { int v , w ; struct Edge * next ; }; Edge E [ N ]; \u8fd9\u6837\u6bcf\u4e00\u4e2a\u70b9\u5c31\u662f\u4e00\u6761\u94fe\u8868\uff0c\u8fd9\u6837\u6211\u4eec\u4e5f\u80fd\u5f88\u597d\u7684\u7ef4\u62a4\u8fd9\u4e2a\u56fe","title":"4.2\u4f7f\u7528\u539f\u751f\u6570\u7ec4"},{"location":"%E5%9B%BE%E8%AE%BA/%E5%BB%BA%E5%9B%BE%E5%9F%BA%E7%A1%80/#_6","text":"","title":"\u4e94\u3001\u94fe\u5f0f\u524d\u5411\u661f"},{"location":"%E5%9B%BE%E8%AE%BA/%E5%BB%BA%E5%9B%BE%E5%9F%BA%E7%A1%80/#51","text":"\u524d\u5411\u661f\u662f\u4e00\u79cd \u7279\u6b8a\u7684\u8fb9\u96c6\u6570\u7ec4 ,\u6211\u4eec\u628a\u8fb9\u96c6\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9 \u6309\u7167\u8d77\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f ,\u5982\u679c \u8d77\u70b9\u76f8\u540c\u5c31\u6309\u7167\u7ec8\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f ,\u5e76\u8bb0\u5f55\u4e0b \u4ee5\u67d0\u4e2a\u70b9\u4e3a\u8d77\u70b9 \u7684\u6240\u6709\u8fb9\u5728\u6570\u7ec4\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c\u5b58\u50a8\u957f\u5ea6,\u90a3\u4e48\u524d\u5411\u661f\u5c31\u6784\u9020\u597d\u4e86. \u6211\u4eec\u7528 \\(len[i]\\) \u6765\u8bb0\u5f55\u6240\u6709\u4ee5 \\(i\\) \u4e3a\u8d77\u70b9\u7684\u8fb9\u5728\u6570\u7ec4\u4e2d\u7684\u5b58\u50a8\u957f\u5ea6. \u6211\u4eec\u7528\u7528 \\(head[i]\\) \u8bb0\u5f55\u4ee5 \\(i\\) \u4e3a\u8fb9\u96c6\u5728\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b58\u50a8\u4f4d\u7f6e. \u4e3e\u4e2a\u6817\u5b50\uff1a \u5047\u8bbe\u6211\u4eec\u6709\u8fd9\u6837\u4e00\u4e2a\u56fe\uff1a \u8fd9\u4e2a\u8fb9\u7684\u8f93\u5165\u60c5\u51b5\u5982\u4e0b\uff1a 1 2 2 3 3 4 1 3 4 1 1 5 4 5 \u6392\u5b8c\u5e8f\u540e\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u8fb9\u987a\u5e8f\uff1a \u7f16\u53f7\uff1a 1 2 3 4 5 6 7 \u8d77\u70b9\uff1a 1 1 1 2 3 4 4 \u7ec8\u70b9\uff1a 2 3 5 3 4 1 5 \u7136\u540e\u6211\u4eec\u5c31\u80fd\u83b7\u5f97 head \u6570\u7ec4\u548c len \u6570\u7ec4\u7684\u4fe1\u606f\u4e86 head len head[1] = 1 len[1] = 3 head[2] = 4 len[2] = 1 head[3] = 5 len[3] = 1 head[4] = 6 len[4] = 2 \u8fd9\u4e2a\u5efa\u56fe\u7684\u65b9\u6cd5\u80fd\u5e2e\u6211\u4eec\u4f18\u5316\u540e\u9762\u8981\u5b66\u7684DFS\u548cBFS\uff0c\u4f46\u662f\u4ec5\u4ec5\u662f\u8fd9\u6837\u5c31\u8db3\u591f\u4e86\u5417\uff1f\u7b54\u6848\u663e\u7136\u662f\u4e0d\u591f\uff0c\u6211\u4eec\u53ef\u4ee5\u5b66\u5230\u4e00\u79cd\u66f4\u4f18\u7684\u5efa\u56fe\u65b9\u6cd5\uff1a \u94fe\u5f0f\u524d\u5411\u661f","title":"5.1\u524d\u5411\u661f"},{"location":"%E5%9B%BE%E8%AE%BA/%E5%BB%BA%E5%9B%BE%E5%9F%BA%E7%A1%80/#52","text":"\u6211\u4eec\u6839\u636e\u524d\u9762\u6240\u5b66\u7684\u542f\u53d1\u53ef\u4ee5\u60f3\u5230\u5efa\u7acb\u4e00\u79cd\u65b0\u7684\u8fb9\u7684\u7ed3\u6784\u4f53 C++ struct Edge { int last ; int to ; int w ; }; \u5176\u4e2d edge[i].to \u8868\u793a\u7b2c \\(i\\) \u6761\u8fb9\u7684\u7ec8\u70b9, edge[i].last \u8868\u793a\u4e0e\u7b2c \\(i\\) \u6761\u8fb9\u540c\u8d77\u70b9\u7684\u4e0a\u4e00\u6761\u8fb9\u7684\u5b58\u50a8\u4f4d\u7f6e, edge[i].w \u4e3a\u8fb9\u6743\u503c. \u53e6\u5916\u53d7\u5230\u524d\u5411\u661f\u7684\u542f\u53d1\uff0c\u6211\u4eec\u8fd8\u6709\u4e00\u4e2ahead\u6570\u7ec4\uff0c\u5b83\u662f\u7528\u6765\u8868\u793a\u4ee5 \\(i\\) \u4e3a\u8d77\u70b9\u7684 \u7b2c\u4e00\u6761\u8fb9\u5b58\u50a8 \u7684\u4f4d\u7f6e,\u5b9e\u9645\u4e0a\u4f60\u4f1a\u53d1\u73b0\u8fd9\u91cc\u7684\u7b2c\u4e00\u6761\u8fb9\u5b58\u50a8\u7684\u4f4d\u7f6e\u5176\u5b9e\u5728\u4ee5 \\(i\\) \u4e3a\u8d77\u70b9\u7684\u6240\u6709\u8fb9\u7684 \u6700\u540e\u8f93\u5165\u7684\u90a3\u4e2a\u7f16\u53f7 . \u6211\u4eec\u5c06head\u6570\u7ec4\u521d\u59cb\u5316\u4e3a-1\u6216\u80050\uff0c cnt \u521d\u59cb\u5316\u4e3a0\uff0c cnt \u8868\u793a\u7684\u662f\u5f53\u524d\u52a0\u7684\u8fb9\u6570\uff0c\u7136\u540e\u5bf9\u5b83\u4e0d\u65ad\u5730\u66f4\u65b0\u64cd\u4f5c\uff0c\u5f88\u663e\u7136\u6211\u4eec\u80fd\u5f97\u5230\u8fd9\u6837\u5730\u4e00\u4e2a\u52a0\u8fb9\u5730\u64cd\u4f5c C++ void add ( int u , int v , int w ) { edge [ cnt ]. w = w ; //\u66f4\u6539\u8fb9\u6743 edge [ cnt ]. to = v ; //\u66f4\u6539\u4e0b\u4e00\u4e2a\u70b9\u7684\u4f4d\u7f6e edge [ cnt ]. last = head [ u ]; //\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u4ee5u\u4e3a\u7ec8\u70b9\u7684\u8fb9\u7684\u4f4d\u7f6e head [ u ] = cnt ++ ; //\u66f4\u65b0\u4e00\u4e0bhead\u6570\u7ec4 } \u8fd8\u662f\u7528\u4e0a\u9762\u7684\u56fe\uff0c\u6211\u4eec\u5c31\u80fd\u5f97\u5230\u5982\u4e0b\u7684\u8fb9\u6743\u5173\u7cfb edge[i].to edge[i].last head[i] edge[0].to = 2 edge[0].last = -1 head[1] = 0; edge[1].to = 3 edge[1].last= -1 head[2] = 1 edge[2].to = 4 edge[2],last = -1 head[3] = 2 edge[3].to = 3 edge[3].last = 0 head[1] = 3 edge[4].to = 1 edge[4].last = -1 head[4] = 4 edge[5].to = 5 edge[5].last= 3 head[1] = 5 edge[6].to = 5 edge[6].last = 4 head[4] = 6 head[i]\u5c31\u662f\u4fdd\u5b58\u7684\u6700\u540e\u7684\u90a3\u6761\u8fb9\u7684\u7f16\u53f7\u3001\u8fd9\u4e2a\u94fe\u5f0f\u524d\u5411\u661f\u5728\u904d\u5386\u56fe\u7684\u65f6\u5019\u662f\u5012\u7740\u904d\u5386\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u5176\u4e2d\u4e00\u4e2a\u6210\u5458last\u8868\u793a\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u5bf9\u56fe\u4e5f\u4e0d\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd \u6240\u4ee5\u6211\u4eec\u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u904d\u5386\u7684\u65b9\u5f0f\uff1a C++ for ( int i = head [ u ]; i != -1 ; i = edge [ i ]. last ) //\u4e2d\u95f4\u90a3\u4e2a\u5faa\u73af\u5224\u65ad\u4e5f\u53ef\u4ee5\u5199\u6210~i\uff0c\u4e0d\u61c2\u5f97\u540c\u5b66\u53ef\u4ee5\u53bb\u4e86\u89e3\u4e00\u4e0b\u8d1f\u6570\u8865\u7801","title":"5.2\u94fe\u5f0f\u524d\u5411\u661f"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/","text":"\u6700\u5c0f\u751f\u6210\u6811 \u00b6 \u524d\u8a00 \u00b6 \u914d\u5957\u89c6\u9891\uff1a www.bilibili.com/video/BV1wV411s7Pe \u4e00\u3001\u4ec0\u4e48\u662f\u6700\u5c0f\u751f\u6210\u6811 \u00b6 \u5728\u8bb2\u6700\u5c0f\u751f\u6210\u6811\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u56de\u987e\u4e00\u4e0b\u4ec0\u4e48\u662f\u751f\u6210\u6811\uff1a\u5bf9\u4e8e\u65e0\u5411\u56feG\u548c\u4e00\u68f5\u6811T\u6765\u8bf4\uff0c\u5982\u679cT\u662fG\u7684\u5b50\u56fe\uff0c\u5219\u79f0T\u4e3aG\u7684\u6811\uff0c\u5982\u679cT\u662fG\u7684\u751f\u6210\u5b50\u56fe\uff0c\u5219\u79f0T\u662fG\u7684\u751f\u6210\u6811\u3002\u800c\u6700\u5c0f\u751f\u6210\u6811\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u6709\u6743\u503c\u7684\u56fe\u6765\u8bf4\u6700\u5c0f\u6743\u503c\u548c\u7684\u56fe\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811(\u4e5f\u5c31\u662f\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u8fde\u901a\u56fe\uff0c\u4e14\u53ea\u6709n-1\u6761\u8fb9\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u4e00\u9897\u6811) \u4e8c\u3001Kruskal\u7b97\u6cd5 \u00b6 \u8be5\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u4ece\u5c0f\u5230\u5927\u52a0\u5165\u8fb9\uff0c\u662f\u4e2a\u8d2a\u5fc3\u7b97\u6cd5\u3002Kruskal \u7b97\u6cd5\u662f\u4e00\u79cd\u5e38\u89c1\u5e76\u4e14\u597d\u5199\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\uff0c\u7531 Kruskal \u53d1\u660e\u3002 \u539f\u7406\u867d\u7136\u7b80\u5355\uff0c\u4f46\u662f\u9700\u8981\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4e00\u4e2a\u68ee\u6797\uff0c\u4e0d\u80fd\u4f7f\u5176\u6210\u73af\uff0c\u6216\u8005\u8bf4\u662f\u7ef4\u62a4\u591a\u4e2a\u96c6\u5408\uff0c\u7136\u540e\u6bcf\u6b21\u5408\u5e76\u4e24\u4e2a\u5143\u7d20\u6216\u8005\u96c6\u5408\uff0c\u8fd9\u5f88\u5bb9\u6613\u548c\u6628\u5929\u5b66\u4e60\u7684\u5e76\u67e5\u96c6\u8054\u7cfb\u8d77\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u5f88\u8f7b\u677e\u7684\u7ef4\u62a4\u8fd9\u4e2a\u68ee\u6797\u3002 \u5982\u679c\u4f7f\u7528 \\(O(mlog_2m)\\) \u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u5e76\u4e14\u4f7f\u7528 \\(O(m\u03b1(m,n))\\) \u6216 \\(O(mlog_2\u2061n)\\) \u7684\u5e76\u67e5\u96c6\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(mlog_2m)\\) \u7684 Kruskal \u7b97\u6cd5\u3002 2.1\u8bc1\u660e \u00b6 \u4e3a\u4e86\u9020\u51fa\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6211\u4eec\u4ece\u6700\u5c0f\u8fb9\u6743\u7684\u8fb9\u5f00\u59cb\uff0c\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u52a0\u5165\uff0c\u5982\u679c\u67d0\u6b21\u52a0\u8fb9\u4ea7\u751f\u4e86\u73af\uff0c\u5c31\u6254\u6389\u8fd9\u6761\u8fb9\uff0c\u76f4\u5230\u52a0\u5165\u4e86 \\(n\u22121\\) \u6761\u8fb9\uff0c\u5373\u5f62\u6210\u4e86\u4e00\u68f5\u6811\u3002 \u8bc1\u660e\uff1a\u4f7f\u7528\u5f52\u7eb3\u6cd5\uff0c\u8bc1\u660e\u4efb\u4f55\u65f6\u5019 K \u7b97\u6cd5\u9009\u62e9\u7684\u8fb9\u96c6\u90fd\u88ab\u67d0\u68f5 MST \u6240\u5305\u542b\u3002 \u57fa\u7840\uff1a\u5bf9\u4e8e\u7b97\u6cd5\u521a\u5f00\u59cb\u65f6\uff0c\u663e\u7136\u6210\u7acb\uff08\u6700\u5c0f\u751f\u6210\u6811\u5b58\u5728\uff09\u3002 \u5f52\u7eb3\uff1a\u5047\u8bbe\u67d0\u65f6\u523b\u6210\u7acb\uff0c\u5f53\u524d\u8fb9\u96c6\u4e3a F\uff0c\u4ee4 T \u4e3a\u8fd9\u68f5 MST\uff0c\u8003\u8651\u4e0b\u4e00\u6761\u52a0\u5165\u7684\u8fb9 e\u3002 \u5982\u679c \\(e\\) \u5c5e\u4e8e \\(T\\) \uff0c\u90a3\u4e48\u6210\u7acb\u3002 \u5426\u5219\uff0c \\(T+e\\) \u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u73af\uff0c\u8003\u8651\u8fd9\u4e2a\u73af\u4e0a\u4e0d\u5c5e\u4e8e \\(F\\) \u7684\u53e6\u4e00\u6761\u8fb9 \\(f\\) \uff08\u4e00\u5b9a\u53ea\u6709\u4e00\u6761\uff09\u3002 \u9996\u5148\uff0c \\(f\\) \u7684\u6743\u503c\u4e00\u5b9a\u4e0d\u4f1a\u6bd4 \\(e\\) \u5c0f\uff0c\u4e0d\u7136 \\(f\\) \u4f1a\u5728 \\(e\\) \u4e4b\u524d\u88ab\u9009\u53d6\u3002 \u7136\u540e\uff0c \\(f\\) \u7684\u6743\u503c\u4e00\u5b9a\u4e0d\u4f1a\u6bd4 e \u5927\uff0c\u4e0d\u7136 \\(T+e\u2212f\\) \u5c31\u662f\u4e00\u68f5\u6bd4 \\(T\\) \u8fd8\u4f18\u7684\u751f\u6210\u6811\u4e86\u3002 \u6240\u4ee5\uff0c \\(T+e\u2212f\\) \u5305\u542b\u4e86 \\(F\\) \uff0c\u5e76\u4e14\u4e5f\u662f\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5f52\u7eb3\u6210\u7acb\u3002 2.2\u4ee3\u7801\u5b9e\u73b0 \u00b6 \uff08\u4ee5hdu1863\u4e3a\u4f8b\uff09 C++ #include <bits/stdc++.h> using namespace std ; const int N = 1e2 + 10 ; int fa [ N ]; int m , n ; struct edge { int u , v , w ; bool operator < ( const edge & a ) const { return this -> w < a . w ; } }; vector < edge > V ; void init () { for ( int i = 1 ; i <= m ; ++ i ) { fa [ i ] = i ; } V . clear (); } int find ( int x ) { while ( x != fa [ x ]) x = fa [ x ]; return x ; } void kruskal () { int ans = 0 ; int cnt = m ; for ( int i = 0 ; i < V . size (); ++ i ) { int u = V [ i ]. u ; int v = V [ i ]. v ; int w = V [ i ]. w ; u = find ( u ); v = find ( v ); if ( u != v ) { fa [ v ] = u ; ans += w ; cnt -- ; } } if ( cnt == 1 ) printf ( \"%d \\n \" , ans ); else printf ( \"? \\n \" ); } int main () { while ( ~ scanf ( \"%d%d\" , & n , & m ) && n ) { init (); for ( int i = 1 ; i <= n ; ++ i ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); V . push_back ({ u , v , w }); } sort ( V . begin (), V . end ()); kruskal (); } return 0 ; } \u4e09\u3001Prim \u7b97\u6cd5 \u00b6 Prim \u7b97\u6cd5\u662f\u53e6\u4e00\u79cd\u5e38\u89c1\u5e76\u4e14\u597d\u5199\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u4ece\u4e00\u4e2a\u7ed3\u70b9\u5f00\u59cb\uff0c\u4e0d\u65ad\u52a0\u70b9\uff08\u800c\u4e0d\u662f Kruskal \u7b97\u6cd5\u7684\u52a0\u8fb9\uff09\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6bcf\u6b21\u8981\u9009\u62e9\u8ddd\u79bb\u6700\u5c0f\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u4ee5\u53ca\u7528\u65b0\u7684\u8fb9\u66f4\u65b0\u5176\u4ed6\u7ed3\u70b9\u7684\u8ddd\u79bb\u3002 \u5176\u5b9e\u8ddf Dijkstra \u7b97\u6cd5\u4e00\u6837\uff0c\u6bcf\u6b21\u627e\u5230\u8ddd\u79bb\u6700\u5c0f\u7684\u4e00\u4e2a\u70b9\uff0c\u53ef\u4ee5\u66b4\u529b\u627e\u4e5f\u53ef\u4ee5\u7528\u5806\u7ef4\u62a4\u3002 \u5806\u4f18\u5316\u7684\u65b9\u5f0f\u7c7b\u4f3c Dijkstra \u7684\u5806\u4f18\u5316\uff0c\u4f46\u5982\u679c\u4f7f\u7528\u4e8c\u53c9\u5806\u7b49\u4e0d\u652f\u6301 O(1) decrease-key \u7684\u5806\uff0c\u590d\u6742\u5ea6\u5c31\u4e0d\u4f18\u4e8e Kruskal\uff0c\u5e38\u6570\u4e5f\u6bd4 Kruskal \u5927\u3002\u6240\u4ee5\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u4f7f\u7528 Kruskal \u7b97\u6cd5\uff0c\u5728\u7a20\u5bc6\u56fe\u5c24\u5176\u662f\u5b8c\u5168\u56fe\u4e0a\uff0c\u66b4\u529b Prim \u7684\u590d\u6742\u5ea6\u6bd4 Kruskal \u4f18\uff0c\u4f46 \u4e0d\u4e00\u5b9a \u5b9e\u9645\u8dd1\u5f97\u66f4\u5feb\u3002\u6240\u4ee5\u4e00\u822c\u4e0d\u7528prim\u7b97\u6cd5 \u5173\u4e8e\u5404\u79cd\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6 \u66b4\u529b\uff1a \\(O(n^2+m)\\) \u3002 \u4e8c\u53c9\u5806\uff1a \\(O((n+m)log_2n)\\) \u3002 Fib \u5806\uff1a \\(O(nlog\u2061_2n+m)\\) \u3002 3.1\u8bc1\u660e \u00b6 \u4ece\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9\u5f00\u59cb\uff0c\u5c06\u7ed3\u70b9\u5206\u6210\u4e24\u7c7b\uff1a\u5df2\u52a0\u5165\u7684\uff0c\u672a\u52a0\u5165\u7684\u3002 \u6bcf\u6b21\u4ece\u672a\u52a0\u5165\u7684\u7ed3\u70b9\u4e2d\uff0c\u627e\u4e00\u4e2a\u4e0e\u5df2\u52a0\u5165\u7684\u7ed3\u70b9\u4e4b\u95f4\u8fb9\u6743\u6700\u5c0f\u503c\u6700\u5c0f\u7684\u7ed3\u70b9\u3002 \u7136\u540e\u5c06\u8fd9\u4e2a\u7ed3\u70b9\u52a0\u5165\uff0c\u5e76\u8fde\u4e0a\u90a3\u6761\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\u3002 \u91cd\u590d n\u22121 \u6b21\u5373\u53ef\u3002 \u8bc1\u660e\uff1a\u8fd8\u662f\u8bf4\u660e\u5728\u6bcf\u4e00\u6b65\uff0c\u90fd\u5b58\u5728\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u5305\u542b\u5df2\u9009\u8fb9\u96c6\u3002 \u57fa\u7840\uff1a\u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u663e\u7136\u6210\u7acb\u3002 \u5f52\u7eb3\uff1a\u5982\u679c\u67d0\u4e00\u6b65\u6210\u7acb\uff0c\u5f53\u524d\u8fb9\u96c6\u4e3a F\uff0c\u5c5e\u4e8e T \u8fd9\u68f5 MST\uff0c\u63a5\u4e0b\u6765\u8981\u52a0\u5165\u8fb9 e\u3002 \u5982\u679c e \u5c5e\u4e8e T\uff0c\u90a3\u4e48\u6210\u7acb\u3002 \u5426\u5219\u8003\u8651 T+e \u4e2d\u73af\u4e0a\u53e6\u4e00\u6761\u53ef\u4ee5\u52a0\u5165\u5f53\u524d\u8fb9\u96c6\u7684\u8fb9 f\u3002 \u9996\u5148\uff0cf \u7684\u6743\u503c\u4e00\u5b9a\u4e0d\u5c0f\u4e8e e \u7684\u6743\u503c\uff0c\u5426\u5219\u5c31\u4f1a\u9009\u62e9 f \u800c\u4e0d\u662f e \u4e86\u3002 \u7136\u540e\uff0cf \u7684\u6743\u503c\u4e00\u5b9a\u4e0d\u5927\u4e8e e \u7684\u6743\u503c\uff0c\u5426\u5219 T+e\u2212f \u5c31\u662f\u4e00\u68f5\u66f4\u5c0f\u7684\u751f\u6210\u6811\u4e86\u3002 \u56e0\u6b64\uff0ce \u548c f \u7684\u6743\u503c\u76f8\u7b49\uff0cT+e\u2212f \u4e5f\u662f\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4e14\u5305\u542b\u4e86 F\u3002 3.2\u4ee3\u7801\u5b9e\u73b0 \u00b6 \uff08\u4ee5hdu1863\u4e3a\u4f8b\uff09 C++ #include <cstdio> #include <cstring> #include <algorithm> #include <queue> #include <vector> using namespace std ; #define P pair<int, int> #define INF 0x3f3f3f3f const int N = 1005 ; int mp [ N ][ N ]; bool vis [ N ]; int dis [ N ]; int n , m ; int prim ( int s ) { for ( int i = 1 ; i <= n ; ++ i ) { dis [ i ] = INF ; vis [ i ] = false ; } dis [ s ] = 0 ; int ans = 0 ; while ( true ) { int v = -1 ; for ( int u = 1 ; u <= n ; ++ u ) { if ( ! vis [ u ] && ( v == -1 || dis [ u ] < dis [ v ])) { v = u ; } } if ( v == -1 ) break ; vis [ v ] = true ; ans += dis [ v ]; for ( int u = 1 ; u <= n ; ++ u ) { dis [ u ] = min ( dis [ u ], mp [ u ][ v ]); } } return ans ; } int main () { int u , v , cost ; while ( ~ scanf ( \"%d%d\" , & m , & n ) && m ) { memset ( mp , INF , sizeof mp ); for ( int i = 0 ; i < m ; ++ i ) { scanf ( \"%d%d%d\" , & u , & v , & cost ); if ( mp [ u ][ v ] > cost ) mp [ u ][ v ] = mp [ v ][ u ] = cost ; } int ans = prim ( 1 ); bool is = true ; if ( ans < INF ) { printf ( \"%d \\n \" , ans ); } else { puts ( \"?\" ); } } return 0 ; } \u56db\u3001\u7ec3\u4e60\u9898\u76ee \u00b6 \u9898\u76ee\u8fde\u63a5 \u9898\u76ee\u540d https://acm.dingbacode.com/showproblem.php?pid=1863 \u7545\u901a\u5de5\u7a0b https://acm.dingbacode.com/showproblem.php?pid=1875 \u7545\u901a\u5de5\u7a0b\u518d\u7eed https://acm.dingbacode.com/showproblem.php?pid=1879 \u7ee7\u7eed\u7545\u901a\u5de5\u7a0b https://www.luogu.com.cn/problem/P3366 P3366 \u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811 https://www.luogu.com.cn/problem/P2872 P2872 [USACO07DEC]Building Roads S https://www.luogu.com.cn/problem/P1195 P1195 \u53e3\u888b\u7684\u5929\u7a7a https://www.luogu.com.cn/problem/P1194 P1194 \u4e70\u793c\u7269 https://www.luogu.com.cn/problem/P2121 P2121 \u62c6\u5730\u6bef https://www.luogu.com.cn/problem/P1396 P1396 \u8425\u6551 https://www.luogu.com.cn/problem/P1991 P1991 \u65e0\u7ebf\u901a\u8baf\u7f51 https://www.luogu.com.cn/problem/P4047 P4047 [JSOI2010]\u90e8\u843d\u5212\u5206 https://acm.dingbacode.com/showproblem.php?pid=1598 find the most comfortable road","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#_1","text":"","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#_2","text":"\u914d\u5957\u89c6\u9891\uff1a www.bilibili.com/video/BV1wV411s7Pe","title":"\u524d\u8a00"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#_3","text":"\u5728\u8bb2\u6700\u5c0f\u751f\u6210\u6811\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u56de\u987e\u4e00\u4e0b\u4ec0\u4e48\u662f\u751f\u6210\u6811\uff1a\u5bf9\u4e8e\u65e0\u5411\u56feG\u548c\u4e00\u68f5\u6811T\u6765\u8bf4\uff0c\u5982\u679cT\u662fG\u7684\u5b50\u56fe\uff0c\u5219\u79f0T\u4e3aG\u7684\u6811\uff0c\u5982\u679cT\u662fG\u7684\u751f\u6210\u5b50\u56fe\uff0c\u5219\u79f0T\u662fG\u7684\u751f\u6210\u6811\u3002\u800c\u6700\u5c0f\u751f\u6210\u6811\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u6709\u6743\u503c\u7684\u56fe\u6765\u8bf4\u6700\u5c0f\u6743\u503c\u548c\u7684\u56fe\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811(\u4e5f\u5c31\u662f\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u8fde\u901a\u56fe\uff0c\u4e14\u53ea\u6709n-1\u6761\u8fb9\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u4e00\u9897\u6811)","title":"\u4e00\u3001\u4ec0\u4e48\u662f\u6700\u5c0f\u751f\u6210\u6811"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#kruskal","text":"\u8be5\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u4ece\u5c0f\u5230\u5927\u52a0\u5165\u8fb9\uff0c\u662f\u4e2a\u8d2a\u5fc3\u7b97\u6cd5\u3002Kruskal \u7b97\u6cd5\u662f\u4e00\u79cd\u5e38\u89c1\u5e76\u4e14\u597d\u5199\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\uff0c\u7531 Kruskal \u53d1\u660e\u3002 \u539f\u7406\u867d\u7136\u7b80\u5355\uff0c\u4f46\u662f\u9700\u8981\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4e00\u4e2a\u68ee\u6797\uff0c\u4e0d\u80fd\u4f7f\u5176\u6210\u73af\uff0c\u6216\u8005\u8bf4\u662f\u7ef4\u62a4\u591a\u4e2a\u96c6\u5408\uff0c\u7136\u540e\u6bcf\u6b21\u5408\u5e76\u4e24\u4e2a\u5143\u7d20\u6216\u8005\u96c6\u5408\uff0c\u8fd9\u5f88\u5bb9\u6613\u548c\u6628\u5929\u5b66\u4e60\u7684\u5e76\u67e5\u96c6\u8054\u7cfb\u8d77\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u5f88\u8f7b\u677e\u7684\u7ef4\u62a4\u8fd9\u4e2a\u68ee\u6797\u3002 \u5982\u679c\u4f7f\u7528 \\(O(mlog_2m)\\) \u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u5e76\u4e14\u4f7f\u7528 \\(O(m\u03b1(m,n))\\) \u6216 \\(O(mlog_2\u2061n)\\) \u7684\u5e76\u67e5\u96c6\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(mlog_2m)\\) \u7684 Kruskal \u7b97\u6cd5\u3002","title":"\u4e8c\u3001Kruskal\u7b97\u6cd5"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#21","text":"\u4e3a\u4e86\u9020\u51fa\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6211\u4eec\u4ece\u6700\u5c0f\u8fb9\u6743\u7684\u8fb9\u5f00\u59cb\uff0c\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u52a0\u5165\uff0c\u5982\u679c\u67d0\u6b21\u52a0\u8fb9\u4ea7\u751f\u4e86\u73af\uff0c\u5c31\u6254\u6389\u8fd9\u6761\u8fb9\uff0c\u76f4\u5230\u52a0\u5165\u4e86 \\(n\u22121\\) \u6761\u8fb9\uff0c\u5373\u5f62\u6210\u4e86\u4e00\u68f5\u6811\u3002 \u8bc1\u660e\uff1a\u4f7f\u7528\u5f52\u7eb3\u6cd5\uff0c\u8bc1\u660e\u4efb\u4f55\u65f6\u5019 K \u7b97\u6cd5\u9009\u62e9\u7684\u8fb9\u96c6\u90fd\u88ab\u67d0\u68f5 MST \u6240\u5305\u542b\u3002 \u57fa\u7840\uff1a\u5bf9\u4e8e\u7b97\u6cd5\u521a\u5f00\u59cb\u65f6\uff0c\u663e\u7136\u6210\u7acb\uff08\u6700\u5c0f\u751f\u6210\u6811\u5b58\u5728\uff09\u3002 \u5f52\u7eb3\uff1a\u5047\u8bbe\u67d0\u65f6\u523b\u6210\u7acb\uff0c\u5f53\u524d\u8fb9\u96c6\u4e3a F\uff0c\u4ee4 T \u4e3a\u8fd9\u68f5 MST\uff0c\u8003\u8651\u4e0b\u4e00\u6761\u52a0\u5165\u7684\u8fb9 e\u3002 \u5982\u679c \\(e\\) \u5c5e\u4e8e \\(T\\) \uff0c\u90a3\u4e48\u6210\u7acb\u3002 \u5426\u5219\uff0c \\(T+e\\) \u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u73af\uff0c\u8003\u8651\u8fd9\u4e2a\u73af\u4e0a\u4e0d\u5c5e\u4e8e \\(F\\) \u7684\u53e6\u4e00\u6761\u8fb9 \\(f\\) \uff08\u4e00\u5b9a\u53ea\u6709\u4e00\u6761\uff09\u3002 \u9996\u5148\uff0c \\(f\\) \u7684\u6743\u503c\u4e00\u5b9a\u4e0d\u4f1a\u6bd4 \\(e\\) \u5c0f\uff0c\u4e0d\u7136 \\(f\\) \u4f1a\u5728 \\(e\\) \u4e4b\u524d\u88ab\u9009\u53d6\u3002 \u7136\u540e\uff0c \\(f\\) \u7684\u6743\u503c\u4e00\u5b9a\u4e0d\u4f1a\u6bd4 e \u5927\uff0c\u4e0d\u7136 \\(T+e\u2212f\\) \u5c31\u662f\u4e00\u68f5\u6bd4 \\(T\\) \u8fd8\u4f18\u7684\u751f\u6210\u6811\u4e86\u3002 \u6240\u4ee5\uff0c \\(T+e\u2212f\\) \u5305\u542b\u4e86 \\(F\\) \uff0c\u5e76\u4e14\u4e5f\u662f\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5f52\u7eb3\u6210\u7acb\u3002","title":"2.1\u8bc1\u660e"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#22","text":"\uff08\u4ee5hdu1863\u4e3a\u4f8b\uff09 C++ #include <bits/stdc++.h> using namespace std ; const int N = 1e2 + 10 ; int fa [ N ]; int m , n ; struct edge { int u , v , w ; bool operator < ( const edge & a ) const { return this -> w < a . w ; } }; vector < edge > V ; void init () { for ( int i = 1 ; i <= m ; ++ i ) { fa [ i ] = i ; } V . clear (); } int find ( int x ) { while ( x != fa [ x ]) x = fa [ x ]; return x ; } void kruskal () { int ans = 0 ; int cnt = m ; for ( int i = 0 ; i < V . size (); ++ i ) { int u = V [ i ]. u ; int v = V [ i ]. v ; int w = V [ i ]. w ; u = find ( u ); v = find ( v ); if ( u != v ) { fa [ v ] = u ; ans += w ; cnt -- ; } } if ( cnt == 1 ) printf ( \"%d \\n \" , ans ); else printf ( \"? \\n \" ); } int main () { while ( ~ scanf ( \"%d%d\" , & n , & m ) && n ) { init (); for ( int i = 1 ; i <= n ; ++ i ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); V . push_back ({ u , v , w }); } sort ( V . begin (), V . end ()); kruskal (); } return 0 ; }","title":"2.2\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#prim","text":"Prim \u7b97\u6cd5\u662f\u53e6\u4e00\u79cd\u5e38\u89c1\u5e76\u4e14\u597d\u5199\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u4ece\u4e00\u4e2a\u7ed3\u70b9\u5f00\u59cb\uff0c\u4e0d\u65ad\u52a0\u70b9\uff08\u800c\u4e0d\u662f Kruskal \u7b97\u6cd5\u7684\u52a0\u8fb9\uff09\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6bcf\u6b21\u8981\u9009\u62e9\u8ddd\u79bb\u6700\u5c0f\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u4ee5\u53ca\u7528\u65b0\u7684\u8fb9\u66f4\u65b0\u5176\u4ed6\u7ed3\u70b9\u7684\u8ddd\u79bb\u3002 \u5176\u5b9e\u8ddf Dijkstra \u7b97\u6cd5\u4e00\u6837\uff0c\u6bcf\u6b21\u627e\u5230\u8ddd\u79bb\u6700\u5c0f\u7684\u4e00\u4e2a\u70b9\uff0c\u53ef\u4ee5\u66b4\u529b\u627e\u4e5f\u53ef\u4ee5\u7528\u5806\u7ef4\u62a4\u3002 \u5806\u4f18\u5316\u7684\u65b9\u5f0f\u7c7b\u4f3c Dijkstra \u7684\u5806\u4f18\u5316\uff0c\u4f46\u5982\u679c\u4f7f\u7528\u4e8c\u53c9\u5806\u7b49\u4e0d\u652f\u6301 O(1) decrease-key \u7684\u5806\uff0c\u590d\u6742\u5ea6\u5c31\u4e0d\u4f18\u4e8e Kruskal\uff0c\u5e38\u6570\u4e5f\u6bd4 Kruskal \u5927\u3002\u6240\u4ee5\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u4f7f\u7528 Kruskal \u7b97\u6cd5\uff0c\u5728\u7a20\u5bc6\u56fe\u5c24\u5176\u662f\u5b8c\u5168\u56fe\u4e0a\uff0c\u66b4\u529b Prim \u7684\u590d\u6742\u5ea6\u6bd4 Kruskal \u4f18\uff0c\u4f46 \u4e0d\u4e00\u5b9a \u5b9e\u9645\u8dd1\u5f97\u66f4\u5feb\u3002\u6240\u4ee5\u4e00\u822c\u4e0d\u7528prim\u7b97\u6cd5 \u5173\u4e8e\u5404\u79cd\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6 \u66b4\u529b\uff1a \\(O(n^2+m)\\) \u3002 \u4e8c\u53c9\u5806\uff1a \\(O((n+m)log_2n)\\) \u3002 Fib \u5806\uff1a \\(O(nlog\u2061_2n+m)\\) \u3002","title":"\u4e09\u3001Prim \u7b97\u6cd5"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#31","text":"\u4ece\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9\u5f00\u59cb\uff0c\u5c06\u7ed3\u70b9\u5206\u6210\u4e24\u7c7b\uff1a\u5df2\u52a0\u5165\u7684\uff0c\u672a\u52a0\u5165\u7684\u3002 \u6bcf\u6b21\u4ece\u672a\u52a0\u5165\u7684\u7ed3\u70b9\u4e2d\uff0c\u627e\u4e00\u4e2a\u4e0e\u5df2\u52a0\u5165\u7684\u7ed3\u70b9\u4e4b\u95f4\u8fb9\u6743\u6700\u5c0f\u503c\u6700\u5c0f\u7684\u7ed3\u70b9\u3002 \u7136\u540e\u5c06\u8fd9\u4e2a\u7ed3\u70b9\u52a0\u5165\uff0c\u5e76\u8fde\u4e0a\u90a3\u6761\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\u3002 \u91cd\u590d n\u22121 \u6b21\u5373\u53ef\u3002 \u8bc1\u660e\uff1a\u8fd8\u662f\u8bf4\u660e\u5728\u6bcf\u4e00\u6b65\uff0c\u90fd\u5b58\u5728\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u5305\u542b\u5df2\u9009\u8fb9\u96c6\u3002 \u57fa\u7840\uff1a\u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u663e\u7136\u6210\u7acb\u3002 \u5f52\u7eb3\uff1a\u5982\u679c\u67d0\u4e00\u6b65\u6210\u7acb\uff0c\u5f53\u524d\u8fb9\u96c6\u4e3a F\uff0c\u5c5e\u4e8e T \u8fd9\u68f5 MST\uff0c\u63a5\u4e0b\u6765\u8981\u52a0\u5165\u8fb9 e\u3002 \u5982\u679c e \u5c5e\u4e8e T\uff0c\u90a3\u4e48\u6210\u7acb\u3002 \u5426\u5219\u8003\u8651 T+e \u4e2d\u73af\u4e0a\u53e6\u4e00\u6761\u53ef\u4ee5\u52a0\u5165\u5f53\u524d\u8fb9\u96c6\u7684\u8fb9 f\u3002 \u9996\u5148\uff0cf \u7684\u6743\u503c\u4e00\u5b9a\u4e0d\u5c0f\u4e8e e \u7684\u6743\u503c\uff0c\u5426\u5219\u5c31\u4f1a\u9009\u62e9 f \u800c\u4e0d\u662f e \u4e86\u3002 \u7136\u540e\uff0cf \u7684\u6743\u503c\u4e00\u5b9a\u4e0d\u5927\u4e8e e \u7684\u6743\u503c\uff0c\u5426\u5219 T+e\u2212f \u5c31\u662f\u4e00\u68f5\u66f4\u5c0f\u7684\u751f\u6210\u6811\u4e86\u3002 \u56e0\u6b64\uff0ce \u548c f \u7684\u6743\u503c\u76f8\u7b49\uff0cT+e\u2212f \u4e5f\u662f\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4e14\u5305\u542b\u4e86 F\u3002","title":"3.1\u8bc1\u660e"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#32","text":"\uff08\u4ee5hdu1863\u4e3a\u4f8b\uff09 C++ #include <cstdio> #include <cstring> #include <algorithm> #include <queue> #include <vector> using namespace std ; #define P pair<int, int> #define INF 0x3f3f3f3f const int N = 1005 ; int mp [ N ][ N ]; bool vis [ N ]; int dis [ N ]; int n , m ; int prim ( int s ) { for ( int i = 1 ; i <= n ; ++ i ) { dis [ i ] = INF ; vis [ i ] = false ; } dis [ s ] = 0 ; int ans = 0 ; while ( true ) { int v = -1 ; for ( int u = 1 ; u <= n ; ++ u ) { if ( ! vis [ u ] && ( v == -1 || dis [ u ] < dis [ v ])) { v = u ; } } if ( v == -1 ) break ; vis [ v ] = true ; ans += dis [ v ]; for ( int u = 1 ; u <= n ; ++ u ) { dis [ u ] = min ( dis [ u ], mp [ u ][ v ]); } } return ans ; } int main () { int u , v , cost ; while ( ~ scanf ( \"%d%d\" , & m , & n ) && m ) { memset ( mp , INF , sizeof mp ); for ( int i = 0 ; i < m ; ++ i ) { scanf ( \"%d%d%d\" , & u , & v , & cost ); if ( mp [ u ][ v ] > cost ) mp [ u ][ v ] = mp [ v ][ u ] = cost ; } int ans = prim ( 1 ); bool is = true ; if ( ans < INF ) { printf ( \"%d \\n \" , ans ); } else { puts ( \"?\" ); } } return 0 ; }","title":"3.2\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#_4","text":"\u9898\u76ee\u8fde\u63a5 \u9898\u76ee\u540d https://acm.dingbacode.com/showproblem.php?pid=1863 \u7545\u901a\u5de5\u7a0b https://acm.dingbacode.com/showproblem.php?pid=1875 \u7545\u901a\u5de5\u7a0b\u518d\u7eed https://acm.dingbacode.com/showproblem.php?pid=1879 \u7ee7\u7eed\u7545\u901a\u5de5\u7a0b https://www.luogu.com.cn/problem/P3366 P3366 \u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811 https://www.luogu.com.cn/problem/P2872 P2872 [USACO07DEC]Building Roads S https://www.luogu.com.cn/problem/P1195 P1195 \u53e3\u888b\u7684\u5929\u7a7a https://www.luogu.com.cn/problem/P1194 P1194 \u4e70\u793c\u7269 https://www.luogu.com.cn/problem/P2121 P2121 \u62c6\u5730\u6bef https://www.luogu.com.cn/problem/P1396 P1396 \u8425\u6551 https://www.luogu.com.cn/problem/P1991 P1991 \u65e0\u7ebf\u901a\u8baf\u7f51 https://www.luogu.com.cn/problem/P4047 P4047 [JSOI2010]\u90e8\u843d\u5212\u5206 https://acm.dingbacode.com/showproblem.php?pid=1598 find the most comfortable road","title":"\u56db\u3001\u7ec3\u4e60\u9898\u76ee"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/","text":"\u6700\u77ed\u8def \u00b6 \u524d\u8a00 \u00b6 \u5982\u679c\u4f60\u5bf9\u56fe\u8bba\u76f8\u5173\u77e5\u8bc6\u4e00\u70b9\u4e5f\u6ca1\u6709\uff0c\u90a3\u4e48\u5efa\u8bae\u60a8\u5148\u53bb\u4e86\u89e3\u8fd9\u4e9b\u77e5\u8bc6\uff1a https://acmer.blog.csdn.net/article/details/122310835 \uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5feb\u4e50\u7684\u5b66\u4e60\u6700\u77ed\u8def\u7b97\u6cd5\u5566 \u89c6\u9891\u4e2d\u7ed8\u56fe\u8f6f\u4ef6\uff1a https://csacademy.com/app/graph_editor/ \u914d\u5957\u8bb2\u89e3\u89c6\u9891\uff1a https://www.bilibili.com/video/BV1Fa411C7wX/ \u5982\u679c\u54ea\u91cc\u8bb2\u7684\u6709\u95ee\u9898\u6b22\u8fce\u5728\u8bc4\u8bba\u533a\u6307\u51fa\uff0c\u611f\u8c22\u652f\u6301\uff01 \u4e00\u3001Floyd\u7b97\u6cd5 \u00b6 1.1\u7b80\u4ecb \u00b6 Floyd\u7b97\u6cd5\u7b97\u662f\u6700\u7b80\u5355\u7684\u7b97\u6cd5\uff0c\u6ca1\u6709\u4e4b\u4e00\u3002\u9002\u7528\u4e8e\u4efb\u4f55\u56fe \u4e0d\u7ba1\u6709\u5411\u65e0\u5411\uff0c\u8fb9\u6743\u6b63\u8d1f\uff0c\u4f46\u662f\u6700\u77ed\u8def\u5fc5\u987b\u5b58\u5728\u3002 \u57fa\u4e8e\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3 1.2\u590d\u6742\u5ea6 \u00b6 1.2.1\u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \\(O(N^3)\\) 1.2.2\u7a7a\u95f4\u590d\u6742\u5ea6 \u00b6 \\(O(N^2)\\) 1.3\u4f18\u7f3a\u70b9 \u00b6 1.3.1\u4f18\u70b9 \u00b6 \u5e38\u6570\u5c0f\uff0c \u5bb9\u6613\u5b9e\u73b0 \uff0c\u601d\u8def\u7b80\u5355\uff0c\u80fd\u5904\u7406\u5927\u90e8\u5206\u56fe 1.3.2\u7f3a\u70b9 \u00b6 \u590d\u6742\u5ea6\u8f83\u9ad8\u3001\u4e0d\u80fd\u5904\u7406\u8d1f\u73af\u56fe 1.4\u7b97\u6cd5\u539f\u7406 \u00b6 \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u4e09\u7ef4\u6570\u7ec4 \\(f[k][u][v]\\) \u8868\u793a\u7684\u662f\u5141\u8bb8\u7ecf\u8fc7 \\([1,k]\\) \u7684\u70b9\u7684 \\(u\\) \u5230 \\(v\\) \u7684\u6700\u5c0f\u8ddd\u79bb\uff0c\u6362\u53e5\u8bdd\u8bf4\u4ece \\(1\\) \u5230 \\(k\\) \u8fd9\u4e9b\u70b9\u53ef\u4ee5\u4f5c\u4e3a \\(u\\) \u5230 \\(v\\) \u7684 \u4e2d\u95f4\u8282\u70b9 \uff0c\u5f53\u7136\u6ca1\u4e5f\u53ef\u4ee5\u4e0d\u7ecf\u8fc7\uff0c\u5f88\u663e\u7136\u6211\u4eec\u5982\u679c\u8981\u6c42\u89e3 \\(u\\) \u5230 \\(v\\) \u7684\u6700\u5c0f\u8ddd\u79bb\u90a3\u4e48\u5c31\u662f \\(f[n][u][v]\\) \uff08\u5047\u8bbe\u5f53\u524d\u7684\u56fe\u4e2d\u6709n\u4e2a\u70b9\u7684\u8bdd\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u600e\u4e48\u6765\u7ef4\u62a4\u8fd9\u4e2a\u5173\u7cfb\u5462\uff0c\u9996\u5148\u521d\u59cb\u5316\u6765\u8bf4\uff0c \\(f[0][u][v]\\) \u5148\u521d\u59cb\u5316\u4e3a INF \uff0c\u5982\u679c\u6709\u8fb9\u8fde\u63a5\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u53d6\u4e00\u4e2a min \u5c31\u597d\uff0c\u8fd8\u6709\u5c31\u662f\u5982\u679cu\u548cv\u76f8\u7b49\u7684\u8bdd\u5e94\u8be5\u521d\u59cb\u5316\u4e3a0\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u63a8\u51fa\u8fd9\u4e2a\u72b6\u6001\u662f\u5982\u4f55\u8f6c\u79fb\u7684\uff1a \\[f[k][u][v] = min(f[k-1][u][v],f[k-1][u][k] + f[k-1][k][v])\\] \u6211\u4eec\u5bf9\u7ecf\u8fc7 k \u70b9\u548c\u4e0d\u7ecf\u8fc7 k \u70b9\u53bb\u4e00\u4e2a min \uff0c\u90a3\u4e48\u6211\u4eec\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5c31\u6784\u9020\u597d\u5566\uff0c\u4e0b\u9762\u7ed9\u51fa\u4ee3\u7801 C++ void Floyd (){ for ( int k = 1 ; k <= n ; ++ k ) for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) f [ k ][ i ][ j ] = min ( f [ k -1 ][ i ][ j ], f [ k -1 ][ i ][ k ] + f [ k -1 ][ k ][ j ]); } \u6211\u4eec\u53d1\u73b0\u6211\u4eec\u8fd9\u4e2a\u7b2c\u4e00\u7ef4\u7684k\u5176\u5b9e\u6700\u591a\u80fd\u7528\u5230\u5f53\u524d\u8fd9\u4e00\u5c42\u4ee5\u53ca\u4e0a\u4e00\u5c42\u7684\u72b6\u6001\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \u6eda\u52a8\u6570\u7ec4 \u4f18\u5316\u5c06\u5176\u53bb\u6389\uff0c\u90a3\u4e48\u65b0\u7684\u4ee3\u7801\u5373\u4e3a\uff1a C++ void Floyd (){ for ( int k = 1 ; k <= n ; ++ k ) for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) f [ i ][ j ] = min ( f [ i ][ j ], f [ i ][ k ] + f [ k ][ j ]); } \u5173\u4e8e\u7b2c\u4e00\u7ef4\u5bf9\u7ed3\u679c\u65e0\u5f71\u54cd\u7684\u8bc1\u660e : \u6211\u4eec\u6ce8\u610f\u5230\u5982\u679c\u653e\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7b2c\u4e00\u7ef4 k \u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c f[x][k] \u4e0e f[k][y] \u5728\u67d0\u4e00\u884c\u548c\u67d0\u4e00\u5217\u3002\u800c f[x][y] \u5219\u662f\u8be5\u884c\u548c\u8be5\u5217\u7684\u4ea4\u53c9\u70b9\u4e0a\u7684\u5143\u7d20\u3002 \u73b0\u5728\u6211\u4eec\u9700\u8981\u8bc1\u660e\u5c06 f[k][x][y] \u76f4\u63a5\u5728\u539f\u5730\u66f4\u6539\u4e5f\u4e0d\u4f1a\u66f4\u6539\u5b83\u7684\u7ed3\u679c\uff1a\u6211\u4eec\u6ce8\u610f\u5230 f[k][x][y] \u7684\u6db5\u4e49\u662f\u7b2c\u4e00\u7ef4\u4e3a k-1 \u8fd9\u4e00\u884c\u548c\u8fd9\u4e00\u5217\u7684\u6240\u6709\u5143\u7d20\u7684\u6700\u5c0f\u503c\uff0c\u5305\u542b\u4e86 f[k-1][x][y] \uff0c\u90a3\u4e48\u6211\u5728\u539f\u5730\u8fdb\u884c\u66f4\u6539\u4e5f\u4e0d\u4f1a\u6539\u53d8\u6700\u5c0f\u503c\u7684\u503c\uff0c\u56e0\u4e3a\u5982\u679c\u5c06\u8be5\u4e09\u7ef4\u77e9\u9635\u538b\u7f29\u4e3a\u4e8c\u7ef4\uff0c\u5219\u6240\u6c42\u7ed3\u679c f[x][y] \u4e00\u5f00\u59cb\u5373\u4e3a\u539f f[k-1][x][y] \u7684\u503c\uff0c\u6700\u540e\u4f9d\u7136\u4f1a\u6210\u4e3a\u8be5\u884c\u548c\u8be5\u5217\u7684\u6700\u5c0f\u503c\u3002 \u6545\u53ef\u4ee5\u538b\u7f29\u3002 \u6a21\u677f\u9898\uff1a \u591a\u6e90\u6700\u77ed\u8def \u4ee3\u7801\u5b9e\u73b0 \u00b6 C++ #include <bits/stdc++.h> using namespace std ; const int N = 2e2 + 10 ; const int INF = 0x3f3f3f3f ; int n , m , k ; int f [ N ][ N ]; void Floyd (){ for ( int k = 1 ; k <= n ; ++ k ) for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) f [ i ][ j ] = min ( f [ i ][ j ], f [ i ][ k ] + f [ k ][ j ]); } int main () { cin >> n >> m >> k ; int u , v , w ; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) f [ i ][ j ] = i == j ? 0 : INF ; for ( int i = 1 ; i <= m ; ++ i ){ cin >> u >> v >> w ; f [ u ][ v ] = min ( f [ u ][ v ], w ); } Floyd (); while ( k -- ){ cin >> u >> v ; if ( f [ u ][ v ] > INF / 2 ) cout << \"impossible\" << endl ; else cout << f [ u ][ v ] << endl ; } return 0 ; } \u4e8c\u3001Bellman-Ford \u7b97\u6cd5 \u00b6 2.1\u7b80\u4ecb \u00b6 \\(Bellman-Ford\\) \u7b97\u6cd5\u662f\u4e00\u79cd\u57fa\u4e8e\u677e\u5f1b\uff08 \\(relax\\) \uff09\u64cd\u4f5c\u7684\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u53ef\u4ee5\u6c42\u51fa\u6709\u8d1f\u6743\u7684\u56fe\u7684\u6700\u77ed\u8def\uff0c\u5e76\u53ef\u4ee5\u5bf9\u6700\u77ed\u8def\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u8fdb\u884c\u5224\u65ad\u3002\u5f53\u7136\u4f60\u53ef\u80fd\u6ca1\u542c\u8fc7\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u4f46\u662f\u5e94\u8be5\u542c\u8fc7\u53e6\u4e00\u4e2a\u7b97\u6cd5 \\(SPFA\\) \u7b97\u6cd5\uff0c \\(SPFA\\) \u7b97\u6cd5\u5176\u5b9e\u5c31\u662f\u52a0\u5165\u4e86\u961f\u5217\u4f18\u5316\u7684 \\(Bellman-Ford\\) 2.2\u590d\u6742\u5ea6 \u00b6 2.2.1\u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \\(O(NM)\\) 2.2.2\u7a7a\u95f4\u590d\u6742\u5ea6 \u00b6 \u90bb\u63a5\u77e9\u9635\uff1a \\(O(N^2)\\) \u90bb\u63a5\u8868\uff1a \\(O(M)\\) 2.3\u4f18\u7f3a\u70b9 \u00b6 2.3.1\u4f18\u70b9 \u00b6 \u80fd\u591f\u5904\u7406\u8d1f\u6743\u56fe\u3001\u80fd\u5904\u7406\u8fb9\u6570\u9650\u5236\u7684\u6700\u77ed\u8def 2.3.2\u7f3a\u70b9 \u00b6 \u590d\u6742\u5ea6\u4e0d\u592a\u7406\u60f3\uff0c\u5f88\u5bb9\u6613\u88ab\u5361 2.4\u7b97\u6cd5\u539f\u7406 \u00b6 2.4.1\u677e\u5f1b\u64cd\u4f5c \u00b6 \u5728\u4ecb\u7ecd\u8be5\u7b97\u6cd5\u524d\uff0c\u5148\u6765\u4ecb\u7ecd\u4e00\u4e0b \u677e\u5f1b\u64cd\u4f5c \uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8fb9 \\((u,v)\\) \uff0c\u677e\u5f1b\u64cd\u4f5c\u5bf9\u5e94\u4e0b\u9762\u7684\u5f0f\u5b50\uff1a \\(dis[v]=min(dis[v],dis[u]+w(u,v))\\) \u3002\u4e5f\u5c31\u662f\u6211\u4eec\u5c06\u6e90\u70b9\u5230v\u70b9\u7684\u8ddd\u79bb\u66f4\u65b0\u7684\u4e00\u4e2a\u64cd\u4f5c \u4e5f\u5c31\u662f\u5f00\u59cb\u53ef\u80fd\u6e90\u70b9 \\(S\\) \u5230 \\(v\\) \u7684\u8def\u5f84\u4e3a \\(S->v\\) \uff0c\u5982\u679c\u8bf4\u7ecf\u8fc7 \\(u\\) \u70b9\u540e\u518d\u5230 \\(v\\) \u7684\u6743\u503c\u6bd4\u76f4\u63a5\u5230v\u5c0f\u90a3\u4e48\u6211\u4eec\u5c31\u66f4\u65b0\u4e00\u4e0b\u8def\u5f84\u6700\u5c0f\u503c\uff0c\u8fd9\u5c31\u662f\u677e\u5f1b\u64cd\u4f5c 2.4.2 \u5177\u4f53\u6d41\u7a0b \u00b6 Bellman\u7b97\u6cd5\u8981\u505a\u7684\u4e8b\u5c31\u662f\u5bf9\u4e8e\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\uff0c\u6211\u4eec\u90fd\u8fdb\u884c\u4e00\u6b21\u677e\u5f1b\u64cd\u4f5c\uff0c\u90a3\u4e48\u5b8c\u6210\u8fd9\u6574\u4e2a\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u5927\u6982\u5728 \\(O(M)\\) \uff0c\u7136\u540e\u6211\u4eec\u5c31\u4e00\u76f4\u5faa\u73af\u7684\u8fdb\u884c\u8fd9\u4e2a\u64cd\u4f5c\uff0c \u76f4\u5230\u6211\u4eec\u4e0d\u80fd\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c \u4e3a\u6b62\uff0c\u5c31\u8bf4\u660e\u6211\u4eec\u7684\u5355\u6e90\u6700\u77ed\u8def\u4ee5\u53ca\u5168\u90e8\u6c42\u5b8c\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u591a\u5c11\u6b21\u8fd9\u6837\u7684\u5b8c\u6574\u64cd\u4f5c\u5462\uff0c \u5728\u6700\u77ed\u8def\u5b58\u5728\u7684\u60c5\u51b5\u4e0b \uff0c\u7531\u4e8e\u4e00\u6b21\u677e\u5f1b\u64cd\u4f5c\u4f1a\u4f7f\u6700\u77ed\u8def\u7684\u8fb9\u6570\u81f3\u5c11+1 \uff0c\u800c\u6700\u77ed\u8def\u7684\u8fb9\u6570\u6700\u591a\u4e3a \\(N-1\\) \uff0c\u56e0\u6b64\u6574\u4e2a\u7b97\u6cd5\u6700\u591a\u6267\u884c \\(N-1\\) \u8f6e\u677e\u5f1b\u64cd\u4f5c\u3002\u6545\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O (NM)\\) \u3002 2.4.3 \u8d1f\u73af\u95ee\u9898 \u00b6 \u4e0a\u9762\u63d0\u5230\u4e86\u6211\u4eec\u5728\u6c42\u6700\u77ed\u8def\u5b58\u5728\u7684\u60c5\u51b5\u6700\u591a\u6267\u884c \\(N-1\\) \u8f6e\u677e\u5f1b\u64cd\u4f5c\uff0c\u5982\u679c\u6570\u636e\u4e2d \u51fa\u73b0\u4e86\u8d1f\u73af \uff0c\u90a3\u4e48\u6211\u4eec\u5728 \u7b2cN\u8f6e \u64cd\u4f5c\u7684\u65f6\u5019\u4e5f\u4f1a\u66f4\u65b0 \u6ce8\u610f\u4e00\u70b9 \uff1a \u4ee5 \\(S\\) \u70b9\u4e3a\u6e90\u70b9\u8dd1 Bellman-Ford \u7b97\u6cd5\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u7ed9\u51fa\u5b58\u5728\u8d1f\u73af\u7684\u7ed3\u679c\uff0c\u53ea\u80fd\u8bf4\u660e\u4ece \\(S\\) \u70b9\u51fa\u53d1\u4e0d\u80fd\u62b5\u8fbe\u4e00\u4e2a\u8d1f\u73af\uff0c\u800c\u4e0d\u80fd\u8bf4\u660e\u56fe\u4e0a\u4e0d\u5b58\u5728\u8d1f\u73af\u3002 \u56e0\u4e3a\u8fd9\u4e2a\u56fe\u53ef\u80fd\u662f\u4e0d\u8fde\u901a\u7684 \uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e0d\u8fde\u901a\u7684\u56fe\u6211\u4eec\u5e94\u8be5\u5efa\u4e00\u4e2a**\u865a\u70b9**\u6216\u8005\u79f0\u4e4b\u4e3a \u8d85\u7ea7\u6e90\u70b9 \uff0c\u8ba9\u8fd9\u4e2a\u70b9\u8fde\u5411\u6bcf\u4e00\u4e2a\u5176\u4ed6\u7684\u70b9\u5e76\u4e14\u6743\u503c\u4e3a0\uff0c\u7136\u540e\u518d\u6765\u8dd1 \\(bellman\\_ford\\) 2.4.4 \u7b97\u6cd5\u56fe\u89e3 \u00b6 \u7b2cx\u8f6e\u677e\u5f1b\u64cd\u4f5c \u672c\u8f6e\u677e\u5f1b\u64cd\u4f5c 1 dis[2] =1,dis[3]=4,dis[4]=6 2 dis[4]=3 3 \u65e0\u64cd\u4f5c \u6a21\u677f\u9898\uff1a https://ac.nowcoder.com/acm/contest/27274/E 2.5\u4ee3\u7801\u5b9e\u73b0 \u00b6 C++ #include <algorithm> #include <cstring> #include <iostream> #include <cstdio> #include <vector> const int INF = 0x3f3f3f3f ; const int N = 10000 + 10 ; using namespace std ; struct Node { int u , v , w ; }; vector < Node > E ; int n , m , s , t ; int dis [ N ]; void bellman_ford ( int s ){ for ( int i = 1 ; i <= n ; ++ i ) dis [ i ] = INF ; dis [ s ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 0 ; j < 2 * m ; ++ j ) { int u = E [ j ]. u , v = E [ j ]. v , w = E [ j ]. w ; if ( dis [ v ] > dis [ u ] + w ) dis [ v ] = dis [ u ] + w ; } } int main () { cin >> n >> m >> s >> t ; int u , v , w ; for ( int i = 1 ; i <= m ; ++ i ) { cin >> u >> v >> w ; E . push_back ({ u , v , w }); E . push_back ({ v , u , w }); } bellman_ford ( s ); if ( dis [ t ] >= INF / 2 ) cout << \"-1\" << endl ; else cout << dis [ t ] << endl ; } 2.6\u5224\u8d1f\u73af\u5b9e\u73b0 \u00b6 \u5982\u679c\u6211\u4eec\u53d1\u73b0\u7b2c \\(N\\) \u8f6e\u64cd\u4f5c\u4e5f\u66f4\u65b0\u4e86\u90a3\u4e48\u8bf4\u660e\u5b58\u5728**\u8d1f\u6743\u56de\u8def** C++ #include <iostream> #include <algorithm> #include <cstring> using namespace std ; #define INF 0x3f3f3f3f const int N = 2e6 + 10 ; int n , m , q , k ; struct Edge { int u , v , w ; } E [ N ]; int dis [ N ]; bool bellman_ford (){ for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 0 ; j < m ; ++ j ) { int u = E [ j ]. u , v = E [ j ]. v , w = E [ j ]. w ; if ( dis [ v ] > dis [ u ] + w ){ dis [ v ] = dis [ u ] + w ; if ( i == n ) return true ; } } return false ; } int main () { cin >> n >> m ; for ( int i = 0 ; i < m ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; E [ i ] = { u , v , w }; } bool k = bellman_ford (); if ( k ) cout << \"Yes\" << endl ; else cout << \"No\" << endl ; return 0 ; } \u4e09\u3001SPFA \u00b6 3.1\u7b80\u4ecb \u00b6 \u5173\u4e8eSPFA\uff0c\u5b83\u6b7b\u4e86 3.2\u590d\u6742\u5ea6 \u00b6 3.2.1\u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u7406\u60f3\u590d\u6742\u5ea6\u4e3a \\(O(KM)\\) \uff0c\u8fd9\u91cc\u7684 \\(K\\) \u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u5e38\u6570 \u6700\u574f\u4e3a \\(O(NM)\\) \u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\u662f\u8dd1\u4e0d\u5230\u8fd9\u4e48\u591a\uff08\u9664\u975e\u51fa\u9898\u4eba\u5361SPFA\uff09 3.2.2\u7a7a\u95f4\u590d\u6742\u5ea6 \u00b6 \u90bb\u63a5\u8868\uff1a \\(O(M)\\) \u90bb\u63a5\u77e9\u9635\uff1a \\(O(N^2)\\) 3.3\u4f18\u7f3a\u70b9 \u00b6 3.3.1\u4f18\u70b9 \u00b6 \u597d\u5199\u3001\u6548\u7387\u633a\u5feb\uff08\u4e00\u822c\u6765\u8bf4\u5373\u4e0d\u88ab\u5361\u7684\u8bdd\uff09\uff0c\u80fd\u5904\u7406\u51e0\u4e4e\u6240\u6709\u7c7b\u578b\u7684\u56fe 3.3.2\u7f3a\u70b9 \u00b6 \u5bb9\u6613\u88ab**\u7f51\u683c\u83ca\u82b1\u56fe**\u5361\u6210\u50bbb 3.4\u7b97\u6cd5\u539f\u7406 \u00b6 3.4.1\u601d\u60f3 \u00b6 \u5176\u5b9e \\(SPFA\\) \u7b97\u6cd5\u5c31\u662f \\(bllman\\_ford\\) \u7b97\u6cd5\u52a0\u4e0a\u4e86 \u961f\u5217\u4f18\u5316 \uff0c\u6211\u4eec\u5728\u4e0a\u9762\u7684 \\(bellman\\_ford\\) \u7b97\u6cd5\u80fd\u77e5\u9053\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u5c06\u6bcf\u4e00\u4e2a\u8fb9\u90fd\u677e\u5f1b\u4e86 \\(N-1\\) \u6b21\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u6ca1\u5fc5\u8981\u677e\u5f1b\u6bcf\u4e00\u4e2a\u70b9\uff0c\u56e0\u4e3a\u6709\u4e9b\u70b9\u5b9e\u9645\u4e0a\u662f\u4e0d\u7528\u677e\u5f1b\u592a\u591a\u6216\u8005\u8bf4\u4e0d\u7528\u677e\u5f1b\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5e0c\u671b\u53bb\u6389\u4e00\u4e9b \u65e0\u7528\u7684\u677e\u5f1b\u64cd\u4f5c \uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u7528\u961f\u5217\u6765\u7ef4\u62a4 \u54ea\u4e9b\u70b9\u53ef\u80fd\u4f1a\u9700\u8981\u677e\u5f1b\u64cd\u4f5c \uff0c\u8fd9\u6837\u5c31\u80fd\u53ea\u8bbf\u95ee \u5fc5\u8981\u7684 \u8fb9\u4e86\u3002\u540c\u6837\u7684\u7531\u4e8eSPFA\u662f\u961f\u5217\u4f18\u5316\u7684 \\(bellman\\_ford\\) \u90a3\u4e48\u540c\u6837\u80fd\u5904\u7406 \u8d1f\u6743\u56de\u8def \u7684\u56fe tips\uff1a \u867d\u7136\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b \\(SPFA\\) \u8dd1\u5f97\u5f88\u5feb\uff0c\u4f46\u5176\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(NM)\\) \uff0c\u5c06\u5176\u5361\u5230\u8fd9\u4e2a\u590d\u6742\u5ea6\u4e5f\u662f\u4e0d\u96be\u7684\uff0c\u6240\u4ee5\u8003\u8bd5\u65f6\u8981\u8c28\u614e\u4f7f\u7528\uff08\u5728\u6ca1\u6709\u8d1f\u6743\u8fb9\u65f6\u6700\u597d\u4f7f\u7528 \\(Dijkstra\\) \u7b97\u6cd5\uff0c\u5728\u6709\u8d1f\u6743\u8fb9\u4e14\u9898\u76ee\u4e2d\u7684\u56fe\u6ca1\u6709\u7279\u6b8a\u6027\u8d28\u65f6\uff0c\u82e5 \\(SPFA\\) \u662f\u6807\u7b97\u7684\u4e00\u90e8\u5206\uff0c\u9898\u76ee\u4e0d\u5e94\u5f53\u7ed9\u51fa \\(Bellman-Ford\\) \u7b97\u6cd5\u65e0\u6cd5\u901a\u8fc7\u7684\u6570\u636e\u8303\u56f4\uff09\u3002 3.4.2\u6d41\u7a0b \u00b6 \u7528dis\u6570\u7ec4\u8bb0\u5f55\u6e90\u70b9\u5230\u6709\u5411\u56fe\u4e0a\u4efb\u610f\u4e00\u70b9\u8ddd\u79bb\uff0c\u5176\u4e2d\u6e90\u70b9\u5230\u81ea\u8eab\u8ddd\u79bb\u4e3a0\uff0c\u5230\u5176\u4ed6\u70b9\u8ddd\u79bb\u4e3aINF\u3002\u5c06\u6e90\u70b9\u5165\u961f\uff0c\u5e76\u91cd\u590d\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u961f\u9996t\u51fa\u961f\uff0c \u5e76\u5c06t\u6807\u8bb0\u4e3a\u6ca1\u6709\u8bbf\u95ee\u8fc7 \uff0c\u65b9\u4fbf\u4e0b\u6b21\u5165\u961f\u677e\u5f1b \u904d\u5386\u6240\u6709\u4ee5\u961f\u9996\u4e3a\u8d77\u70b9\u7684\u6709\u5411\u8fb9 \\((t,j)\\) \uff0c\u82e5 \\(dis[j] > dis[t] + w(t,j)\\) \uff0c\u5219\u66f4\u65b0 \\(dis[j]\\) \u5982\u679c\u70b9 \\(j\\) \u4e0d\u5728\u961f\u5217\u4e2d \uff0c\u5219 \\(j\\) \u5165\u961f\uff0c \u5e76\u5c06j\u6807\u8bb0\u4e3a\u8bbf\u95ee\u8fc7 \u82e5\u961f\u5217\u4e3a\u7a7a \uff0c\u8df3\u51fa\u5faa\u73af\uff1b\u5426\u5219\u6267\u884c\u7b2c\u4e00\u6b65 \u6211\u4eec\u4f1a\u53d1\u73b0SPFA\u7684\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u548cBFS\u662f\u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u56fe\u662f \u968f\u673a\u751f\u6210 \u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(KM) \uff08K\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e2a\u5e38\u6570\uff0cm\u4e3a\u8fb9\u6570\uff0cn\u4e3a\u70b9\u6570\uff09\u4f46\u662f\u5b9e\u9645\u4e0aSPFA\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u662f O(NM) \uff0c\u53ef\u4ee5\u6784\u9020\u51fa\u5361SPFA\u7684\u6570\u636e\uff0c\u8ba9SPFA\u8d85\u65f6\u3002\u6240\u4ee5\u4f7f\u7528 \\(SPFA\\) \u524d\u4e00\u5b9a\u8981\u4e09\u601d 3.4.3\u7b97\u6cd5\u56fe\u89e3 \u00b6 \u4e0d\u5728\u961f\u5217\u7684\u5143\u7d20 \u5728\u961f\u5217\u7684\u5143\u7d20 \u5f53\u524d\u677e\u5f1b\u64cd\u4f5c \\(\\{2,3,4 \\}\\) \\(\\{ 1\\}\\) \\(dis[3]=4,dis[2]=2,dis[4]=6\\) \\(\\{1 \\}\\) \\(\\{2,3,4 \\}\\) dis[4]=3 \\(\\{1,2 \\}\\) \\(\\{3,4 \\}\\) \u65e0\u64cd\u4f5c \\(\\{1,2,3 \\}\\) \\(\\{4 \\}\\) \u65e0\u64cd\u4f5c \\(\\{1,2,3,4 \\}\\) \\(\\{\\varnothing \\}\\) \u65e0\u64cd\u4f5c 3.5bellman-ford\u7684\u5176\u4ed6\u4f18\u5316 \u00b6 \u9664\u4e86\u961f\u5217\u4f18\u5316\uff08SPFA\uff09\u4e4b\u5916\uff0cBellman-Ford \u8fd8\u6709\u5176\u4ed6\u5f62\u5f0f\u7684\u4f18\u5316\uff0c\u8fd9\u4e9b\u4f18\u5316\u5728\u90e8\u5206\u56fe\u4e0a\u6548\u679c\u660e\u663e\uff0c\u4f46\u5728\u67d0\u4e9b\u7279\u6b8a\u56fe\u4e0a\uff0c\u6700\u574f\u590d\u6742\u5ea6\u53ef\u80fd\u8fbe\u5230\u6307\u6570\u7ea7\u3002 \u5806\u4f18\u5316\uff1a\u5c06\u961f\u5217\u6362\u6210\u5806\uff0c\u4e0e Dijkstra \u7684\u533a\u522b\u662f\u5141\u8bb8\u4e00\u4e2a\u70b9\u591a\u6b21\u5165\u961f\u3002 \u5728\u6709\u8d1f\u6743\u8fb9\u7684\u56fe\u53ef\u80fd\u88ab\u5361\u6210\u6307\u6570\u7ea7\u590d\u6742\u5ea6 \u3002 \u6808\u4f18\u5316\uff1a\u5c06\u961f\u5217\u6362\u6210\u6808\uff08\u5373\u5c06\u539f\u6765\u7684 BFS \u8fc7\u7a0b\u53d8\u6210 DFS\uff09\uff0c \u5728\u5bfb\u627e\u8d1f\u73af\u65f6\u53ef\u80fd\u5177\u6709\u66f4\u9ad8\u6548\u7387\uff0c\u4f46\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u4e3a\u6307\u6570\u7ea7 \u3002 \\(LLL\\) \u4f18\u5316\uff1a\u5c06\u666e\u901a\u961f\u5217\u6362\u6210\u53cc\u7aef\u961f\u5217\uff0c \u6bcf\u6b21\u5c06\u5165\u961f\u7ed3\u70b9\u8ddd\u79bb\u548c\u961f\u5185\u8ddd\u79bb\u5e73\u5747\u503c\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u5927\u5219\u63d2\u5165\u81f3\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996 \u3002 \\(SLF\\) \u4f18\u5316\uff1a\u5c06\u666e\u901a\u961f\u5217\u6362\u6210\u53cc\u7aef\u961f\u5217\uff0c \u6bcf\u6b21\u5c06\u5165\u961f\u7ed3\u70b9\u8ddd\u79bb\u548c\u961f\u9996\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u5927\u5219\u63d2\u5165\u81f3\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996 \u3002 \\(D\u00b4Esopo-Pape\\) \u7b97\u6cd5\uff1a\u5c06\u666e\u901a\u961f\u5217\u6362\u6210\u53cc\u7aef\u961f\u5217\uff0c \u5982\u679c\u4e00\u4e2a\u8282\u70b9\u4e4b\u524d\u6ca1\u6709\u5165\u961f\uff0c\u5219\u5c06\u5176\u63d2\u5165\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996 \u3002 \u65e2\u7136\u6709\u4e86\u4f18\u5316\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709\u76f8\u5e94\u7684\u5361\u7684\u65b9\u6cd5\uff0c\u5177\u4f53\u8bf7\u770b\u8fd9\u4e00\u7bc7\u56de\u7b54\uff1a https://www.zhihu.com/question/292283275/answer/484871888 \u6a21\u677f\u9898\uff1a https://ac.nowcoder.com/acm/contest/27274/E 3.6 SPFA\u6700\u77ed\u8def\u4ee3\u7801\u5b9e\u73b0 \u00b6 C++ #include <algorithm> #include <cstring> #include <iostream> #include <cstdio> #include <vector> #include <queue> const int INF = 0x3f3f3f3f ; const int N = 10000 + 10 ; using namespace std ; struct Node { int v , w ; }; vector < Node > E [ N ]; int n , m , s , t ; int dis [ N ]; bool vis [ N ]; void SPFA ( int s ){ for ( int i = 1 ; i <= n ; ++ i ) vis [ i ] = false , dis [ i ] = INF ; queue < int > que ; que . push ( s ); dis [ s ] = 0 , vis [ s ] = true ; while ( ! que . empty ()){ int t = que . front (); que . pop (); vis [ t ] = false ; for ( int i = 0 , l = E [ t ]. size (); i < l ; ++ i ) { int j = E [ t ][ i ]. v ; int k = E [ t ][ i ]. w ; if ( dis [ j ] > dis [ t ] + k ){ dis [ j ] = dis [ t ] + k ; if ( ! vis [ j ]){ vis [ j ] = true ; que . push ( j ); } } } } } int main () { cin >> n >> m >> s >> t ; int u , v , w ; for ( int i = 1 ; i <= m ; ++ i ) { cin >> u >> v >> w ; E [ u ]. push_back ({ v , w }); E [ v ]. push_back ({ u , w }); } SPFA ( s ); if ( dis [ t ] >= INF / 2 ) cout << \"-1\" << endl ; else cout << dis [ t ] << endl ; } 3.7 SPFA\u5224\u8d1f\u73af\u5b9e\u73b0 \u00b6 C++ #include <iostream> #include <algorithm> #include <cstdio> #include <queue> #include <vector> using namespace std ; #define PII pair<int,int> const int N = 2e6 + 10 ; int n , m , q ; vector < PII > E [ N ]; int dis [ N ], cnt [ N ]; bool vis [ N ]; void spfa (){ queue < int > que ; for ( int i = 1 ; i <= n ; ++ i ) que . push ( i ), vis [ i ] = true ; while ( ! que . empty ()){ int t = que . front (); que . pop (); vis [ t ] = false ; //\u8868\u660et\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u79bb\u5f00\u8fd9\u4e2a\u961f\u5217\u4e86 for ( int i = 0 , l = E [ t ]. size (); i < l ; ++ i ) { int j = E [ t ][ i ]. first , k = E [ t ][ i ]. second ; if ( dis [ j ] > dis [ t ] + k ) { dis [ j ] = dis [ t ] + k ; cnt [ j ] = cnt [ t ] + 1 ; if ( cnt [ j ] >= n ) { //\u627e\u5230\u8d1f\u6743\u8fb9 cout << \"Yes\" << endl ; return ; } if ( ! vis [ j ]) //\u5c06j\u8fd9\u4e2a\u70b9\u91cd\u65b0\u52a0\u5165\u961f\u5217 que . push ( j ), vis [ j ] = true ; } } } cout << \"No\" << endl ; } int main () { cin >> n >> m ; int u , v , w ; for ( int i = 0 ; i < m ; ++ i ) { cin >> u >> v >> w ; E [ u ]. push_back ({ v , w }); } spfa (); return 0 ; } 3.8 SPFA\u5224\u65ad\u6b63\u73af \u00b6 \u5173\u4e8e \\(SPFA\\) \u5224\u65ad\u6b63\u73af\u7684\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e00\u9898\uff1a https://blog.csdn.net/m0_46201544/article/details/123011318 \u56db\u3001Dijkstra\u7b97\u6cd5 \u00b6 4.1\u7b80\u4ecb \u00b6 \\(dijkstra\\) \u662f\u4e00\u79cd\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5,\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u9650\u4e3a \\(O(n^2)\\) (\u6734\u7d20),\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u8f83\u4e3a\u7a33\u5b9a ; \u52a0\u4e0a\u5806\u4f18\u5316\u4e4b\u540e\u66f4\u662f\u5177\u6709 \\(O((n+m)\\log_{2}n)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6,\u5728\u7a20\u5bc6\u56fe\u4e2d\u6709\u4e0d\u4fd7\u7684\u8868\u73b0. \\(Dijkstra\uff08/\u02c8dikstr\u0251/\u6216/\u02c8d\u025bikstr\u0251/\uff09\\) \u7b97\u6cd5\u7531\u8377\u5170\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6 \\(E. W. Dijkstra\\) \u4e8e \\(1956\\) \u5e74\u53d1\u73b0\uff0c \\(1959\\) \u5e74\u516c\u5f00\u53d1\u8868\u3002\u662f\u4e00\u79cd\u6c42\u89e3 \u975e\u8d1f\u6743\u56fe \u4e0a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002 \u8d2a\u5fc3\u601d\u60f3 4.2\u590d\u6742\u5ea6 \u00b6 4.2.1\u7a7a\u95f4\u590d\u6742\u5ea6 \u00b6 4.2.1.1\u6734\u7d20Dijkstra \u00b6 \\(O(N^2)\\) 4.2.1.2\u94fe\u5f0f\u524d\u5411\u661f\u4f18\u5316+Dijkstra \u00b6 \\(O(M)\\) 4.2.2\u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 4.2.2.1 \u6734\u7d20Dijkstra \u00b6 \\(O(N^2)\\) 4.2.2.2 \u94fe\u5f0f\u524d\u5411\u661f+\u5806\u4f18\u5316\u7684Dijkstra \u00b6 \\(O((n+m)\\log_{2}n)\\) 4.3\u4f18\u7f3a\u70b9 \u00b6 4.3.1 \u4f18\u70b9 \u00b6 \u6734\u7d20 \\(Dijkstra\\) \u548c\u5806\u4f18\u5316\u7684 \\(Dijkstra\\) \u57fa\u672c\u4e0a\u80fd\u89e3\u51b3\u6240\u6709\u7684\u6b63\u6743\u56fe\u6700\u77ed\u8def\u95ee\u9898\uff0c \u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u4f1a\u53d7\u5230\u9650\u5236 4.3.2 \u7f3a\u70b9 \u00b6 \u4e0d\u80fd\u5904\u7406\u8d1f\u6743\u56fe\uff0c\u5982\u679c\u9700\u8981\u5904\u7406\u8d1f\u6743\u56fe\u8bf7\u79fb\u6b65 \\(SPFA\\) \u4f46\u662f\u5728\u67d0\u4e9b \u7279\u5b9a\u7684 \u542b\u6709\u8d1f\u8fb9\u7684\u56feDJ\u4e5f\u662f\u5bf9\u7684\u4f8b\u5982\uff1a \u4f46\u662f\u6211\u4eec\u7a0d\u52a0\u53d8\u6362\uff0c\u8fea\u6770\u65af\u7279\u62c9\u5c31\u4e0d\u80fd\u5904\u7406\u4e86\uff1a 4.4 \u7b97\u6cd5\u539f\u7406 \u00b6 4.4.1\u601d\u60f3 \u00b6 \\(Dijkstra\\) \u7684\u6838\u5fc3\u601d\u60f3\u5176\u5b9e\u5c31\u662f\u8d2a\u5fc3\u601d\u60f3\uff0c\u6bcf\u6b21\u5bfb\u627e\u4e00\u4e2a \u4e34\u8fd1\u70b9\u7684dis\u503c\u6700\u5c0f \u7684\u70b9\uff0c\u7136\u540e\u6211\u4eec\u518d\u6765\u5bf9\u8be5\u70b9\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c 4.4.2 \u6d41\u7a0b \u00b6 \u5c06\u7ed3\u70b9\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff1a\u5df2\u786e\u5b9a\u6700\u77ed\u8def\u957f\u5ea6\u7684\u70b9\u96c6\uff08\u8bb0\u4e3a \\(S\\) \u96c6\u5408\uff09\u7684\u548c\u672a\u786e\u5b9a\u6700\u77ed\u8def\u957f\u5ea6\u7684\u70b9\u96c6\uff08\u8bb0\u4e3a \\(T\\) \u96c6\u5408\uff09\u3002\u4e00\u5f00\u59cb\u6240\u6709\u7684\u70b9\u90fd\u5c5e\u4e8e \\(T\\) \u96c6\u5408\u3002 1.\u521d\u59cb\u5316 \\(dis[start] = 0\\) , \u5176\u4f59\u8282\u70b9\u7684 \\(dis\\) \u503c\u4e3a\u65e0\u7a77\u5927 2.\u4ece \\(T\\) \u96c6\u5408\u4e2d\u9009\u53d6\u4e00\u4e2a\u4ece\u6e90\u70b9\u5230\u8be5\u70b9\u7684\u6700\u77ed\u8def\u503c\u6700\u5c0f\u7684\u70b9 \\(x\\) \uff0c\u7136\u540e\u653e\u5165 \\(S\\) \u96c6\u5408\u4e2d\uff08\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 vis\u6570\u7ec4\u6807\u8bb0 \u6765\u5b9e\u73b0\u96c6\u5408\u5212\u5206\uff09 3.\u904d\u5386 \\(x\\) \u7684\u6240\u6709\u51fa\u8fb9 \\((x,y,z)\\) , \u82e5 \\(dis[y] > dis[x] + z\\) , \u5219\u4ee4 \\(dis[y] = dis[x] + z\\) 4.\u91cd\u590d 2,3 \u4e24\u6b65,\u76f4\u5230\u6240\u6709\u70b9\u90fd\u52a0\u5165\u96c6\u5408 \\(S\\) . \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2)\\) 4.4.3 \u7b97\u6cd5\u56fe\u89e3 \u00b6 T\u96c6\u5408\u5143\u7d20 S\u96c6\u5408\u5143\u7d20 \u5f53\u524d\u677e\u5f1b\u64cd\u4f5c \\(\\{2,3,4\\}\\) \\(\\{1 \\}\\) dis[1] = 0,dis[2]=1,dis[3]=4,dis[4]=6 \\(\\{3,4 \\}\\) \\(\\{1,2\\}\\) dis[4] = 3 \\(\\{ 3\\}\\) \\(\\{1,2,4\\}\\) \u65e0 \\(\\varnothing\\) \\(\\{1,2,3,4\\}\\) \u65e0 \u90a3\u4e48\u6700\u7ec8\u6211\u4eec\u7684dis\u503c\u5c31\u53d8\u6210\u4e86\uff1a \\(dis[1] = 0 \\\\ dis[2] = 1 \\\\ dis[3] = 4 \\\\ dis[4] = 3\\) 4.5 \u4f18\u5316 \u00b6 \u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e \u5bfb\u627e \\(dis\\) \u503c\u6700\u5c0f \u7684\u70b9\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u901a\u8fc7 \u4e0d\u540c\u7684\u65b9\u5f0f\u7ef4\u62a4 \u7684\u8bdd\u90a3\u4e48\u7b97\u6cd5\u7684\u6574\u4f53\u590d\u6742\u5ea6\u5c31\u4f1a\u4e0d\u540c \u66b4\u529b\uff1a\u4e0d\u4f7f\u7528\u4efb\u4f55\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u7ef4\u62a4\uff0c\u6bcf\u6b21 2 \u64cd\u4f5c\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u76f4\u63a5\u5728 \\(T\\) \u96c6\u5408\u4e2d\u66b4\u529b\u5bfb\u627e\u6700\u77ed\u8def\u957f\u5ea6\u6700\u5c0f\u7684\u7ed3\u70b9\u30023\u64cd\u4f5c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(M)\\) \uff0c2\u64cd\u4f5c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(N^2)\\) \uff0c\u5168\u8fc7\u7a0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(N^2+M)=O(N^2)\\) \u3002 \u4e8c\u53c9\u5806\uff1a\u6bcf\u6210\u529f\u677e\u5f1b\u4e00\u6761\u8fb9 \\((u,v)\\) \uff0c\u5c31\u5c06 \\(v\\) \u63d2\u5165\u4e8c\u53c9\u5806\u4e2d\uff08\u5982\u679c \\(v\\) \u5df2\u7ecf\u5728\u4e8c\u53c9\u5806\u4e2d\uff0c\u76f4\u63a5\u4fee\u6539\u76f8\u5e94\u5143\u7d20\u7684\u6743\u503c\u5373\u53ef\uff09\uff0c2\u64cd\u4f5c\u76f4\u63a5\u53d6\u5806\u9876\u7ed3\u70b9\u5373\u53ef\u3002\u5171\u8ba1 \\(O(M)\\) \u6b21\u4e8c\u53c9\u5806\u4e0a\u7684\u63d2\u5165\uff08\u4fee\u6539\uff09\u64cd\u4f5c\uff0c \\(O(N)\\) \u6b21\u5220\u9664\u5806\u9876\u64cd\u4f5c\uff0c\u800c\u63d2\u5165\uff08\u4fee\u6539\uff09\u548c\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a \\(O(log_2N)\\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O((N+M)\\times log_2N) = O(mlog_2m)\\) \u3002 \u4f18\u5148\u961f\u5217\uff1a\u548c\u4e8c\u53c9\u5806\u7c7b\u4f3c\uff0c\u4f46\u4f7f\u7528\u4f18\u5148\u961f\u5217\u65f6\uff0c\u5982\u679c\u540c\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u88ab\u66f4\u65b0\u591a\u6b21\uff0c\u56e0\u4e3a\u5148\u524d\u66f4\u65b0\u65f6\u63d2\u5165\u7684\u5143\u7d20\u4e0d\u80fd\u88ab\u5220\u9664\uff0c\u4e5f\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u53ea\u80fd\u7559\u5728\u4f18\u5148\u961f\u5217\u4e2d\uff0c\u6545\u4f18\u5148\u961f\u5217\u5185\u7684\u5143\u7d20\u4e2a\u6570\u662f \\(O(M)\\) \u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(Mlog_2M)\\) Fibonacci \u5806\uff1a\u548c\u524d\u9762\u4e8c\u8005\u7c7b\u4f3c\uff0c\u4f46 Fibonacci \u5806\u63d2\u5165\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \uff0c\u6545\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(Nlog_2N+M)=O(Nlog_2N)\\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u4f18\u3002\u4f46\u56e0\u4e3a Fibonacci \u5806\u8f83\u4e8c\u53c9\u5806 \u4e0d\u6613\u5b9e\u73b0\uff0c\u6548\u7387\u4f18\u52bf\u4e5f\u4e0d\u591f\u5927 \uff0c\u7b97\u6cd5\u7ade\u8d5b\u4e2d\u8f83\u5c11\u4f7f\u7528\u3002 \u6ce8\u610f\u7684\u662f\uff1a\u5728 \u7a20\u5bc6\u56fe \u4e2d\u901a\u8fc7\u66b4\u529b\u65b9\u5f0f\u7ef4\u62a4\u6548\u7387\u66f4\u597d\uff0c \\(O(N^2)\\) \uff0c\u5728 \u7a00\u758f\u56fe \u4e2d\u901a\u8fc7\u5806\u4f18\u5316\u7684\u65b9\u5f0f\u7ef4\u62a4\u6548\u7387\u66f4\u9ad8\uff0c \\(O((n+m)\\log_{2}n)\\) 4.6 \u6b63\u786e\u6027\u8bc1\u660e(\u5f15\u81ea\u7b97\u6cd5\u5bfc\u8bba) \u00b6 \\(dijkstra\\) \u4e3a\u4ec0\u4e48\u662f\u6b63\u786e\u7684\u5462\uff1f \uff0c\u5f53\u6211\u4eec\u5b58\u50a8\u7684\u6240\u6709\u7684\u8fb9\u90fd\u662f\u6b63\u6743\u8fb9\u65f6\uff0c\u6574\u4e2a\u56fe\u7684\u6700\u5c0f\u503c\u4e0d\u53ef\u80fd\u518d\u88ab\u5176\u4ed6\u8282\u70b9\u66f4\u65b0\uff0c\u6240\u4ee5\u6211\u4eec\u5728T\u96c6\u5408\u4e2d\u5bfb\u627edis\u6700\u5c0f\u503c\u5176\u5b9e\u5c31\u662f\u518d\u9009\u62e9\u5168\u5c40\u6700\u5c0f\u503c\uff0c\u4e5f\u5c31\u662f\u8d2a\u5fc3\u7684\u601d\u60f3 \u4e0b\u9762\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u8bc1\u660e\uff0c\u5728 \u6240\u6709\u8fb9\u6743\u503c\u975e\u8d1f \u7684\u524d\u63d0\u4e0b\uff0cDijkstra \u7b97\u6cd5\u7684\u6b63\u786e\u6027\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u6211\u4eec\u8981\u8bc1\u660e\u7684\uff0c\u5c31\u662f\u5728\u6267\u884c 1 \u64cd\u4f5c\u65f6\uff0c\u53d6\u51fa\u7684\u7ed3\u70b9 \\(u\\) \u6700\u77ed\u8def\u5747\u5df2\u7ecf\u88ab\u786e\u5b9a\uff0c\u5373\u6ee1\u8db3 \\(D(u)=dis(u)\\) \u3002 \u521d\u59cb\u7684\u65f6\u5019 \\(S=\\varnothing\\) \uff0c\u5047\u8bbe\u6210\u7acb\uff0c\u63a5\u4e0b\u6765\u4f7f\u7528\u53cd\u8bc1\u6cd5\u3002 \u8bbe \\(u\\) \u70b9\u4e3a\u7b97\u6cd5\u4e2d\u7b2c\u4e00\u4e2a\u5728\u52a0\u5165 \\(S\\) \u96c6\u5408\u65f6\u4e0d\u6ee1\u8db3 \\(D(u)=dis(u)\\) \u7684\u70b9\u3002\u56e0\u4e3a \\(s\\) \u70b9\u4e00\u5b9a\u6ee1\u8db3 \\(D(u)=dis(u)=0\\) \uff0c\u4e14\u5b83\u4e00\u5b9a\u662f\u7b2c\u4e00\u4e2a\u52a0\u5165 \\(S\\) \u96c6\u5408\u7684\u70b9\uff0c\u56e0\u6b64\u5c06 \\(u\\) \u52a0\u5165 \\(S\\) \u96c6\u5408\u524d \\(S != \\varnothing\\) \uff0c\u5982\u679c\u4e0d\u5b58\u5728 \\(s\\) \u5230 \\(u\\) \u7684\u8def\u5f84\uff0c\u5219 \\(D(u)=dis(u)=+\u221e\\) \uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\u3002 \u4e8e\u662f\u4e00\u5b9a\u5b58\u5728\u8def\u5f84 \\(s->x->y->u\\) \uff0c\u5176\u4e2dy\u4e3a \\(s->u\\) \u8def\u5f84\u4e0a\u7b2c\u4e00\u4e2a\u5c5e\u4e8e \\(T\\) \u96c6\u5408\u7684\u70b9\uff0c\u800c \\(x\\) \u4e3a \\(y\\) \u7684\u524d\u9a71\u8282\u70b9\uff08\u663e\u7136x\u2208S\uff09\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u53ef\u80fd\u5b58\u5728 \\(s=x\\) \u6216\u8005 \\(y=u\\) \u7684\u60c5\u51b5\uff0c\u5373 \\(s->x\\) \u6216\u8005 \\(y->u\\) \u662f\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u8def\u5f84 \u56e0\u4e3a\u5728 \\(u\\) \u7ed3\u70b9\u4e4b\u524d\u52a0\u5165\u7684\u7ed3\u70b9\u90fd\u6ee1\u8db3 \\(D(u)=dis(u)\\) \uff0c\u6240\u4ee5\u5728 \\(x\\) \u70b9\u52a0\u5165\u5230 \\(S\\) \u96c6\u5408\u65f6\uff0c\u6709 \\(D(u)=dis(u)\\) \uff0c\u6b64\u65f6\u8fb9 \\((x,y)\\) \u4f1a\u88ab\u677e\u5f1b\uff0c\u4ece\u800c\u53ef\u4ee5\u8bc1\u660e\uff0c\u5c06 \\(u\\) \u52a0\u5165\u5230 \\(S\\) \u65f6\uff0c\u4e00\u5b9a\u6709 \\(D(y)=dis(y)\\) \u3002 \u4e0b\u9762\u8bc1\u660e \\(D(u)=dis(u)\\) \u6210\u7acb\u3002\u5728\u8def\u5f84 \\(s->x->y->u\\) \u4e2d\uff0c\u56e0\u4e3a\u56fe\u4e0a\u6240\u6709\u8fb9\u8fb9\u6743\u975e\u8d1f\uff0c\u56e0\u6b64 \\(D(y)<= D(u)\\) \u3002\u4ece\u800c \\(dis(y)<=D(y)<=D(u)<=dis(u)\\) \u3002\u4f46\u662f\u56e0\u4e3a \\(u\\) \u7ed3\u70b9\u57282 \u8fc7\u7a0b\u4e2d\u88ab\u53d6\u51fa \\(T\\) \u96c6\u5408\u65f6\uff0c \\(y\\) \u7ed3\u70b9\u8fd8\u6ca1\u6709\u88ab\u53d6\u51fa \\(T\\) \u96c6\u5408\uff0c\u56e0\u6b64\u6b64\u65f6\u6709 \\(dis(u)<=dis(y)\\) \uff0c\u4ece\u800c\u5f97\u5230 \\(dis(y)=D(y)=D(u)=dis(u)\\) \uff0c\u8fd9\u4e0e \\(D(u)!=dis(u)\\) \u7684\u5047\u8bbe\u77db\u76fe\uff0c\u6545\u5047\u8bbe\u4e0d\u6210\u7acb\u3002 \u56e0\u6b64\u6211\u4eec\u8bc1\u660e\u4e86\uff0c2 \u64cd\u4f5c\u6bcf\u6b21\u53d6\u51fa\u7684\u70b9\uff0c\u5176\u6700\u77ed\u8def\u5747\u5df2\u7ecf\u88ab\u786e\u5b9a\u3002\u547d\u9898\u5f97\u8bc1\u3002 4.7 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u6a21\u677f\u9898\uff1a https://ac.nowcoder.com/acm/contest/27274/E 4.7.1 \u6734\u7d20Dijkstra(\u7a20\u5bc6\u56fe) \u00b6 C++ #include <cstdio> #include <algorithm> #include <vector> #include <iostream> #include <cstring> using namespace std ; #define INF 0x3f3f3f3f const int N = 1e3 + 10 ; int f [ N ][ N ], n , m , dis [ N ]; bool vis [ N ]; void DJ ( int s ){ for ( int i = 1 ; i <= n ; ++ i ) dis [ i ] = INF , vis [ i ] = false ; dis [ s ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { int t = -1 ; for ( int j = 1 ; j <= n ; ++ j ) if ( ! vis [ j ] && ( t == -1 || dis [ j ] < dis [ t ])) t = j ; if ( t == -1 ) return ; vis [ t ] = true ; for ( int j = 1 ; j <= n ; ++ j ) if ( dis [ j ] > dis [ t ] + f [ t ][ j ]) dis [ j ] = dis [ t ] + f [ t ][ j ]; } } int main () { int s , t ; cin >> n >> m >> s >> t ; int u , v , w ; memset ( f , 0x3f , sizeof f ); for ( int i = 1 ; i <= m ; ++ i ){ cin >> u >> v >> w ; f [ v ][ u ] = f [ u ][ v ] = min ( f [ u ][ v ], w ); } DJ ( s ); if ( dis [ t ] == INF ) cout << \"-1\" << endl ; else cout << dis [ t ] << endl ; return 0 ; } 4.7.2 \u4f18\u5148\u961f\u5217\u4f18\u5316Dijkstra(\u7a00\u758f\u56fe) \u00b6 C++ #include <cstdio> #include <algorithm> #include <vector> #include <iostream> #include <cstring> #include <queue> using namespace std ; #define endl \"\\n\" #define PII pair<int,int> #define INF 0x3f3f3f3f const int N = 2e6 + 10 ; int dis [ N ], n , m ; bool vis [ N ]; vector < PII > E [ N ]; void DJ ( int s ){ for ( int i = 1 ; i <= n ; ++ i ) dis [ i ] = INF , vis [ i ] = false ; priority_queue < PII , vector < PII > , greater < PII > > que ; que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()){ int t = que . top (). second ; que . pop (); if ( vis [ t ]) continue ; vis [ t ] = true ; for ( int i = 0 , l = E [ t ]. size (); i < l ; ++ i ) { int j = E [ t ][ i ]. first , w = E [ t ][ i ]. second ; if ( dis [ j ] > dis [ t ] + w ){ dis [ j ] = dis [ t ] + w , que . push ({ dis [ j ], j }); } } } } int main () { ios :: sync_with_stdio ( 0 ); cin . tie ( 0 ); cout . tie ( 0 ); int s , t ; cin >> n >> m >> s >> t ; int u , v , w ; for ( int i = 1 ; i <= m ; ++ i ){ cin >> u >> v >> w ; E [ u ]. push_back ({ v , w }); E [ v ]. push_back ({ u , w }); } DJ ( s ); if ( dis [ t ] == INF ) cout << \"-1\" << endl ; else cout << dis [ t ] << endl ; return 0 ; } 4.7.3 \u94fe\u5f0f\u524d\u5411\u661f+\u4f18\u5148\u961f\u5217\u4f18\u5316Dijkstra \u00b6 C++ #include <cstdio> #include <cstring> #include <queue> // using namespace std ; const int N = 2e5 + 5 ; //\u6570\u636e\u8303\u56f4 struct edge { //\u5b58\u50a8\u8fb9 int u , v , w , next ; //u\u4e3a\u8d77\u70b9\uff0cv\u4e3a\u7ec8\u70b9\uff0cw\u4e3a\u6743\u503c\uff0cnext\u4e3a\u524d\u7ee7 }; edge e [ N ]; int head [ N ], dis [ N ], n , m , s , cnt ; //head\u4e3a\u94fe\u4e2d\u6700\u4e0a\u9762\u7684\uff0cdis\u8868\u793a\u5f53\u524d\u7b54\u6848\uff0cn\u4e3a\u70b9\u6570\uff0cm\u4e3a\u8fb9\u6570\uff0cs\u4e3a\u8d77\u70b9\uff0ccnt\u8bb0\u5f55\u5f53\u524d\u8fb9\u7684\u6570\u91cf bool vis [ N ]; //vis\u8868\u793a\u8fd9\u4e2a\u70b9\u6709\u6ca1\u6709\u8d70\u8fc7 struct node { int w , to ; //w\u8868\u793a\u7d2f\u52a0\u7684\u6743\u503c\uff0cto\u8868\u793a\u5230\u7684\u5730\u65b9 bool operator < ( const node & x ) const { //\u91cd\u8f7d\u201c<\u201d\u53f7 return w > x . w ; } }; priority_queue < node > q ; //\u4f18\u5148\u961f\u5217\uff08\u5806\u4f18\u5316\uff09 void add ( int u , int v , int w ){ ++ cnt ; //\u589e\u52a0\u8fb9\u7684\u6570\u91cf e [ cnt ]. u = u ; //\u5b58\u8d77\u70b9 e [ cnt ]. v = v ; //\u5b58\u7ec8\u70b9 e [ cnt ]. w = w ; //\u5b58\u6743\u503c e [ cnt ]. next = head [ u ]; //\u5b58\u524d\u7ee7 head [ u ] = cnt ; //\u66f4\u65b0\u94fe\u6700\u4e0a\u9762\u7684\u5e8f\u53f7 } //\u94fe\u5f0f\u524d\u5411\u661f\uff08\u52a0\u8fb9\uff09 void Dijkstra (){ memset ( dis , 0x3f3f3f3f , sizeof ( dis )); //\u521d\u59cb\u5316\uff0c\u4e3adis\u6570\u7ec4\u9644\u4e00\u4e2a\u6781\u5927\u503c\uff0c\u65b9\u4fbf\u540e\u9762\u7684\u8ba1\u7b97 dis [ s ] = 0 ; //\u8d77\u70b9\u5230\u81ea\u5df1\u8ddd\u79bb\u4e3a0 q . push ( node { 0 , s }); //\u538b\u5165\u961f\u5217 while ( ! q . empty ()){ //\u961f\u5217\u4e0d\u4e3a\u7a7a node x = q . top (); //\u53d6\u51fa\u961f\u5217\u7b2c\u4e00\u4e2a\u5143\u7d20 q . pop (); //\u5f39\u51fa int u = x . to ; //\u6c42\u51fa\u8d77\u70b9 if ( vis [ u ]) continue ; //\u5df2\u53bb\u8fc7\u5c31\u4e0d\u53bb\u4e86 vis [ u ] = true ; //\u6807\u8bb0\u5df2\u53bb\u8fc7 for ( int i = head [ u ]; i ; i = e [ i ]. next ){ int v = e [ i ]. v ; //\u679a\u4e3e\u7ec8\u70b9 if ( dis [ v ] > dis [ u ] + e [ i ]. w ){ //\u82e5\u4e2d\u8f6c\u540e\u66f4\u4f18\uff0c\u5c31\u8f6c dis [ v ] = dis [ u ] + e [ i ]. w ; //\u66f4\u65b0 q . push ( node { dis [ v ], v }); //\u538b\u5165\u961f\u5217 } } } } int main (){ int u , v , w = 1 ; s = 1 ; scanf ( \"%d%d\" , & n , & m ); //\u8f93\u5165 for ( int i = 1 ; i <= m ; ++ i ){ scanf ( \"%d%d\" , & u , & v ); add ( u , v , w ); add ( v , u , w ); } Dijkstra (); //DJ printf ( \"%d \\n \" , dis [ n ]); //\u8f93\u51fa1-n\u7684\u6700\u77ed\u8def return 0 ; } 4.8 \u8def\u5f84\u6253\u5370\u95ee\u9898 \u00b6 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a \\(pre\\) \u6570\u7ec4\uff0c\u7136\u540e \\(pre[i]\\) \u8bb0\u5f55\u7684\u662f\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u662f\u54ea\u4e00\u4e2a\u8282\u70b9\uff0c\u5f53\u7136\u521d\u59cb\u7684\u65f6\u5019\u6211\u4eec\u5168\u90e8\u521d\u59cb\u5316\u4e3a \\(-1\\) \uff0c\u7136\u540e\u6bcf\u6b21\u677e\u5f1b\u64cd\u4f5c\u7684\u65f6\u5019\u5c31\u66f4\u65b0\u4e00\u4e0b\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u4f60\u6709\u6ca1\u6709\u53d1\u73b0\u8fd9\u5c31\u662f\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u7136\u540e\u6700\u540e\u6253\u5370\u7684\u65f6\u5019\u8981\u4e48\u9012\u5f52\u6253\u5370\uff0c\u90a3\u4e48\u624b\u52a8\u5199\u6808\u6253\u5370\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u53ea\u662f\u9002\u7528\u4e8eDijkstra\uff0c\u800c\u4e14\u4e5f\u9002\u7528\u4e8e\u5176\u4ed6\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u5982 \\(SPFA\\) \u3001 \\(bellman\\_ford\\) \u3001 \\(Floyd\\) \u7b49\u7b49 \u90a3\u4e48\u7b80\u5355\u63cf\u8ff0\u4e00\u4e0b\u6253\u5370\u51fd\u6570 C++ void print ( int t ){ for ( int i = t ; ~ i ; i = pre [ i ]){ cout << i ; if ( i != s ) cout << \" -> \" ; } } 4.9 \u8def\u5f84\u7edf\u8ba1\u95ee\u9898 \u00b6 \u5176\u5b9e\u6211\u4eec\u5728 \u677e\u5f1b\u64cd\u4f5c \u7684\u65f6\u5019\u5c31\u80fd\u8bb0\u5f55or\u66f4\u65b0\u4ece\u6e90\u70b9\u5230\u5f53\u524d\u70b9\u7684\u8def\u5f84\u6761\u6570\uff0c\u6a21\u677f\u9898\u53ef\u4ee5\u53c2\u89c1\u4e0b\u9762\u7684\uff1a \u6700\u77ed\u8def\u8ba1\u6570 \u4e94\u3001Johnson \u5168\u6e90\u6700\u77ed\u8def \u00b6 \u5f85\u8865\u5145 \u516d\u3001\u8bad\u7ec3\u9898\u5355 \u00b6 \u9898\u76ee\u540d\u79f0 \u9898\u76ee\u94fe\u63a5 \u9898\u89e3\u535a\u5ba2 \u7ebf\u8def https://ac.nowcoder.com/acm/contest/27274/E https://blog.csdn.net/m0_46201544/article/details/122545202 \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09 https://www.luogu.com.cn/problem/P3371 \u6a21\u677f\u8bf7\u53c2\u89c1\u4e0a\u9762 \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09 https://www.luogu.com.cn/problem/P4779 \u6a21\u677f\u8bf7\u53c2\u89c1\u4e0a\u9762 \u90ae\u9012\u5458\u9001\u4fe1 https://www.luogu.com.cn/problem/P1629 https://acmer.blog.csdn.net/article/details/123031493 \u6709\u8fb9\u6570\u9650\u5236\u7684\u6700\u77ed\u8def https://www.acwing.com/problem/content/855/ https://acmer.blog.csdn.net/article/details/122857119 spfa \u6c42\u6700\u77ed\u8def https://www.acwing.com/problem/content/853/ https://acmer.blog.csdn.net/article/details/122857137 \u591a\u6e90\u6700\u77ed\u8def http://acm.mangata.ltd/p/P1507 https://acmer.blog.csdn.net/article/details/122857180 Frogger http://poj.org/problem?id=2253 https://acmer.blog.csdn.net/article/details/122998051 Heavy Transportation http://poj.org/problem?id=1797 https://acmer.blog.csdn.net/article/details/122998486 Silver Cow Party http://poj.org/problem?id=3268 https://acmer.blog.csdn.net/article/details/123002888 Wormholes http://poj.org/problem?id=3259 https://acmer.blog.csdn.net/article/details/123007502 Currency Exchange http://poj.org/problem?id=1860 https://acmer.blog.csdn.net/article/details/123011318 MPI Maelstrom http://poj.org/problem?id=1502 https://acmer.blog.csdn.net/article/details/123011950 Cow Contest http://poj.org/problem?id=3660 https://acmer.blog.csdn.net/article/details/123017032 Invitation Cards http://poj.org/problem?id=1511 https://acmer.blog.csdn.net/article/details/123017419 Candies http://poj.org/problem?id=3159 https://acmer.blog.csdn.net/article/details/123018565 \u9762\u57fa https://ac.nowcoder.com/acm/contest/27150/J https://blog.csdn.net/m0_46201544/article/details/122513361 On Average They're Purple https://ac.nowcoder.com/acm/contest/12606/H https://blog.csdn.net/m0_46201544/article/details/122810241 \u6700\u77ed\u8def\u8ba1\u6570 https://www.luogu.com.cn/problem/P1144 https://acmer.blog.csdn.net/article/details/123031941","title":"\u6700\u77ed\u8def"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#_1","text":"","title":"\u6700\u77ed\u8def"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#_2","text":"\u5982\u679c\u4f60\u5bf9\u56fe\u8bba\u76f8\u5173\u77e5\u8bc6\u4e00\u70b9\u4e5f\u6ca1\u6709\uff0c\u90a3\u4e48\u5efa\u8bae\u60a8\u5148\u53bb\u4e86\u89e3\u8fd9\u4e9b\u77e5\u8bc6\uff1a https://acmer.blog.csdn.net/article/details/122310835 \uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5feb\u4e50\u7684\u5b66\u4e60\u6700\u77ed\u8def\u7b97\u6cd5\u5566 \u89c6\u9891\u4e2d\u7ed8\u56fe\u8f6f\u4ef6\uff1a https://csacademy.com/app/graph_editor/ \u914d\u5957\u8bb2\u89e3\u89c6\u9891\uff1a https://www.bilibili.com/video/BV1Fa411C7wX/ \u5982\u679c\u54ea\u91cc\u8bb2\u7684\u6709\u95ee\u9898\u6b22\u8fce\u5728\u8bc4\u8bba\u533a\u6307\u51fa\uff0c\u611f\u8c22\u652f\u6301\uff01","title":"\u524d\u8a00"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#floyd","text":"","title":"\u4e00\u3001Floyd\u7b97\u6cd5"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#11","text":"Floyd\u7b97\u6cd5\u7b97\u662f\u6700\u7b80\u5355\u7684\u7b97\u6cd5\uff0c\u6ca1\u6709\u4e4b\u4e00\u3002\u9002\u7528\u4e8e\u4efb\u4f55\u56fe \u4e0d\u7ba1\u6709\u5411\u65e0\u5411\uff0c\u8fb9\u6743\u6b63\u8d1f\uff0c\u4f46\u662f\u6700\u77ed\u8def\u5fc5\u987b\u5b58\u5728\u3002 \u57fa\u4e8e\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3","title":"1.1\u7b80\u4ecb"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#12","text":"","title":"1.2\u590d\u6742\u5ea6"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#121","text":"\\(O(N^3)\\)","title":"1.2.1\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#122","text":"\\(O(N^2)\\)","title":"1.2.2\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#13","text":"","title":"1.3\u4f18\u7f3a\u70b9"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#131","text":"\u5e38\u6570\u5c0f\uff0c \u5bb9\u6613\u5b9e\u73b0 \uff0c\u601d\u8def\u7b80\u5355\uff0c\u80fd\u5904\u7406\u5927\u90e8\u5206\u56fe","title":"1.3.1\u4f18\u70b9"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#132","text":"\u590d\u6742\u5ea6\u8f83\u9ad8\u3001\u4e0d\u80fd\u5904\u7406\u8d1f\u73af\u56fe","title":"1.3.2\u7f3a\u70b9"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#14","text":"\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u4e09\u7ef4\u6570\u7ec4 \\(f[k][u][v]\\) \u8868\u793a\u7684\u662f\u5141\u8bb8\u7ecf\u8fc7 \\([1,k]\\) \u7684\u70b9\u7684 \\(u\\) \u5230 \\(v\\) \u7684\u6700\u5c0f\u8ddd\u79bb\uff0c\u6362\u53e5\u8bdd\u8bf4\u4ece \\(1\\) \u5230 \\(k\\) \u8fd9\u4e9b\u70b9\u53ef\u4ee5\u4f5c\u4e3a \\(u\\) \u5230 \\(v\\) \u7684 \u4e2d\u95f4\u8282\u70b9 \uff0c\u5f53\u7136\u6ca1\u4e5f\u53ef\u4ee5\u4e0d\u7ecf\u8fc7\uff0c\u5f88\u663e\u7136\u6211\u4eec\u5982\u679c\u8981\u6c42\u89e3 \\(u\\) \u5230 \\(v\\) \u7684\u6700\u5c0f\u8ddd\u79bb\u90a3\u4e48\u5c31\u662f \\(f[n][u][v]\\) \uff08\u5047\u8bbe\u5f53\u524d\u7684\u56fe\u4e2d\u6709n\u4e2a\u70b9\u7684\u8bdd\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u600e\u4e48\u6765\u7ef4\u62a4\u8fd9\u4e2a\u5173\u7cfb\u5462\uff0c\u9996\u5148\u521d\u59cb\u5316\u6765\u8bf4\uff0c \\(f[0][u][v]\\) \u5148\u521d\u59cb\u5316\u4e3a INF \uff0c\u5982\u679c\u6709\u8fb9\u8fde\u63a5\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u53d6\u4e00\u4e2a min \u5c31\u597d\uff0c\u8fd8\u6709\u5c31\u662f\u5982\u679cu\u548cv\u76f8\u7b49\u7684\u8bdd\u5e94\u8be5\u521d\u59cb\u5316\u4e3a0\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u63a8\u51fa\u8fd9\u4e2a\u72b6\u6001\u662f\u5982\u4f55\u8f6c\u79fb\u7684\uff1a \\[f[k][u][v] = min(f[k-1][u][v],f[k-1][u][k] + f[k-1][k][v])\\] \u6211\u4eec\u5bf9\u7ecf\u8fc7 k \u70b9\u548c\u4e0d\u7ecf\u8fc7 k \u70b9\u53bb\u4e00\u4e2a min \uff0c\u90a3\u4e48\u6211\u4eec\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5c31\u6784\u9020\u597d\u5566\uff0c\u4e0b\u9762\u7ed9\u51fa\u4ee3\u7801 C++ void Floyd (){ for ( int k = 1 ; k <= n ; ++ k ) for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) f [ k ][ i ][ j ] = min ( f [ k -1 ][ i ][ j ], f [ k -1 ][ i ][ k ] + f [ k -1 ][ k ][ j ]); } \u6211\u4eec\u53d1\u73b0\u6211\u4eec\u8fd9\u4e2a\u7b2c\u4e00\u7ef4\u7684k\u5176\u5b9e\u6700\u591a\u80fd\u7528\u5230\u5f53\u524d\u8fd9\u4e00\u5c42\u4ee5\u53ca\u4e0a\u4e00\u5c42\u7684\u72b6\u6001\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \u6eda\u52a8\u6570\u7ec4 \u4f18\u5316\u5c06\u5176\u53bb\u6389\uff0c\u90a3\u4e48\u65b0\u7684\u4ee3\u7801\u5373\u4e3a\uff1a C++ void Floyd (){ for ( int k = 1 ; k <= n ; ++ k ) for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) f [ i ][ j ] = min ( f [ i ][ j ], f [ i ][ k ] + f [ k ][ j ]); } \u5173\u4e8e\u7b2c\u4e00\u7ef4\u5bf9\u7ed3\u679c\u65e0\u5f71\u54cd\u7684\u8bc1\u660e : \u6211\u4eec\u6ce8\u610f\u5230\u5982\u679c\u653e\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7b2c\u4e00\u7ef4 k \u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c f[x][k] \u4e0e f[k][y] \u5728\u67d0\u4e00\u884c\u548c\u67d0\u4e00\u5217\u3002\u800c f[x][y] \u5219\u662f\u8be5\u884c\u548c\u8be5\u5217\u7684\u4ea4\u53c9\u70b9\u4e0a\u7684\u5143\u7d20\u3002 \u73b0\u5728\u6211\u4eec\u9700\u8981\u8bc1\u660e\u5c06 f[k][x][y] \u76f4\u63a5\u5728\u539f\u5730\u66f4\u6539\u4e5f\u4e0d\u4f1a\u66f4\u6539\u5b83\u7684\u7ed3\u679c\uff1a\u6211\u4eec\u6ce8\u610f\u5230 f[k][x][y] \u7684\u6db5\u4e49\u662f\u7b2c\u4e00\u7ef4\u4e3a k-1 \u8fd9\u4e00\u884c\u548c\u8fd9\u4e00\u5217\u7684\u6240\u6709\u5143\u7d20\u7684\u6700\u5c0f\u503c\uff0c\u5305\u542b\u4e86 f[k-1][x][y] \uff0c\u90a3\u4e48\u6211\u5728\u539f\u5730\u8fdb\u884c\u66f4\u6539\u4e5f\u4e0d\u4f1a\u6539\u53d8\u6700\u5c0f\u503c\u7684\u503c\uff0c\u56e0\u4e3a\u5982\u679c\u5c06\u8be5\u4e09\u7ef4\u77e9\u9635\u538b\u7f29\u4e3a\u4e8c\u7ef4\uff0c\u5219\u6240\u6c42\u7ed3\u679c f[x][y] \u4e00\u5f00\u59cb\u5373\u4e3a\u539f f[k-1][x][y] \u7684\u503c\uff0c\u6700\u540e\u4f9d\u7136\u4f1a\u6210\u4e3a\u8be5\u884c\u548c\u8be5\u5217\u7684\u6700\u5c0f\u503c\u3002 \u6545\u53ef\u4ee5\u538b\u7f29\u3002 \u6a21\u677f\u9898\uff1a \u591a\u6e90\u6700\u77ed\u8def","title":"1.4\u7b97\u6cd5\u539f\u7406"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#_3","text":"C++ #include <bits/stdc++.h> using namespace std ; const int N = 2e2 + 10 ; const int INF = 0x3f3f3f3f ; int n , m , k ; int f [ N ][ N ]; void Floyd (){ for ( int k = 1 ; k <= n ; ++ k ) for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) f [ i ][ j ] = min ( f [ i ][ j ], f [ i ][ k ] + f [ k ][ j ]); } int main () { cin >> n >> m >> k ; int u , v , w ; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) f [ i ][ j ] = i == j ? 0 : INF ; for ( int i = 1 ; i <= m ; ++ i ){ cin >> u >> v >> w ; f [ u ][ v ] = min ( f [ u ][ v ], w ); } Floyd (); while ( k -- ){ cin >> u >> v ; if ( f [ u ][ v ] > INF / 2 ) cout << \"impossible\" << endl ; else cout << f [ u ][ v ] << endl ; } return 0 ; }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#bellman-ford","text":"","title":"\u4e8c\u3001Bellman-Ford \u7b97\u6cd5"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#21","text":"\\(Bellman-Ford\\) \u7b97\u6cd5\u662f\u4e00\u79cd\u57fa\u4e8e\u677e\u5f1b\uff08 \\(relax\\) \uff09\u64cd\u4f5c\u7684\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u53ef\u4ee5\u6c42\u51fa\u6709\u8d1f\u6743\u7684\u56fe\u7684\u6700\u77ed\u8def\uff0c\u5e76\u53ef\u4ee5\u5bf9\u6700\u77ed\u8def\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u8fdb\u884c\u5224\u65ad\u3002\u5f53\u7136\u4f60\u53ef\u80fd\u6ca1\u542c\u8fc7\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u4f46\u662f\u5e94\u8be5\u542c\u8fc7\u53e6\u4e00\u4e2a\u7b97\u6cd5 \\(SPFA\\) \u7b97\u6cd5\uff0c \\(SPFA\\) \u7b97\u6cd5\u5176\u5b9e\u5c31\u662f\u52a0\u5165\u4e86\u961f\u5217\u4f18\u5316\u7684 \\(Bellman-Ford\\)","title":"2.1\u7b80\u4ecb"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#22","text":"","title":"2.2\u590d\u6742\u5ea6"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#221","text":"\\(O(NM)\\)","title":"2.2.1\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#222","text":"\u90bb\u63a5\u77e9\u9635\uff1a \\(O(N^2)\\) \u90bb\u63a5\u8868\uff1a \\(O(M)\\)","title":"2.2.2\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#23","text":"","title":"2.3\u4f18\u7f3a\u70b9"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#231","text":"\u80fd\u591f\u5904\u7406\u8d1f\u6743\u56fe\u3001\u80fd\u5904\u7406\u8fb9\u6570\u9650\u5236\u7684\u6700\u77ed\u8def","title":"2.3.1\u4f18\u70b9"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#232","text":"\u590d\u6742\u5ea6\u4e0d\u592a\u7406\u60f3\uff0c\u5f88\u5bb9\u6613\u88ab\u5361","title":"2.3.2\u7f3a\u70b9"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#24","text":"","title":"2.4\u7b97\u6cd5\u539f\u7406"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#241","text":"\u5728\u4ecb\u7ecd\u8be5\u7b97\u6cd5\u524d\uff0c\u5148\u6765\u4ecb\u7ecd\u4e00\u4e0b \u677e\u5f1b\u64cd\u4f5c \uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8fb9 \\((u,v)\\) \uff0c\u677e\u5f1b\u64cd\u4f5c\u5bf9\u5e94\u4e0b\u9762\u7684\u5f0f\u5b50\uff1a \\(dis[v]=min(dis[v],dis[u]+w(u,v))\\) \u3002\u4e5f\u5c31\u662f\u6211\u4eec\u5c06\u6e90\u70b9\u5230v\u70b9\u7684\u8ddd\u79bb\u66f4\u65b0\u7684\u4e00\u4e2a\u64cd\u4f5c \u4e5f\u5c31\u662f\u5f00\u59cb\u53ef\u80fd\u6e90\u70b9 \\(S\\) \u5230 \\(v\\) \u7684\u8def\u5f84\u4e3a \\(S->v\\) \uff0c\u5982\u679c\u8bf4\u7ecf\u8fc7 \\(u\\) \u70b9\u540e\u518d\u5230 \\(v\\) \u7684\u6743\u503c\u6bd4\u76f4\u63a5\u5230v\u5c0f\u90a3\u4e48\u6211\u4eec\u5c31\u66f4\u65b0\u4e00\u4e0b\u8def\u5f84\u6700\u5c0f\u503c\uff0c\u8fd9\u5c31\u662f\u677e\u5f1b\u64cd\u4f5c","title":"2.4.1\u677e\u5f1b\u64cd\u4f5c"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#242","text":"Bellman\u7b97\u6cd5\u8981\u505a\u7684\u4e8b\u5c31\u662f\u5bf9\u4e8e\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\uff0c\u6211\u4eec\u90fd\u8fdb\u884c\u4e00\u6b21\u677e\u5f1b\u64cd\u4f5c\uff0c\u90a3\u4e48\u5b8c\u6210\u8fd9\u6574\u4e2a\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u5927\u6982\u5728 \\(O(M)\\) \uff0c\u7136\u540e\u6211\u4eec\u5c31\u4e00\u76f4\u5faa\u73af\u7684\u8fdb\u884c\u8fd9\u4e2a\u64cd\u4f5c\uff0c \u76f4\u5230\u6211\u4eec\u4e0d\u80fd\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c \u4e3a\u6b62\uff0c\u5c31\u8bf4\u660e\u6211\u4eec\u7684\u5355\u6e90\u6700\u77ed\u8def\u4ee5\u53ca\u5168\u90e8\u6c42\u5b8c\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u591a\u5c11\u6b21\u8fd9\u6837\u7684\u5b8c\u6574\u64cd\u4f5c\u5462\uff0c \u5728\u6700\u77ed\u8def\u5b58\u5728\u7684\u60c5\u51b5\u4e0b \uff0c\u7531\u4e8e\u4e00\u6b21\u677e\u5f1b\u64cd\u4f5c\u4f1a\u4f7f\u6700\u77ed\u8def\u7684\u8fb9\u6570\u81f3\u5c11+1 \uff0c\u800c\u6700\u77ed\u8def\u7684\u8fb9\u6570\u6700\u591a\u4e3a \\(N-1\\) \uff0c\u56e0\u6b64\u6574\u4e2a\u7b97\u6cd5\u6700\u591a\u6267\u884c \\(N-1\\) \u8f6e\u677e\u5f1b\u64cd\u4f5c\u3002\u6545\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O (NM)\\) \u3002","title":"2.4.2 \u5177\u4f53\u6d41\u7a0b"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#243","text":"\u4e0a\u9762\u63d0\u5230\u4e86\u6211\u4eec\u5728\u6c42\u6700\u77ed\u8def\u5b58\u5728\u7684\u60c5\u51b5\u6700\u591a\u6267\u884c \\(N-1\\) \u8f6e\u677e\u5f1b\u64cd\u4f5c\uff0c\u5982\u679c\u6570\u636e\u4e2d \u51fa\u73b0\u4e86\u8d1f\u73af \uff0c\u90a3\u4e48\u6211\u4eec\u5728 \u7b2cN\u8f6e \u64cd\u4f5c\u7684\u65f6\u5019\u4e5f\u4f1a\u66f4\u65b0 \u6ce8\u610f\u4e00\u70b9 \uff1a \u4ee5 \\(S\\) \u70b9\u4e3a\u6e90\u70b9\u8dd1 Bellman-Ford \u7b97\u6cd5\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u7ed9\u51fa\u5b58\u5728\u8d1f\u73af\u7684\u7ed3\u679c\uff0c\u53ea\u80fd\u8bf4\u660e\u4ece \\(S\\) \u70b9\u51fa\u53d1\u4e0d\u80fd\u62b5\u8fbe\u4e00\u4e2a\u8d1f\u73af\uff0c\u800c\u4e0d\u80fd\u8bf4\u660e\u56fe\u4e0a\u4e0d\u5b58\u5728\u8d1f\u73af\u3002 \u56e0\u4e3a\u8fd9\u4e2a\u56fe\u53ef\u80fd\u662f\u4e0d\u8fde\u901a\u7684 \uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e0d\u8fde\u901a\u7684\u56fe\u6211\u4eec\u5e94\u8be5\u5efa\u4e00\u4e2a**\u865a\u70b9**\u6216\u8005\u79f0\u4e4b\u4e3a \u8d85\u7ea7\u6e90\u70b9 \uff0c\u8ba9\u8fd9\u4e2a\u70b9\u8fde\u5411\u6bcf\u4e00\u4e2a\u5176\u4ed6\u7684\u70b9\u5e76\u4e14\u6743\u503c\u4e3a0\uff0c\u7136\u540e\u518d\u6765\u8dd1 \\(bellman\\_ford\\)","title":"2.4.3 \u8d1f\u73af\u95ee\u9898"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#244","text":"\u7b2cx\u8f6e\u677e\u5f1b\u64cd\u4f5c \u672c\u8f6e\u677e\u5f1b\u64cd\u4f5c 1 dis[2] =1,dis[3]=4,dis[4]=6 2 dis[4]=3 3 \u65e0\u64cd\u4f5c \u6a21\u677f\u9898\uff1a https://ac.nowcoder.com/acm/contest/27274/E","title":"2.4.4 \u7b97\u6cd5\u56fe\u89e3"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#25","text":"C++ #include <algorithm> #include <cstring> #include <iostream> #include <cstdio> #include <vector> const int INF = 0x3f3f3f3f ; const int N = 10000 + 10 ; using namespace std ; struct Node { int u , v , w ; }; vector < Node > E ; int n , m , s , t ; int dis [ N ]; void bellman_ford ( int s ){ for ( int i = 1 ; i <= n ; ++ i ) dis [ i ] = INF ; dis [ s ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 0 ; j < 2 * m ; ++ j ) { int u = E [ j ]. u , v = E [ j ]. v , w = E [ j ]. w ; if ( dis [ v ] > dis [ u ] + w ) dis [ v ] = dis [ u ] + w ; } } int main () { cin >> n >> m >> s >> t ; int u , v , w ; for ( int i = 1 ; i <= m ; ++ i ) { cin >> u >> v >> w ; E . push_back ({ u , v , w }); E . push_back ({ v , u , w }); } bellman_ford ( s ); if ( dis [ t ] >= INF / 2 ) cout << \"-1\" << endl ; else cout << dis [ t ] << endl ; }","title":"2.5\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#26","text":"\u5982\u679c\u6211\u4eec\u53d1\u73b0\u7b2c \\(N\\) \u8f6e\u64cd\u4f5c\u4e5f\u66f4\u65b0\u4e86\u90a3\u4e48\u8bf4\u660e\u5b58\u5728**\u8d1f\u6743\u56de\u8def** C++ #include <iostream> #include <algorithm> #include <cstring> using namespace std ; #define INF 0x3f3f3f3f const int N = 2e6 + 10 ; int n , m , q , k ; struct Edge { int u , v , w ; } E [ N ]; int dis [ N ]; bool bellman_ford (){ for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 0 ; j < m ; ++ j ) { int u = E [ j ]. u , v = E [ j ]. v , w = E [ j ]. w ; if ( dis [ v ] > dis [ u ] + w ){ dis [ v ] = dis [ u ] + w ; if ( i == n ) return true ; } } return false ; } int main () { cin >> n >> m ; for ( int i = 0 ; i < m ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; E [ i ] = { u , v , w }; } bool k = bellman_ford (); if ( k ) cout << \"Yes\" << endl ; else cout << \"No\" << endl ; return 0 ; }","title":"2.6\u5224\u8d1f\u73af\u5b9e\u73b0"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#spfa","text":"","title":"\u4e09\u3001SPFA"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#31","text":"\u5173\u4e8eSPFA\uff0c\u5b83\u6b7b\u4e86","title":"3.1\u7b80\u4ecb"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#32","text":"","title":"3.2\u590d\u6742\u5ea6"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#321","text":"\u7406\u60f3\u590d\u6742\u5ea6\u4e3a \\(O(KM)\\) \uff0c\u8fd9\u91cc\u7684 \\(K\\) \u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u5e38\u6570 \u6700\u574f\u4e3a \\(O(NM)\\) \u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\u662f\u8dd1\u4e0d\u5230\u8fd9\u4e48\u591a\uff08\u9664\u975e\u51fa\u9898\u4eba\u5361SPFA\uff09","title":"3.2.1\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#322","text":"\u90bb\u63a5\u8868\uff1a \\(O(M)\\) \u90bb\u63a5\u77e9\u9635\uff1a \\(O(N^2)\\)","title":"3.2.2\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#33","text":"","title":"3.3\u4f18\u7f3a\u70b9"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#331","text":"\u597d\u5199\u3001\u6548\u7387\u633a\u5feb\uff08\u4e00\u822c\u6765\u8bf4\u5373\u4e0d\u88ab\u5361\u7684\u8bdd\uff09\uff0c\u80fd\u5904\u7406\u51e0\u4e4e\u6240\u6709\u7c7b\u578b\u7684\u56fe","title":"3.3.1\u4f18\u70b9"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#332","text":"\u5bb9\u6613\u88ab**\u7f51\u683c\u83ca\u82b1\u56fe**\u5361\u6210\u50bbb","title":"3.3.2\u7f3a\u70b9"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#34","text":"","title":"3.4\u7b97\u6cd5\u539f\u7406"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#341","text":"\u5176\u5b9e \\(SPFA\\) \u7b97\u6cd5\u5c31\u662f \\(bllman\\_ford\\) \u7b97\u6cd5\u52a0\u4e0a\u4e86 \u961f\u5217\u4f18\u5316 \uff0c\u6211\u4eec\u5728\u4e0a\u9762\u7684 \\(bellman\\_ford\\) \u7b97\u6cd5\u80fd\u77e5\u9053\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u5c06\u6bcf\u4e00\u4e2a\u8fb9\u90fd\u677e\u5f1b\u4e86 \\(N-1\\) \u6b21\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u6ca1\u5fc5\u8981\u677e\u5f1b\u6bcf\u4e00\u4e2a\u70b9\uff0c\u56e0\u4e3a\u6709\u4e9b\u70b9\u5b9e\u9645\u4e0a\u662f\u4e0d\u7528\u677e\u5f1b\u592a\u591a\u6216\u8005\u8bf4\u4e0d\u7528\u677e\u5f1b\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5e0c\u671b\u53bb\u6389\u4e00\u4e9b \u65e0\u7528\u7684\u677e\u5f1b\u64cd\u4f5c \uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u7528\u961f\u5217\u6765\u7ef4\u62a4 \u54ea\u4e9b\u70b9\u53ef\u80fd\u4f1a\u9700\u8981\u677e\u5f1b\u64cd\u4f5c \uff0c\u8fd9\u6837\u5c31\u80fd\u53ea\u8bbf\u95ee \u5fc5\u8981\u7684 \u8fb9\u4e86\u3002\u540c\u6837\u7684\u7531\u4e8eSPFA\u662f\u961f\u5217\u4f18\u5316\u7684 \\(bellman\\_ford\\) \u90a3\u4e48\u540c\u6837\u80fd\u5904\u7406 \u8d1f\u6743\u56de\u8def \u7684\u56fe tips\uff1a \u867d\u7136\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b \\(SPFA\\) \u8dd1\u5f97\u5f88\u5feb\uff0c\u4f46\u5176\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(NM)\\) \uff0c\u5c06\u5176\u5361\u5230\u8fd9\u4e2a\u590d\u6742\u5ea6\u4e5f\u662f\u4e0d\u96be\u7684\uff0c\u6240\u4ee5\u8003\u8bd5\u65f6\u8981\u8c28\u614e\u4f7f\u7528\uff08\u5728\u6ca1\u6709\u8d1f\u6743\u8fb9\u65f6\u6700\u597d\u4f7f\u7528 \\(Dijkstra\\) \u7b97\u6cd5\uff0c\u5728\u6709\u8d1f\u6743\u8fb9\u4e14\u9898\u76ee\u4e2d\u7684\u56fe\u6ca1\u6709\u7279\u6b8a\u6027\u8d28\u65f6\uff0c\u82e5 \\(SPFA\\) \u662f\u6807\u7b97\u7684\u4e00\u90e8\u5206\uff0c\u9898\u76ee\u4e0d\u5e94\u5f53\u7ed9\u51fa \\(Bellman-Ford\\) \u7b97\u6cd5\u65e0\u6cd5\u901a\u8fc7\u7684\u6570\u636e\u8303\u56f4\uff09\u3002","title":"3.4.1\u601d\u60f3"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#342","text":"\u7528dis\u6570\u7ec4\u8bb0\u5f55\u6e90\u70b9\u5230\u6709\u5411\u56fe\u4e0a\u4efb\u610f\u4e00\u70b9\u8ddd\u79bb\uff0c\u5176\u4e2d\u6e90\u70b9\u5230\u81ea\u8eab\u8ddd\u79bb\u4e3a0\uff0c\u5230\u5176\u4ed6\u70b9\u8ddd\u79bb\u4e3aINF\u3002\u5c06\u6e90\u70b9\u5165\u961f\uff0c\u5e76\u91cd\u590d\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u961f\u9996t\u51fa\u961f\uff0c \u5e76\u5c06t\u6807\u8bb0\u4e3a\u6ca1\u6709\u8bbf\u95ee\u8fc7 \uff0c\u65b9\u4fbf\u4e0b\u6b21\u5165\u961f\u677e\u5f1b \u904d\u5386\u6240\u6709\u4ee5\u961f\u9996\u4e3a\u8d77\u70b9\u7684\u6709\u5411\u8fb9 \\((t,j)\\) \uff0c\u82e5 \\(dis[j] > dis[t] + w(t,j)\\) \uff0c\u5219\u66f4\u65b0 \\(dis[j]\\) \u5982\u679c\u70b9 \\(j\\) \u4e0d\u5728\u961f\u5217\u4e2d \uff0c\u5219 \\(j\\) \u5165\u961f\uff0c \u5e76\u5c06j\u6807\u8bb0\u4e3a\u8bbf\u95ee\u8fc7 \u82e5\u961f\u5217\u4e3a\u7a7a \uff0c\u8df3\u51fa\u5faa\u73af\uff1b\u5426\u5219\u6267\u884c\u7b2c\u4e00\u6b65 \u6211\u4eec\u4f1a\u53d1\u73b0SPFA\u7684\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u548cBFS\u662f\u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u56fe\u662f \u968f\u673a\u751f\u6210 \u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(KM) \uff08K\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e2a\u5e38\u6570\uff0cm\u4e3a\u8fb9\u6570\uff0cn\u4e3a\u70b9\u6570\uff09\u4f46\u662f\u5b9e\u9645\u4e0aSPFA\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u662f O(NM) \uff0c\u53ef\u4ee5\u6784\u9020\u51fa\u5361SPFA\u7684\u6570\u636e\uff0c\u8ba9SPFA\u8d85\u65f6\u3002\u6240\u4ee5\u4f7f\u7528 \\(SPFA\\) \u524d\u4e00\u5b9a\u8981\u4e09\u601d","title":"3.4.2\u6d41\u7a0b"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#343","text":"\u4e0d\u5728\u961f\u5217\u7684\u5143\u7d20 \u5728\u961f\u5217\u7684\u5143\u7d20 \u5f53\u524d\u677e\u5f1b\u64cd\u4f5c \\(\\{2,3,4 \\}\\) \\(\\{ 1\\}\\) \\(dis[3]=4,dis[2]=2,dis[4]=6\\) \\(\\{1 \\}\\) \\(\\{2,3,4 \\}\\) dis[4]=3 \\(\\{1,2 \\}\\) \\(\\{3,4 \\}\\) \u65e0\u64cd\u4f5c \\(\\{1,2,3 \\}\\) \\(\\{4 \\}\\) \u65e0\u64cd\u4f5c \\(\\{1,2,3,4 \\}\\) \\(\\{\\varnothing \\}\\) \u65e0\u64cd\u4f5c","title":"3.4.3\u7b97\u6cd5\u56fe\u89e3"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#35bellman-ford","text":"\u9664\u4e86\u961f\u5217\u4f18\u5316\uff08SPFA\uff09\u4e4b\u5916\uff0cBellman-Ford \u8fd8\u6709\u5176\u4ed6\u5f62\u5f0f\u7684\u4f18\u5316\uff0c\u8fd9\u4e9b\u4f18\u5316\u5728\u90e8\u5206\u56fe\u4e0a\u6548\u679c\u660e\u663e\uff0c\u4f46\u5728\u67d0\u4e9b\u7279\u6b8a\u56fe\u4e0a\uff0c\u6700\u574f\u590d\u6742\u5ea6\u53ef\u80fd\u8fbe\u5230\u6307\u6570\u7ea7\u3002 \u5806\u4f18\u5316\uff1a\u5c06\u961f\u5217\u6362\u6210\u5806\uff0c\u4e0e Dijkstra \u7684\u533a\u522b\u662f\u5141\u8bb8\u4e00\u4e2a\u70b9\u591a\u6b21\u5165\u961f\u3002 \u5728\u6709\u8d1f\u6743\u8fb9\u7684\u56fe\u53ef\u80fd\u88ab\u5361\u6210\u6307\u6570\u7ea7\u590d\u6742\u5ea6 \u3002 \u6808\u4f18\u5316\uff1a\u5c06\u961f\u5217\u6362\u6210\u6808\uff08\u5373\u5c06\u539f\u6765\u7684 BFS \u8fc7\u7a0b\u53d8\u6210 DFS\uff09\uff0c \u5728\u5bfb\u627e\u8d1f\u73af\u65f6\u53ef\u80fd\u5177\u6709\u66f4\u9ad8\u6548\u7387\uff0c\u4f46\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u4e3a\u6307\u6570\u7ea7 \u3002 \\(LLL\\) \u4f18\u5316\uff1a\u5c06\u666e\u901a\u961f\u5217\u6362\u6210\u53cc\u7aef\u961f\u5217\uff0c \u6bcf\u6b21\u5c06\u5165\u961f\u7ed3\u70b9\u8ddd\u79bb\u548c\u961f\u5185\u8ddd\u79bb\u5e73\u5747\u503c\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u5927\u5219\u63d2\u5165\u81f3\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996 \u3002 \\(SLF\\) \u4f18\u5316\uff1a\u5c06\u666e\u901a\u961f\u5217\u6362\u6210\u53cc\u7aef\u961f\u5217\uff0c \u6bcf\u6b21\u5c06\u5165\u961f\u7ed3\u70b9\u8ddd\u79bb\u548c\u961f\u9996\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u5927\u5219\u63d2\u5165\u81f3\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996 \u3002 \\(D\u00b4Esopo-Pape\\) \u7b97\u6cd5\uff1a\u5c06\u666e\u901a\u961f\u5217\u6362\u6210\u53cc\u7aef\u961f\u5217\uff0c \u5982\u679c\u4e00\u4e2a\u8282\u70b9\u4e4b\u524d\u6ca1\u6709\u5165\u961f\uff0c\u5219\u5c06\u5176\u63d2\u5165\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996 \u3002 \u65e2\u7136\u6709\u4e86\u4f18\u5316\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709\u76f8\u5e94\u7684\u5361\u7684\u65b9\u6cd5\uff0c\u5177\u4f53\u8bf7\u770b\u8fd9\u4e00\u7bc7\u56de\u7b54\uff1a https://www.zhihu.com/question/292283275/answer/484871888 \u6a21\u677f\u9898\uff1a https://ac.nowcoder.com/acm/contest/27274/E","title":"3.5bellman-ford\u7684\u5176\u4ed6\u4f18\u5316"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#36-spfa","text":"C++ #include <algorithm> #include <cstring> #include <iostream> #include <cstdio> #include <vector> #include <queue> const int INF = 0x3f3f3f3f ; const int N = 10000 + 10 ; using namespace std ; struct Node { int v , w ; }; vector < Node > E [ N ]; int n , m , s , t ; int dis [ N ]; bool vis [ N ]; void SPFA ( int s ){ for ( int i = 1 ; i <= n ; ++ i ) vis [ i ] = false , dis [ i ] = INF ; queue < int > que ; que . push ( s ); dis [ s ] = 0 , vis [ s ] = true ; while ( ! que . empty ()){ int t = que . front (); que . pop (); vis [ t ] = false ; for ( int i = 0 , l = E [ t ]. size (); i < l ; ++ i ) { int j = E [ t ][ i ]. v ; int k = E [ t ][ i ]. w ; if ( dis [ j ] > dis [ t ] + k ){ dis [ j ] = dis [ t ] + k ; if ( ! vis [ j ]){ vis [ j ] = true ; que . push ( j ); } } } } } int main () { cin >> n >> m >> s >> t ; int u , v , w ; for ( int i = 1 ; i <= m ; ++ i ) { cin >> u >> v >> w ; E [ u ]. push_back ({ v , w }); E [ v ]. push_back ({ u , w }); } SPFA ( s ); if ( dis [ t ] >= INF / 2 ) cout << \"-1\" << endl ; else cout << dis [ t ] << endl ; }","title":"3.6 SPFA\u6700\u77ed\u8def\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#37-spfa","text":"C++ #include <iostream> #include <algorithm> #include <cstdio> #include <queue> #include <vector> using namespace std ; #define PII pair<int,int> const int N = 2e6 + 10 ; int n , m , q ; vector < PII > E [ N ]; int dis [ N ], cnt [ N ]; bool vis [ N ]; void spfa (){ queue < int > que ; for ( int i = 1 ; i <= n ; ++ i ) que . push ( i ), vis [ i ] = true ; while ( ! que . empty ()){ int t = que . front (); que . pop (); vis [ t ] = false ; //\u8868\u660et\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u79bb\u5f00\u8fd9\u4e2a\u961f\u5217\u4e86 for ( int i = 0 , l = E [ t ]. size (); i < l ; ++ i ) { int j = E [ t ][ i ]. first , k = E [ t ][ i ]. second ; if ( dis [ j ] > dis [ t ] + k ) { dis [ j ] = dis [ t ] + k ; cnt [ j ] = cnt [ t ] + 1 ; if ( cnt [ j ] >= n ) { //\u627e\u5230\u8d1f\u6743\u8fb9 cout << \"Yes\" << endl ; return ; } if ( ! vis [ j ]) //\u5c06j\u8fd9\u4e2a\u70b9\u91cd\u65b0\u52a0\u5165\u961f\u5217 que . push ( j ), vis [ j ] = true ; } } } cout << \"No\" << endl ; } int main () { cin >> n >> m ; int u , v , w ; for ( int i = 0 ; i < m ; ++ i ) { cin >> u >> v >> w ; E [ u ]. push_back ({ v , w }); } spfa (); return 0 ; }","title":"3.7 SPFA\u5224\u8d1f\u73af\u5b9e\u73b0"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#38-spfa","text":"\u5173\u4e8e \\(SPFA\\) \u5224\u65ad\u6b63\u73af\u7684\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e00\u9898\uff1a https://blog.csdn.net/m0_46201544/article/details/123011318","title":"3.8 SPFA\u5224\u65ad\u6b63\u73af"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#dijkstra","text":"","title":"\u56db\u3001Dijkstra\u7b97\u6cd5"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#41","text":"\\(dijkstra\\) \u662f\u4e00\u79cd\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5,\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u9650\u4e3a \\(O(n^2)\\) (\u6734\u7d20),\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u8f83\u4e3a\u7a33\u5b9a ; \u52a0\u4e0a\u5806\u4f18\u5316\u4e4b\u540e\u66f4\u662f\u5177\u6709 \\(O((n+m)\\log_{2}n)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6,\u5728\u7a20\u5bc6\u56fe\u4e2d\u6709\u4e0d\u4fd7\u7684\u8868\u73b0. \\(Dijkstra\uff08/\u02c8dikstr\u0251/\u6216/\u02c8d\u025bikstr\u0251/\uff09\\) \u7b97\u6cd5\u7531\u8377\u5170\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6 \\(E. W. Dijkstra\\) \u4e8e \\(1956\\) \u5e74\u53d1\u73b0\uff0c \\(1959\\) \u5e74\u516c\u5f00\u53d1\u8868\u3002\u662f\u4e00\u79cd\u6c42\u89e3 \u975e\u8d1f\u6743\u56fe \u4e0a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002 \u8d2a\u5fc3\u601d\u60f3","title":"4.1\u7b80\u4ecb"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#42","text":"","title":"4.2\u590d\u6742\u5ea6"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#421","text":"","title":"4.2.1\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#4211dijkstra","text":"\\(O(N^2)\\)","title":"4.2.1.1\u6734\u7d20Dijkstra"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#4212dijkstra","text":"\\(O(M)\\)","title":"4.2.1.2\u94fe\u5f0f\u524d\u5411\u661f\u4f18\u5316+Dijkstra"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#422","text":"","title":"4.2.2\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#4221-dijkstra","text":"\\(O(N^2)\\)","title":"4.2.2.1 \u6734\u7d20Dijkstra"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#4222-dijkstra","text":"\\(O((n+m)\\log_{2}n)\\)","title":"4.2.2.2 \u94fe\u5f0f\u524d\u5411\u661f+\u5806\u4f18\u5316\u7684Dijkstra"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#43","text":"","title":"4.3\u4f18\u7f3a\u70b9"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#431","text":"\u6734\u7d20 \\(Dijkstra\\) \u548c\u5806\u4f18\u5316\u7684 \\(Dijkstra\\) \u57fa\u672c\u4e0a\u80fd\u89e3\u51b3\u6240\u6709\u7684\u6b63\u6743\u56fe\u6700\u77ed\u8def\u95ee\u9898\uff0c \u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u4f1a\u53d7\u5230\u9650\u5236","title":"4.3.1 \u4f18\u70b9"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#432","text":"\u4e0d\u80fd\u5904\u7406\u8d1f\u6743\u56fe\uff0c\u5982\u679c\u9700\u8981\u5904\u7406\u8d1f\u6743\u56fe\u8bf7\u79fb\u6b65 \\(SPFA\\) \u4f46\u662f\u5728\u67d0\u4e9b \u7279\u5b9a\u7684 \u542b\u6709\u8d1f\u8fb9\u7684\u56feDJ\u4e5f\u662f\u5bf9\u7684\u4f8b\u5982\uff1a \u4f46\u662f\u6211\u4eec\u7a0d\u52a0\u53d8\u6362\uff0c\u8fea\u6770\u65af\u7279\u62c9\u5c31\u4e0d\u80fd\u5904\u7406\u4e86\uff1a","title":"4.3.2 \u7f3a\u70b9"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#44","text":"","title":"4.4 \u7b97\u6cd5\u539f\u7406"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#441","text":"\\(Dijkstra\\) \u7684\u6838\u5fc3\u601d\u60f3\u5176\u5b9e\u5c31\u662f\u8d2a\u5fc3\u601d\u60f3\uff0c\u6bcf\u6b21\u5bfb\u627e\u4e00\u4e2a \u4e34\u8fd1\u70b9\u7684dis\u503c\u6700\u5c0f \u7684\u70b9\uff0c\u7136\u540e\u6211\u4eec\u518d\u6765\u5bf9\u8be5\u70b9\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c","title":"4.4.1\u601d\u60f3"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#442","text":"\u5c06\u7ed3\u70b9\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff1a\u5df2\u786e\u5b9a\u6700\u77ed\u8def\u957f\u5ea6\u7684\u70b9\u96c6\uff08\u8bb0\u4e3a \\(S\\) \u96c6\u5408\uff09\u7684\u548c\u672a\u786e\u5b9a\u6700\u77ed\u8def\u957f\u5ea6\u7684\u70b9\u96c6\uff08\u8bb0\u4e3a \\(T\\) \u96c6\u5408\uff09\u3002\u4e00\u5f00\u59cb\u6240\u6709\u7684\u70b9\u90fd\u5c5e\u4e8e \\(T\\) \u96c6\u5408\u3002 1.\u521d\u59cb\u5316 \\(dis[start] = 0\\) , \u5176\u4f59\u8282\u70b9\u7684 \\(dis\\) \u503c\u4e3a\u65e0\u7a77\u5927 2.\u4ece \\(T\\) \u96c6\u5408\u4e2d\u9009\u53d6\u4e00\u4e2a\u4ece\u6e90\u70b9\u5230\u8be5\u70b9\u7684\u6700\u77ed\u8def\u503c\u6700\u5c0f\u7684\u70b9 \\(x\\) \uff0c\u7136\u540e\u653e\u5165 \\(S\\) \u96c6\u5408\u4e2d\uff08\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 vis\u6570\u7ec4\u6807\u8bb0 \u6765\u5b9e\u73b0\u96c6\u5408\u5212\u5206\uff09 3.\u904d\u5386 \\(x\\) \u7684\u6240\u6709\u51fa\u8fb9 \\((x,y,z)\\) , \u82e5 \\(dis[y] > dis[x] + z\\) , \u5219\u4ee4 \\(dis[y] = dis[x] + z\\) 4.\u91cd\u590d 2,3 \u4e24\u6b65,\u76f4\u5230\u6240\u6709\u70b9\u90fd\u52a0\u5165\u96c6\u5408 \\(S\\) . \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2)\\)","title":"4.4.2 \u6d41\u7a0b"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#443","text":"T\u96c6\u5408\u5143\u7d20 S\u96c6\u5408\u5143\u7d20 \u5f53\u524d\u677e\u5f1b\u64cd\u4f5c \\(\\{2,3,4\\}\\) \\(\\{1 \\}\\) dis[1] = 0,dis[2]=1,dis[3]=4,dis[4]=6 \\(\\{3,4 \\}\\) \\(\\{1,2\\}\\) dis[4] = 3 \\(\\{ 3\\}\\) \\(\\{1,2,4\\}\\) \u65e0 \\(\\varnothing\\) \\(\\{1,2,3,4\\}\\) \u65e0 \u90a3\u4e48\u6700\u7ec8\u6211\u4eec\u7684dis\u503c\u5c31\u53d8\u6210\u4e86\uff1a \\(dis[1] = 0 \\\\ dis[2] = 1 \\\\ dis[3] = 4 \\\\ dis[4] = 3\\)","title":"4.4.3 \u7b97\u6cd5\u56fe\u89e3"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#45","text":"\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e \u5bfb\u627e \\(dis\\) \u503c\u6700\u5c0f \u7684\u70b9\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u901a\u8fc7 \u4e0d\u540c\u7684\u65b9\u5f0f\u7ef4\u62a4 \u7684\u8bdd\u90a3\u4e48\u7b97\u6cd5\u7684\u6574\u4f53\u590d\u6742\u5ea6\u5c31\u4f1a\u4e0d\u540c \u66b4\u529b\uff1a\u4e0d\u4f7f\u7528\u4efb\u4f55\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u7ef4\u62a4\uff0c\u6bcf\u6b21 2 \u64cd\u4f5c\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u76f4\u63a5\u5728 \\(T\\) \u96c6\u5408\u4e2d\u66b4\u529b\u5bfb\u627e\u6700\u77ed\u8def\u957f\u5ea6\u6700\u5c0f\u7684\u7ed3\u70b9\u30023\u64cd\u4f5c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(M)\\) \uff0c2\u64cd\u4f5c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(N^2)\\) \uff0c\u5168\u8fc7\u7a0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(N^2+M)=O(N^2)\\) \u3002 \u4e8c\u53c9\u5806\uff1a\u6bcf\u6210\u529f\u677e\u5f1b\u4e00\u6761\u8fb9 \\((u,v)\\) \uff0c\u5c31\u5c06 \\(v\\) \u63d2\u5165\u4e8c\u53c9\u5806\u4e2d\uff08\u5982\u679c \\(v\\) \u5df2\u7ecf\u5728\u4e8c\u53c9\u5806\u4e2d\uff0c\u76f4\u63a5\u4fee\u6539\u76f8\u5e94\u5143\u7d20\u7684\u6743\u503c\u5373\u53ef\uff09\uff0c2\u64cd\u4f5c\u76f4\u63a5\u53d6\u5806\u9876\u7ed3\u70b9\u5373\u53ef\u3002\u5171\u8ba1 \\(O(M)\\) \u6b21\u4e8c\u53c9\u5806\u4e0a\u7684\u63d2\u5165\uff08\u4fee\u6539\uff09\u64cd\u4f5c\uff0c \\(O(N)\\) \u6b21\u5220\u9664\u5806\u9876\u64cd\u4f5c\uff0c\u800c\u63d2\u5165\uff08\u4fee\u6539\uff09\u548c\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a \\(O(log_2N)\\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O((N+M)\\times log_2N) = O(mlog_2m)\\) \u3002 \u4f18\u5148\u961f\u5217\uff1a\u548c\u4e8c\u53c9\u5806\u7c7b\u4f3c\uff0c\u4f46\u4f7f\u7528\u4f18\u5148\u961f\u5217\u65f6\uff0c\u5982\u679c\u540c\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u88ab\u66f4\u65b0\u591a\u6b21\uff0c\u56e0\u4e3a\u5148\u524d\u66f4\u65b0\u65f6\u63d2\u5165\u7684\u5143\u7d20\u4e0d\u80fd\u88ab\u5220\u9664\uff0c\u4e5f\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u53ea\u80fd\u7559\u5728\u4f18\u5148\u961f\u5217\u4e2d\uff0c\u6545\u4f18\u5148\u961f\u5217\u5185\u7684\u5143\u7d20\u4e2a\u6570\u662f \\(O(M)\\) \u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(Mlog_2M)\\) Fibonacci \u5806\uff1a\u548c\u524d\u9762\u4e8c\u8005\u7c7b\u4f3c\uff0c\u4f46 Fibonacci \u5806\u63d2\u5165\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \uff0c\u6545\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(Nlog_2N+M)=O(Nlog_2N)\\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u4f18\u3002\u4f46\u56e0\u4e3a Fibonacci \u5806\u8f83\u4e8c\u53c9\u5806 \u4e0d\u6613\u5b9e\u73b0\uff0c\u6548\u7387\u4f18\u52bf\u4e5f\u4e0d\u591f\u5927 \uff0c\u7b97\u6cd5\u7ade\u8d5b\u4e2d\u8f83\u5c11\u4f7f\u7528\u3002 \u6ce8\u610f\u7684\u662f\uff1a\u5728 \u7a20\u5bc6\u56fe \u4e2d\u901a\u8fc7\u66b4\u529b\u65b9\u5f0f\u7ef4\u62a4\u6548\u7387\u66f4\u597d\uff0c \\(O(N^2)\\) \uff0c\u5728 \u7a00\u758f\u56fe \u4e2d\u901a\u8fc7\u5806\u4f18\u5316\u7684\u65b9\u5f0f\u7ef4\u62a4\u6548\u7387\u66f4\u9ad8\uff0c \\(O((n+m)\\log_{2}n)\\)","title":"4.5 \u4f18\u5316"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#46","text":"\\(dijkstra\\) \u4e3a\u4ec0\u4e48\u662f\u6b63\u786e\u7684\u5462\uff1f \uff0c\u5f53\u6211\u4eec\u5b58\u50a8\u7684\u6240\u6709\u7684\u8fb9\u90fd\u662f\u6b63\u6743\u8fb9\u65f6\uff0c\u6574\u4e2a\u56fe\u7684\u6700\u5c0f\u503c\u4e0d\u53ef\u80fd\u518d\u88ab\u5176\u4ed6\u8282\u70b9\u66f4\u65b0\uff0c\u6240\u4ee5\u6211\u4eec\u5728T\u96c6\u5408\u4e2d\u5bfb\u627edis\u6700\u5c0f\u503c\u5176\u5b9e\u5c31\u662f\u518d\u9009\u62e9\u5168\u5c40\u6700\u5c0f\u503c\uff0c\u4e5f\u5c31\u662f\u8d2a\u5fc3\u7684\u601d\u60f3 \u4e0b\u9762\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u8bc1\u660e\uff0c\u5728 \u6240\u6709\u8fb9\u6743\u503c\u975e\u8d1f \u7684\u524d\u63d0\u4e0b\uff0cDijkstra \u7b97\u6cd5\u7684\u6b63\u786e\u6027\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u6211\u4eec\u8981\u8bc1\u660e\u7684\uff0c\u5c31\u662f\u5728\u6267\u884c 1 \u64cd\u4f5c\u65f6\uff0c\u53d6\u51fa\u7684\u7ed3\u70b9 \\(u\\) \u6700\u77ed\u8def\u5747\u5df2\u7ecf\u88ab\u786e\u5b9a\uff0c\u5373\u6ee1\u8db3 \\(D(u)=dis(u)\\) \u3002 \u521d\u59cb\u7684\u65f6\u5019 \\(S=\\varnothing\\) \uff0c\u5047\u8bbe\u6210\u7acb\uff0c\u63a5\u4e0b\u6765\u4f7f\u7528\u53cd\u8bc1\u6cd5\u3002 \u8bbe \\(u\\) \u70b9\u4e3a\u7b97\u6cd5\u4e2d\u7b2c\u4e00\u4e2a\u5728\u52a0\u5165 \\(S\\) \u96c6\u5408\u65f6\u4e0d\u6ee1\u8db3 \\(D(u)=dis(u)\\) \u7684\u70b9\u3002\u56e0\u4e3a \\(s\\) \u70b9\u4e00\u5b9a\u6ee1\u8db3 \\(D(u)=dis(u)=0\\) \uff0c\u4e14\u5b83\u4e00\u5b9a\u662f\u7b2c\u4e00\u4e2a\u52a0\u5165 \\(S\\) \u96c6\u5408\u7684\u70b9\uff0c\u56e0\u6b64\u5c06 \\(u\\) \u52a0\u5165 \\(S\\) \u96c6\u5408\u524d \\(S != \\varnothing\\) \uff0c\u5982\u679c\u4e0d\u5b58\u5728 \\(s\\) \u5230 \\(u\\) \u7684\u8def\u5f84\uff0c\u5219 \\(D(u)=dis(u)=+\u221e\\) \uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\u3002 \u4e8e\u662f\u4e00\u5b9a\u5b58\u5728\u8def\u5f84 \\(s->x->y->u\\) \uff0c\u5176\u4e2dy\u4e3a \\(s->u\\) \u8def\u5f84\u4e0a\u7b2c\u4e00\u4e2a\u5c5e\u4e8e \\(T\\) \u96c6\u5408\u7684\u70b9\uff0c\u800c \\(x\\) \u4e3a \\(y\\) \u7684\u524d\u9a71\u8282\u70b9\uff08\u663e\u7136x\u2208S\uff09\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u53ef\u80fd\u5b58\u5728 \\(s=x\\) \u6216\u8005 \\(y=u\\) \u7684\u60c5\u51b5\uff0c\u5373 \\(s->x\\) \u6216\u8005 \\(y->u\\) \u662f\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u8def\u5f84 \u56e0\u4e3a\u5728 \\(u\\) \u7ed3\u70b9\u4e4b\u524d\u52a0\u5165\u7684\u7ed3\u70b9\u90fd\u6ee1\u8db3 \\(D(u)=dis(u)\\) \uff0c\u6240\u4ee5\u5728 \\(x\\) \u70b9\u52a0\u5165\u5230 \\(S\\) \u96c6\u5408\u65f6\uff0c\u6709 \\(D(u)=dis(u)\\) \uff0c\u6b64\u65f6\u8fb9 \\((x,y)\\) \u4f1a\u88ab\u677e\u5f1b\uff0c\u4ece\u800c\u53ef\u4ee5\u8bc1\u660e\uff0c\u5c06 \\(u\\) \u52a0\u5165\u5230 \\(S\\) \u65f6\uff0c\u4e00\u5b9a\u6709 \\(D(y)=dis(y)\\) \u3002 \u4e0b\u9762\u8bc1\u660e \\(D(u)=dis(u)\\) \u6210\u7acb\u3002\u5728\u8def\u5f84 \\(s->x->y->u\\) \u4e2d\uff0c\u56e0\u4e3a\u56fe\u4e0a\u6240\u6709\u8fb9\u8fb9\u6743\u975e\u8d1f\uff0c\u56e0\u6b64 \\(D(y)<= D(u)\\) \u3002\u4ece\u800c \\(dis(y)<=D(y)<=D(u)<=dis(u)\\) \u3002\u4f46\u662f\u56e0\u4e3a \\(u\\) \u7ed3\u70b9\u57282 \u8fc7\u7a0b\u4e2d\u88ab\u53d6\u51fa \\(T\\) \u96c6\u5408\u65f6\uff0c \\(y\\) \u7ed3\u70b9\u8fd8\u6ca1\u6709\u88ab\u53d6\u51fa \\(T\\) \u96c6\u5408\uff0c\u56e0\u6b64\u6b64\u65f6\u6709 \\(dis(u)<=dis(y)\\) \uff0c\u4ece\u800c\u5f97\u5230 \\(dis(y)=D(y)=D(u)=dis(u)\\) \uff0c\u8fd9\u4e0e \\(D(u)!=dis(u)\\) \u7684\u5047\u8bbe\u77db\u76fe\uff0c\u6545\u5047\u8bbe\u4e0d\u6210\u7acb\u3002 \u56e0\u6b64\u6211\u4eec\u8bc1\u660e\u4e86\uff0c2 \u64cd\u4f5c\u6bcf\u6b21\u53d6\u51fa\u7684\u70b9\uff0c\u5176\u6700\u77ed\u8def\u5747\u5df2\u7ecf\u88ab\u786e\u5b9a\u3002\u547d\u9898\u5f97\u8bc1\u3002","title":"4.6 \u6b63\u786e\u6027\u8bc1\u660e(\u5f15\u81ea\u7b97\u6cd5\u5bfc\u8bba)"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#47","text":"\u6a21\u677f\u9898\uff1a https://ac.nowcoder.com/acm/contest/27274/E","title":"4.7 \u4ee3\u7801\u5b9e\u73b0"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#471-dijkstra","text":"C++ #include <cstdio> #include <algorithm> #include <vector> #include <iostream> #include <cstring> using namespace std ; #define INF 0x3f3f3f3f const int N = 1e3 + 10 ; int f [ N ][ N ], n , m , dis [ N ]; bool vis [ N ]; void DJ ( int s ){ for ( int i = 1 ; i <= n ; ++ i ) dis [ i ] = INF , vis [ i ] = false ; dis [ s ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { int t = -1 ; for ( int j = 1 ; j <= n ; ++ j ) if ( ! vis [ j ] && ( t == -1 || dis [ j ] < dis [ t ])) t = j ; if ( t == -1 ) return ; vis [ t ] = true ; for ( int j = 1 ; j <= n ; ++ j ) if ( dis [ j ] > dis [ t ] + f [ t ][ j ]) dis [ j ] = dis [ t ] + f [ t ][ j ]; } } int main () { int s , t ; cin >> n >> m >> s >> t ; int u , v , w ; memset ( f , 0x3f , sizeof f ); for ( int i = 1 ; i <= m ; ++ i ){ cin >> u >> v >> w ; f [ v ][ u ] = f [ u ][ v ] = min ( f [ u ][ v ], w ); } DJ ( s ); if ( dis [ t ] == INF ) cout << \"-1\" << endl ; else cout << dis [ t ] << endl ; return 0 ; }","title":"4.7.1 \u6734\u7d20Dijkstra(\u7a20\u5bc6\u56fe)"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#472-dijkstra","text":"C++ #include <cstdio> #include <algorithm> #include <vector> #include <iostream> #include <cstring> #include <queue> using namespace std ; #define endl \"\\n\" #define PII pair<int,int> #define INF 0x3f3f3f3f const int N = 2e6 + 10 ; int dis [ N ], n , m ; bool vis [ N ]; vector < PII > E [ N ]; void DJ ( int s ){ for ( int i = 1 ; i <= n ; ++ i ) dis [ i ] = INF , vis [ i ] = false ; priority_queue < PII , vector < PII > , greater < PII > > que ; que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()){ int t = que . top (). second ; que . pop (); if ( vis [ t ]) continue ; vis [ t ] = true ; for ( int i = 0 , l = E [ t ]. size (); i < l ; ++ i ) { int j = E [ t ][ i ]. first , w = E [ t ][ i ]. second ; if ( dis [ j ] > dis [ t ] + w ){ dis [ j ] = dis [ t ] + w , que . push ({ dis [ j ], j }); } } } } int main () { ios :: sync_with_stdio ( 0 ); cin . tie ( 0 ); cout . tie ( 0 ); int s , t ; cin >> n >> m >> s >> t ; int u , v , w ; for ( int i = 1 ; i <= m ; ++ i ){ cin >> u >> v >> w ; E [ u ]. push_back ({ v , w }); E [ v ]. push_back ({ u , w }); } DJ ( s ); if ( dis [ t ] == INF ) cout << \"-1\" << endl ; else cout << dis [ t ] << endl ; return 0 ; }","title":"4.7.2 \u4f18\u5148\u961f\u5217\u4f18\u5316Dijkstra(\u7a00\u758f\u56fe)"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#473-dijkstra","text":"C++ #include <cstdio> #include <cstring> #include <queue> // using namespace std ; const int N = 2e5 + 5 ; //\u6570\u636e\u8303\u56f4 struct edge { //\u5b58\u50a8\u8fb9 int u , v , w , next ; //u\u4e3a\u8d77\u70b9\uff0cv\u4e3a\u7ec8\u70b9\uff0cw\u4e3a\u6743\u503c\uff0cnext\u4e3a\u524d\u7ee7 }; edge e [ N ]; int head [ N ], dis [ N ], n , m , s , cnt ; //head\u4e3a\u94fe\u4e2d\u6700\u4e0a\u9762\u7684\uff0cdis\u8868\u793a\u5f53\u524d\u7b54\u6848\uff0cn\u4e3a\u70b9\u6570\uff0cm\u4e3a\u8fb9\u6570\uff0cs\u4e3a\u8d77\u70b9\uff0ccnt\u8bb0\u5f55\u5f53\u524d\u8fb9\u7684\u6570\u91cf bool vis [ N ]; //vis\u8868\u793a\u8fd9\u4e2a\u70b9\u6709\u6ca1\u6709\u8d70\u8fc7 struct node { int w , to ; //w\u8868\u793a\u7d2f\u52a0\u7684\u6743\u503c\uff0cto\u8868\u793a\u5230\u7684\u5730\u65b9 bool operator < ( const node & x ) const { //\u91cd\u8f7d\u201c<\u201d\u53f7 return w > x . w ; } }; priority_queue < node > q ; //\u4f18\u5148\u961f\u5217\uff08\u5806\u4f18\u5316\uff09 void add ( int u , int v , int w ){ ++ cnt ; //\u589e\u52a0\u8fb9\u7684\u6570\u91cf e [ cnt ]. u = u ; //\u5b58\u8d77\u70b9 e [ cnt ]. v = v ; //\u5b58\u7ec8\u70b9 e [ cnt ]. w = w ; //\u5b58\u6743\u503c e [ cnt ]. next = head [ u ]; //\u5b58\u524d\u7ee7 head [ u ] = cnt ; //\u66f4\u65b0\u94fe\u6700\u4e0a\u9762\u7684\u5e8f\u53f7 } //\u94fe\u5f0f\u524d\u5411\u661f\uff08\u52a0\u8fb9\uff09 void Dijkstra (){ memset ( dis , 0x3f3f3f3f , sizeof ( dis )); //\u521d\u59cb\u5316\uff0c\u4e3adis\u6570\u7ec4\u9644\u4e00\u4e2a\u6781\u5927\u503c\uff0c\u65b9\u4fbf\u540e\u9762\u7684\u8ba1\u7b97 dis [ s ] = 0 ; //\u8d77\u70b9\u5230\u81ea\u5df1\u8ddd\u79bb\u4e3a0 q . push ( node { 0 , s }); //\u538b\u5165\u961f\u5217 while ( ! q . empty ()){ //\u961f\u5217\u4e0d\u4e3a\u7a7a node x = q . top (); //\u53d6\u51fa\u961f\u5217\u7b2c\u4e00\u4e2a\u5143\u7d20 q . pop (); //\u5f39\u51fa int u = x . to ; //\u6c42\u51fa\u8d77\u70b9 if ( vis [ u ]) continue ; //\u5df2\u53bb\u8fc7\u5c31\u4e0d\u53bb\u4e86 vis [ u ] = true ; //\u6807\u8bb0\u5df2\u53bb\u8fc7 for ( int i = head [ u ]; i ; i = e [ i ]. next ){ int v = e [ i ]. v ; //\u679a\u4e3e\u7ec8\u70b9 if ( dis [ v ] > dis [ u ] + e [ i ]. w ){ //\u82e5\u4e2d\u8f6c\u540e\u66f4\u4f18\uff0c\u5c31\u8f6c dis [ v ] = dis [ u ] + e [ i ]. w ; //\u66f4\u65b0 q . push ( node { dis [ v ], v }); //\u538b\u5165\u961f\u5217 } } } } int main (){ int u , v , w = 1 ; s = 1 ; scanf ( \"%d%d\" , & n , & m ); //\u8f93\u5165 for ( int i = 1 ; i <= m ; ++ i ){ scanf ( \"%d%d\" , & u , & v ); add ( u , v , w ); add ( v , u , w ); } Dijkstra (); //DJ printf ( \"%d \\n \" , dis [ n ]); //\u8f93\u51fa1-n\u7684\u6700\u77ed\u8def return 0 ; }","title":"4.7.3 \u94fe\u5f0f\u524d\u5411\u661f+\u4f18\u5148\u961f\u5217\u4f18\u5316Dijkstra"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#48","text":"\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a \\(pre\\) \u6570\u7ec4\uff0c\u7136\u540e \\(pre[i]\\) \u8bb0\u5f55\u7684\u662f\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u662f\u54ea\u4e00\u4e2a\u8282\u70b9\uff0c\u5f53\u7136\u521d\u59cb\u7684\u65f6\u5019\u6211\u4eec\u5168\u90e8\u521d\u59cb\u5316\u4e3a \\(-1\\) \uff0c\u7136\u540e\u6bcf\u6b21\u677e\u5f1b\u64cd\u4f5c\u7684\u65f6\u5019\u5c31\u66f4\u65b0\u4e00\u4e0b\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u4f60\u6709\u6ca1\u6709\u53d1\u73b0\u8fd9\u5c31\u662f\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u7136\u540e\u6700\u540e\u6253\u5370\u7684\u65f6\u5019\u8981\u4e48\u9012\u5f52\u6253\u5370\uff0c\u90a3\u4e48\u624b\u52a8\u5199\u6808\u6253\u5370\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u53ea\u662f\u9002\u7528\u4e8eDijkstra\uff0c\u800c\u4e14\u4e5f\u9002\u7528\u4e8e\u5176\u4ed6\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u5982 \\(SPFA\\) \u3001 \\(bellman\\_ford\\) \u3001 \\(Floyd\\) \u7b49\u7b49 \u90a3\u4e48\u7b80\u5355\u63cf\u8ff0\u4e00\u4e0b\u6253\u5370\u51fd\u6570 C++ void print ( int t ){ for ( int i = t ; ~ i ; i = pre [ i ]){ cout << i ; if ( i != s ) cout << \" -> \" ; } }","title":"4.8 \u8def\u5f84\u6253\u5370\u95ee\u9898"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#49","text":"\u5176\u5b9e\u6211\u4eec\u5728 \u677e\u5f1b\u64cd\u4f5c \u7684\u65f6\u5019\u5c31\u80fd\u8bb0\u5f55or\u66f4\u65b0\u4ece\u6e90\u70b9\u5230\u5f53\u524d\u70b9\u7684\u8def\u5f84\u6761\u6570\uff0c\u6a21\u677f\u9898\u53ef\u4ee5\u53c2\u89c1\u4e0b\u9762\u7684\uff1a \u6700\u77ed\u8def\u8ba1\u6570","title":"4.9 \u8def\u5f84\u7edf\u8ba1\u95ee\u9898"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#johnson","text":"\u5f85\u8865\u5145","title":"\u4e94\u3001Johnson \u5168\u6e90\u6700\u77ed\u8def"},{"location":"%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#_4","text":"\u9898\u76ee\u540d\u79f0 \u9898\u76ee\u94fe\u63a5 \u9898\u89e3\u535a\u5ba2 \u7ebf\u8def https://ac.nowcoder.com/acm/contest/27274/E https://blog.csdn.net/m0_46201544/article/details/122545202 \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09 https://www.luogu.com.cn/problem/P3371 \u6a21\u677f\u8bf7\u53c2\u89c1\u4e0a\u9762 \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09 https://www.luogu.com.cn/problem/P4779 \u6a21\u677f\u8bf7\u53c2\u89c1\u4e0a\u9762 \u90ae\u9012\u5458\u9001\u4fe1 https://www.luogu.com.cn/problem/P1629 https://acmer.blog.csdn.net/article/details/123031493 \u6709\u8fb9\u6570\u9650\u5236\u7684\u6700\u77ed\u8def https://www.acwing.com/problem/content/855/ https://acmer.blog.csdn.net/article/details/122857119 spfa \u6c42\u6700\u77ed\u8def https://www.acwing.com/problem/content/853/ https://acmer.blog.csdn.net/article/details/122857137 \u591a\u6e90\u6700\u77ed\u8def http://acm.mangata.ltd/p/P1507 https://acmer.blog.csdn.net/article/details/122857180 Frogger http://poj.org/problem?id=2253 https://acmer.blog.csdn.net/article/details/122998051 Heavy Transportation http://poj.org/problem?id=1797 https://acmer.blog.csdn.net/article/details/122998486 Silver Cow Party http://poj.org/problem?id=3268 https://acmer.blog.csdn.net/article/details/123002888 Wormholes http://poj.org/problem?id=3259 https://acmer.blog.csdn.net/article/details/123007502 Currency Exchange http://poj.org/problem?id=1860 https://acmer.blog.csdn.net/article/details/123011318 MPI Maelstrom http://poj.org/problem?id=1502 https://acmer.blog.csdn.net/article/details/123011950 Cow Contest http://poj.org/problem?id=3660 https://acmer.blog.csdn.net/article/details/123017032 Invitation Cards http://poj.org/problem?id=1511 https://acmer.blog.csdn.net/article/details/123017419 Candies http://poj.org/problem?id=3159 https://acmer.blog.csdn.net/article/details/123018565 \u9762\u57fa https://ac.nowcoder.com/acm/contest/27150/J https://blog.csdn.net/m0_46201544/article/details/122513361 On Average They're Purple https://ac.nowcoder.com/acm/contest/12606/H https://blog.csdn.net/m0_46201544/article/details/122810241 \u6700\u77ed\u8def\u8ba1\u6570 https://www.luogu.com.cn/problem/P1144 https://acmer.blog.csdn.net/article/details/123031941","title":"\u516d\u3001\u8bad\u7ec3\u9898\u5355"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/","text":"\u4e8c\u5206\u7b97\u6cd5 \u00b6 \u524d\u8a00 \u00b6 \u914d\u5957\u89c6\u9891\uff1a \u65b0\u7248\u672c\uff1a www.bilibili.com/video/BV1jP4y1E7K5 \u65e7\u7248\u672c\uff1a www.bilibili.com/video/BV1T44y1q7nL \u4e00\u3001\u4e8c\u5206\u7b80\u4ecb \u00b6 \u4e8c\u5206\u641c\u7d22\u662f\u4e00\u79cd\u65f6\u95f4\u590d\u6742\u4e3a \\(log_2n\\) \u7684\u7b97\u6cd5\uff0c\u53ef\u4ee5\u7528\u4e8e\u5355\u8c03\u51fd\u6570\u6c42\u6839\u548c\u5355\u8c03\u5e8f\u5217\u67e5\u8be2\u7684\u6709\u6548\u7b97\u6cd5\uff0c\u5373\u4f7f\u5728\u6570\u5217\u957f\u5ea6\u5728\u5f88\u5927\u7684\u60c5\u51b5\u4e0b\u4e5f\u80fd\u5f88\u5feb\u5bf9\u5176\u67e5\u8be2\uff0c\u5728\u6b64\u540c\u65f6\u4e8c\u5206\u7b97\u6cd5\u4e5f\u662f\u4e00\u79cd\u601d\u7ef4\u65b9\u5f0f\uff0c\u5728\u5f88\u591a\u89e3\u9898\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u66f4\u597d\u7684\u4f18\u5316\u4ee3\u7801\u7b49\u7b49 \u4e8c\u3001\u4e8c\u5206\u7b97\u6cd5\u7684\u539f\u7406 \u00b6 \u6bcf\u6b21\u62ff\u76ee\u6807\u6570\u503c\uff08\u4ee5\u4e0b\u7528key\u8868\u793a\uff09\u4e0e\u6570\u7ec4\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u636e\uff08\u4ee5\u4e0b\u7528a[mid]\u8868\u793a\uff0cmid\u8868\u793a\u6570\u7ec4\u4e2d\u95f4\u4f4d\u7f6e\u7d22\u5f15\u503c\uff09\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679ckey\u5927\u4e8ea[mid]\uff0c\u7ee7\u7eed\u5c06key\u4e0e\u5927\u4e8ea[mid]\u90e8\u5206\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u503c\u8fdb\u884c\u6bd4\u8f83\uff1b\u5982\u679ckey\u5c0f\u4e8ea[mid]\uff0c\u7ee7\u7eed\u5c06key\u4e0e\u5c0f\u4e8ea[mid]\u90e8\u5206\u7684\u4e2d\u95f4\u4f4d\u7f6e\u503c\u8fdb\u884c\u6bd4\u8f83\u3002 \u6ce8\uff1a\u5bf9\u4e8e\u65e0\u5e8f\u6570\u7ec4\uff0c\u82e5\u5148\u8fdb\u884c\u6392\u5e8f\uff0c\u518d\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u8fd9\u79cd\u65b9\u6cd5\u867d\u7136\u53ef\u4ee5\u5b9e\u73b0\u67e5\u627e\uff0c\u4f46\u662f\u4f1a\u6539\u53d8\u6700\u539f\u59cb\u6570\u7ec4\u7684\u5143\u7d20\u4f4d\u7f6e\uff0c\u6240\u4ee5\u9488\u5bf9\u65e0\u5e8f\u6570\u7ec4\uff0c\u6700\u597d\u7528\u57fa\u672c\u7684\u67e5\u627e\u7b97\u6cd5\u5b9e\u73b0 \u4e09\u3001\u4e8c\u5206\u5e94\u7528 \u00b6 \u4e8c\u5206\u7b97\u6cd5\u901a\u5e38\u662f\u4f5c\u4e3a\u4e00\u79cd\u4f18\u5316\u624b\u6bb5\uff0c\u5e2e\u52a9\u6211\u4eec\u5728\u7ef4\u62a4\u4e00\u4e9b\u5355\u8c03\u7c7b\u578b\u7684\u6570\u636e\u7684\u65f6\u5019\u80fd\u5feb\u901f\u627e\u5230\u5e76\u4fee\u6539\uff0c\u4f46\u662f\u4e0d\u662f\u8bf4\u4e8c\u5206\u7b97\u6cd5\u4e00\u5b9a\u4f9d\u8d56\u4e8e\u6570\u636e\u5355\u8c03\u6027\uff0c\u6211\u4eec\u6df1\u5165\u7684\u53bb\u60f3\uff0c\u5176\u5b9e\u4e8c\u5206\u7b97\u6cd5\u53ea\u9700\u8981\u6ee1\u8db3\u4e00\u4e2a\u6761\u4ef6\uff0c\u5f53\u6211\u4eec\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\u540e\u4e8b\u60c5\u5df2\u7ecf\u53d1\u751f\u4e86\uff0c\u6362\u53e5\u8bdd\u8bf4\u8fd9\u4e2a\u70b9\u5bf9\u4ee5\u540e\u7684\u72b6\u6001\u9020\u6210\u4e86\u5f71\u54cd\uff0c\u6ca1\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\u7684\u65f6\u5019\u4e8b\u60c5\u8fd8\u6ca1\u53d1\u751f\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u4e2a\u70b9\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u70b9\u6211\u4eec\u53ea\u9700\u8981\u7528\u4e00\u4e2a check() \u51fd\u6570\u6765\u4f5c\u4e3a\u6289\u62e9\u5c31\u597d\u4e86\u3002\u4e0d\u4f1a\u5b58\u5728\u4e00\u4e9b\u6a21\u677f\u7684\u4e8c\u5206\u9898\u76ee\u7ed9\u4f60\u505a\uff08\u6bd4\u8d5b\u7684\u65f6\u5019\uff09 \u56db\u3001\u4e8c\u5206\u4ee3\u7801\u5b9e\u73b0 \u00b6 4.1 \u6734\u7d20\u5b9e\u73b0 \u00b6 C++ int search ( int l , int r , int key ) { int mid = l + r >> 1 ; while ( a [ mid ] != key ) { if ( a [ mid ] > key ) { r = mid - 1 ; } else { l = mid + 1 ; } if ( l > r ) return -1 ; //\u6ca1\u627e\u5230 mid = l + r >> 1 ; } return mid ; } 4.2 \u901a\u7528\u5b9e\u73b0 \u00b6 C++ int search ( int k ) { int l = -1 , r = n ; //\u6ce8\u610f\u7684\u662f\u6570\u7ec4\u662f\u4ece0\u5f00\u59cb\u7684 while ( l + 1 < r ) { int mid = l + r >> 1 ; if ( a [ mid ] <= k ) l = mid ; else r = mid ; } return r ; //\u8fd4\u56de\u7684\u662f\u5927\u4e8ek\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e } \u4e94\u3001\u9644\u4e0a\u7ec3\u4e60\u9898 \u00b6 https://www.luogu.com.cn/problem/P2249 P2249 \u3010\u6df1\u57fa13.\u4f8b1\u3011\u67e5\u627e https://www.luogu.com.cn/problem/P1102 P1102 A-B \u6570\u5bf9 https://www.luogu.com.cn/problem/P1024 P1024 [NOIP2001 \u63d0\u9ad8\u7ec4] \u4e00\u5143\u4e09\u6b21\u65b9\u7a0b\u6c42\u89e3 https://www.luogu.com.cn/problem/P1678 P1678 \u70e6\u607c\u7684\u9ad8\u8003\u5fd7\u613f https://www.luogu.com.cn/problem/P2440 P2440 \u6728\u6750\u52a0\u5de5 http://120.78.128.11/Problem.jsp?pid=2145 \u4e8c\u5206\u6cd5\u6a21\u677f http://120.78.128.11/Problem.jsp?pid=1762 \u676f\u5b50 http://120.78.128.11/Problem.jsp?pid=2366 \u4e8c\u5206\u5f3a\u5316\u2014\u2014\u5168\u9762\u67e5\u8be2 http://120.78.128.11/Problem.jsp?pid=2446 Champion_Q\u7684\u9b54\u6cd5\u86cb\u7cd5 https://www.luogu.com.cn/problem/P2678 P2678 [NOIP2015 \u63d0\u9ad8\u7ec4] \u8df3\u77f3\u5934 https://www.luogu.com.cn/problem/P3853 P3853 [TJOI2007]\u8def\u6807\u8bbe\u7f6e","title":"\u4e8c\u5206\u7b97\u6cd5"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/#_1","text":"","title":"\u4e8c\u5206\u7b97\u6cd5"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/#_2","text":"\u914d\u5957\u89c6\u9891\uff1a \u65b0\u7248\u672c\uff1a www.bilibili.com/video/BV1jP4y1E7K5 \u65e7\u7248\u672c\uff1a www.bilibili.com/video/BV1T44y1q7nL","title":"\u524d\u8a00"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/#_3","text":"\u4e8c\u5206\u641c\u7d22\u662f\u4e00\u79cd\u65f6\u95f4\u590d\u6742\u4e3a \\(log_2n\\) \u7684\u7b97\u6cd5\uff0c\u53ef\u4ee5\u7528\u4e8e\u5355\u8c03\u51fd\u6570\u6c42\u6839\u548c\u5355\u8c03\u5e8f\u5217\u67e5\u8be2\u7684\u6709\u6548\u7b97\u6cd5\uff0c\u5373\u4f7f\u5728\u6570\u5217\u957f\u5ea6\u5728\u5f88\u5927\u7684\u60c5\u51b5\u4e0b\u4e5f\u80fd\u5f88\u5feb\u5bf9\u5176\u67e5\u8be2\uff0c\u5728\u6b64\u540c\u65f6\u4e8c\u5206\u7b97\u6cd5\u4e5f\u662f\u4e00\u79cd\u601d\u7ef4\u65b9\u5f0f\uff0c\u5728\u5f88\u591a\u89e3\u9898\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u66f4\u597d\u7684\u4f18\u5316\u4ee3\u7801\u7b49\u7b49","title":"\u4e00\u3001\u4e8c\u5206\u7b80\u4ecb"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/#_4","text":"\u6bcf\u6b21\u62ff\u76ee\u6807\u6570\u503c\uff08\u4ee5\u4e0b\u7528key\u8868\u793a\uff09\u4e0e\u6570\u7ec4\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u636e\uff08\u4ee5\u4e0b\u7528a[mid]\u8868\u793a\uff0cmid\u8868\u793a\u6570\u7ec4\u4e2d\u95f4\u4f4d\u7f6e\u7d22\u5f15\u503c\uff09\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679ckey\u5927\u4e8ea[mid]\uff0c\u7ee7\u7eed\u5c06key\u4e0e\u5927\u4e8ea[mid]\u90e8\u5206\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u503c\u8fdb\u884c\u6bd4\u8f83\uff1b\u5982\u679ckey\u5c0f\u4e8ea[mid]\uff0c\u7ee7\u7eed\u5c06key\u4e0e\u5c0f\u4e8ea[mid]\u90e8\u5206\u7684\u4e2d\u95f4\u4f4d\u7f6e\u503c\u8fdb\u884c\u6bd4\u8f83\u3002 \u6ce8\uff1a\u5bf9\u4e8e\u65e0\u5e8f\u6570\u7ec4\uff0c\u82e5\u5148\u8fdb\u884c\u6392\u5e8f\uff0c\u518d\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u8fd9\u79cd\u65b9\u6cd5\u867d\u7136\u53ef\u4ee5\u5b9e\u73b0\u67e5\u627e\uff0c\u4f46\u662f\u4f1a\u6539\u53d8\u6700\u539f\u59cb\u6570\u7ec4\u7684\u5143\u7d20\u4f4d\u7f6e\uff0c\u6240\u4ee5\u9488\u5bf9\u65e0\u5e8f\u6570\u7ec4\uff0c\u6700\u597d\u7528\u57fa\u672c\u7684\u67e5\u627e\u7b97\u6cd5\u5b9e\u73b0","title":"\u4e8c\u3001\u4e8c\u5206\u7b97\u6cd5\u7684\u539f\u7406"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/#_5","text":"\u4e8c\u5206\u7b97\u6cd5\u901a\u5e38\u662f\u4f5c\u4e3a\u4e00\u79cd\u4f18\u5316\u624b\u6bb5\uff0c\u5e2e\u52a9\u6211\u4eec\u5728\u7ef4\u62a4\u4e00\u4e9b\u5355\u8c03\u7c7b\u578b\u7684\u6570\u636e\u7684\u65f6\u5019\u80fd\u5feb\u901f\u627e\u5230\u5e76\u4fee\u6539\uff0c\u4f46\u662f\u4e0d\u662f\u8bf4\u4e8c\u5206\u7b97\u6cd5\u4e00\u5b9a\u4f9d\u8d56\u4e8e\u6570\u636e\u5355\u8c03\u6027\uff0c\u6211\u4eec\u6df1\u5165\u7684\u53bb\u60f3\uff0c\u5176\u5b9e\u4e8c\u5206\u7b97\u6cd5\u53ea\u9700\u8981\u6ee1\u8db3\u4e00\u4e2a\u6761\u4ef6\uff0c\u5f53\u6211\u4eec\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\u540e\u4e8b\u60c5\u5df2\u7ecf\u53d1\u751f\u4e86\uff0c\u6362\u53e5\u8bdd\u8bf4\u8fd9\u4e2a\u70b9\u5bf9\u4ee5\u540e\u7684\u72b6\u6001\u9020\u6210\u4e86\u5f71\u54cd\uff0c\u6ca1\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\u7684\u65f6\u5019\u4e8b\u60c5\u8fd8\u6ca1\u53d1\u751f\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u4e2a\u70b9\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u70b9\u6211\u4eec\u53ea\u9700\u8981\u7528\u4e00\u4e2a check() \u51fd\u6570\u6765\u4f5c\u4e3a\u6289\u62e9\u5c31\u597d\u4e86\u3002\u4e0d\u4f1a\u5b58\u5728\u4e00\u4e9b\u6a21\u677f\u7684\u4e8c\u5206\u9898\u76ee\u7ed9\u4f60\u505a\uff08\u6bd4\u8d5b\u7684\u65f6\u5019\uff09","title":"\u4e09\u3001\u4e8c\u5206\u5e94\u7528"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/#_6","text":"","title":"\u56db\u3001\u4e8c\u5206\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/#41","text":"C++ int search ( int l , int r , int key ) { int mid = l + r >> 1 ; while ( a [ mid ] != key ) { if ( a [ mid ] > key ) { r = mid - 1 ; } else { l = mid + 1 ; } if ( l > r ) return -1 ; //\u6ca1\u627e\u5230 mid = l + r >> 1 ; } return mid ; }","title":"4.1 \u6734\u7d20\u5b9e\u73b0"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/#42","text":"C++ int search ( int k ) { int l = -1 , r = n ; //\u6ce8\u610f\u7684\u662f\u6570\u7ec4\u662f\u4ece0\u5f00\u59cb\u7684 while ( l + 1 < r ) { int mid = l + r >> 1 ; if ( a [ mid ] <= k ) l = mid ; else r = mid ; } return r ; //\u8fd4\u56de\u7684\u662f\u5927\u4e8ek\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e }","title":"4.2 \u901a\u7528\u5b9e\u73b0"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/#_7","text":"https://www.luogu.com.cn/problem/P2249 P2249 \u3010\u6df1\u57fa13.\u4f8b1\u3011\u67e5\u627e https://www.luogu.com.cn/problem/P1102 P1102 A-B \u6570\u5bf9 https://www.luogu.com.cn/problem/P1024 P1024 [NOIP2001 \u63d0\u9ad8\u7ec4] \u4e00\u5143\u4e09\u6b21\u65b9\u7a0b\u6c42\u89e3 https://www.luogu.com.cn/problem/P1678 P1678 \u70e6\u607c\u7684\u9ad8\u8003\u5fd7\u613f https://www.luogu.com.cn/problem/P2440 P2440 \u6728\u6750\u52a0\u5de5 http://120.78.128.11/Problem.jsp?pid=2145 \u4e8c\u5206\u6cd5\u6a21\u677f http://120.78.128.11/Problem.jsp?pid=1762 \u676f\u5b50 http://120.78.128.11/Problem.jsp?pid=2366 \u4e8c\u5206\u5f3a\u5316\u2014\u2014\u5168\u9762\u67e5\u8be2 http://120.78.128.11/Problem.jsp?pid=2446 Champion_Q\u7684\u9b54\u6cd5\u86cb\u7cd5 https://www.luogu.com.cn/problem/P2678 P2678 [NOIP2015 \u63d0\u9ad8\u7ec4] \u8df3\u77f3\u5934 https://www.luogu.com.cn/problem/P3853 P3853 [TJOI2007]\u8def\u6807\u8bbe\u7f6e","title":"\u4e94\u3001\u9644\u4e0a\u7ec3\u4e60\u9898"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/","text":"\u524d\u7f00\u548c\u4e0e\u5dee\u5206 \u00b6 \u524d\u8a00 \u00b6 \u914d\u5957\u89c6\u9891\uff1a www.bilibili.com/video/BV1xq4y1y7Kz \u4e00\u3001\u524d\u7f00\u548c \u00b6 1.1\u4ec0\u4e48\u662f\u524d\u7f00\u548c \u00b6 \u524d\u7f00\u548c\u662f\u4e00\u79cd\u91cd\u8981\u7684\u9884\u5904\u7406\uff0c\u80fd\u5927\u5927\u964d\u4f4e\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u5e38\u5e38\u7528\u4e8e\u4e00\u4e9b\u9898\u76ee\u7684\u4f18\u5316\uff0c\u5176\u5b9e\u524d\u7f00\u548c\u662f\u4e00\u79cd\u601d\u60f3\uff0c\u4e3b\u8981\u662f\u7ef4\u62a4 \u79bb\u7ebf\u533a\u95f4\u4fe1\u606f \u7684\u4e00\u79cd\u4f18\u5316\u624b\u6bb5 \u6700\u7b80\u5355\u7684\u4e00\u9053\u9898\u5c31\u662f\u7ed9\u5b9a n \u4e2a\u6570\u548c m \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u6bb5\u533a\u95f4\u7684\u548c\u3002\u6c42\u4e00\u4e2a O(n + m) \u7684\u505a\u6cd5\u3002 1.2\u4e00\u7ef4\u524d\u7f00\u548c \u00b6 1.2.1\u95ee\u9898\u5f15\u51fa \u00b6 \u4f8b\u9898\uff1a http://acm.mangata.ltd/p/P1501 1.2.2\u601d\u8def \u00b6 \u5bf9\u4e8e\u4e00\u7ef4\u524d\u7f00\u548c\u6211\u4eec\u5728\u8f93\u5165\u6570\u636e\u7684\u65f6\u5019\u5c31\u80fd\u8fdb\u884c\u5904\u7406\uff0c\u5047\u8bbe\u524d\u7f00\u548c\u6570\u7ec4\u662fpre\uff0c\u90a3\u4e48\u6211\u4eec\u7684 pre[i] = pre[i-1]+a[i] \uff0c\u8fd9\u6837\u5c31\u7ef4\u62a4\u4e86\u4e00\u4e2a\u524d\u7f00\uff0c\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u7684i\u4ece1\u5f00\u59cb\u904d\u5386 \u4ee3\u7801\u793a\u4f8b\uff1a C++ for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ]; pre [ i ] = pre [ i -1 ] + a [ i ]; } \u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u7ef4\u524d\u7f00\u548c\u7684\u4e00\u4e2a\u6570\u7ec4\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7ec4\u53ef\u4ee5\u5e72\u4ec0\u4e48\u4e8b\u5462\uff1f\u9996\u5148\u6211\u4eec\u80fd\u5728 \\(O(1)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6c42\u51fa\u4efb\u4e00\u4e00\u4e2a\u533a\u95f4\u7684\u548c\u4f8b\u5982\u6211\u4eec\u8981\u6c42 \\([L,R]\\) \u533a\u95f4\u548c\uff0c\u5373 pre[R]-pre[L-1] \uff0c 1.3\u4e00\u7ef4\u524d\u7f00\u79ef \u00b6 1.3.1\u95ee\u9898\u5f15\u51fa \u00b6 \u4f8b\u9898\uff1a https://ac.nowcoder.com/acm/contest/19483/A 1.3.2\u601d\u8def \u00b6 \u7531\u4e8e\u6709\u524d\u7f00\u548c\u8fd9\u79cd\u64cd\u4f5c\uff0c\u6211\u80fd\u80fd\u610f\u8bc6\u5230\u8fd9\u662f\u4e00\u79cd\u601d\u60f3\uff0c\u987a\u7740\u8fd9\u4e2a\u601d\u60f3\u6211\u4eec\u80fd\u60f3\u5230\u524d\u7f00\u79ef\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u548c\u524d\u7f00\u548c\u76f8\u4f3c\u6211\u4eec\u901a\u8fc7\u5bf9pre\u6570\u7ec4\u8fdb\u884c\u4e58\u6cd5\u66f4\u65b0\u7136\u540e \u4e0d\u65ad\u53d6\u6a21 \u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u524d\u7f00\u79ef\uff0c\u5982\u679c\u6211\u4eec\u60f3\u83b7\u5f97 \\([L,R]\\) \u7684\u533a\u95f4\u79ef\u90a3\u4e48\u9700\u8981\u7528\u5230 \u9006\u5143 \u7684\u64cd\u4f5c\u5373 \\(ans = pre[R] \\times inv(pre[L-1])\\) \u4ee3\u7801\u793a\u4f8b\uff1a C++ pre [ 0 ] = 1 ; //\u5426\u5219\u5168\u90fd\u53d8\u62100\u4e86 for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ]; pre [ i ] = pre [ i -1 ] * a [ i ] % mod ; } \u6c42 [ L , R ] \u533a\u95f4\u5185\u524d\u7f00\u79ef ans = pre [ R ] * inv ( pre [ L -1 ]); 1.4 \u4e00\u7ef4\u524d\u7f00\u5f02\u6216 \u00b6 \u548c\u4e0a\u9762\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u7ef4\u62a4\u7684\u662f\u5f02\u6216\u548c 1.5\u4e8c\u7ef4\u524d\u7f00\u548c \u00b6 1.5.1\u95ee\u9898\u5f15\u51fa \u00b6 \u4f8b\u9898\uff1a https://www.luogu.com.cn/problem/P2004 1.5.2\u601d\u8def \u00b6 \u5bf9\u4e8e\u4e8c\u7ef4\u524d\u7f00\u548c\u540c\u7406\uff0c\u6211\u4eec\u4ece\u7ef4\u62a4\u7ebf\u524d\u7f00\u548c\u53d8\u6210\u4e86\u77e9\u9635\u524d\u7f00\u548c\uff0c\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u4ece\u7ef4\u62a4\u4e00\u7ef4\u524d\u7f00\u548c\u53d8\u6210\u4e86\u7ef4\u62a4\u4e8c\u7ef4\u524d\u7f00\u548c\u3002\u6211\u4eec\u6b64\u65f6\u7684 pre[i][j] \u8868\u793a\u7684\u542b\u4e49\u5c31\u662f\u4ece\u5de6\u4e0a\u89d2 [1][1] \u5230\u53f3\u4e0b\u89d2 [i][j] \u8fd9\u4e2a\u77e9\u9635\u7684\u4e00\u4e2a\u548c\uff0c\u56e0\u6b64\u6211\u4eec\u80fd\u5199\u51fa\u8fd9\u6837\u4e00\u4e2a\u7ef4\u62a4\u4ee3\u7801 \\(pre[i][j]=pre[i-1][j] + pre[i][j-1] - pre[i-1][j-1] + a[i][j]\\) \uff0c\u8fd9\u4e2a\u4e5f\u662f\u5f88\u597d\u7406\u89e3\u7684\uff0c\u73b0\u5728\u6211\u4eec\u5982\u679c\u8981\u6c42\u4e00\u4e2a\u5de6\u4e0a\u89d2\u4e3a \\(x_1,y1\\) \uff0c\u53f3\u4e0b\u89d2\u4e3a \\(x_2,y_2\\) \u7684\u77e9\u9635\u548c\u5c31\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a \\(ans=pre[x2][y2]-pre[x2][y1-1]-pre[x1][y2-1]+pre[x1-1][y1-1]\\) \u6211\u4eec\u53ef\u4ee5\u6765\u770b\u8fd9\u6837\u4e00\u5f20\u56fe\uff1a \u5bf9\u4e8e\u7c89\u8272\u90e8\u5206\u5c31\u662f\u6211\u4eec\u60f3\u8981\u6c42\u5f97\u7684\u77e9\u9635\u8303\u56f4\uff0c\u5bf9\u4e8e\u9ec4\u8272\uff0c\u548c\u68d5\u8272\u90e8\u5206\u5c31\u662f\u6211\u4eec\u591a\u4f59\u7684\u8303\u56f4\uff0c\u9700\u8981\u51cf\u53bb\uff0c\u4f46\u662f\u5728\u51cf\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u9047\u5230\u51cf\u7684\u533a\u95f4\u91cd\u590d\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u52a0\u4e0a \\(pre[x1-1][y1-1]\\) \u7684\u64cd\u4f5c \u4ee3\u7801\u5b9e\u73b0\uff1a C++ for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { cin >> a [ i ][ j ]; pre [ i ][ j ] = pre [ i -1 ][ j ] + pre [ i ][ j -1 ] - pre [ i -1 ][ j -1 ] + a [ i ][ j ]; } } ans = pre [ x2 ][ y2 ] - pre [ x2 ][ y1 -1 ] - pre [ x1 -1 ][ y2 ] + pre [ x1 -1 ][ y1 -1 ]; 1.5\u4f18\u7f3a\u70b9 \u00b6 \u4f18\u70b9\u5f88\u663e\u7136\uff0c\u5c31\u662f\u80fd\u5feb\u901f\u6c42\u51fa\u533a\u95f4\u6216\u8005\u77e9\u9635\u7684 \u4e00\u4e9b\u4fe1\u606f \u4f8b\u5982\u548c\u3001\u79ef\u3001\u5f02\u6216\u7b49 \u7f3a\u70b9\u4e5f\u5f88\u663e\u7136\uff0c\u5c31\u662f \u4e0d\u80fd\u5728\u7ebf\u64cd\u4f5c \uff0c\u53ea\u80fd \u79bb\u7ebf\u5904\u7406 \uff0c\u9047\u5230\u4e00\u4e2a\u52a8\u6001\u53d8\u5316\u7684\u5c31\u4e0d\u80fd\u4f7f\u7528\u524d\u7f00\u548c\u64cd\u4f5c\u3002 \u4e8c\u3001\u5dee\u5206\u6570\u7ec4 \u00b6 2.1\u5b9a\u4e49 \u00b6 \u5bf9\u4e8e\u5df2\u77e5\u6709n\u4e2a\u5143\u7d20\u7684\u79bb\u7ebf\u6570\u5217d\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u8bb0\u5f55\u5b83\u6bcf\u9879\u4e0e\u524d\u4e00\u9879\u5dee\u503c\u7684\u5dee\u5206\u6570\u7ec4 \\(f\\) \uff1a\u663e\u7136\uff0c \\(f[1]=d[1]-0=d[1];\\) \u5bf9\u4e8e\u6574\u6570 \\(i\u2208[2,n]\\) \uff0c\u6211\u4eec\u8ba9 \\(f[i]=d[i]-d[i-1]\\) \u3002 2.2\u6027\u8d28 \u00b6 \u8ba1\u7b97\u6570\u5217\u5404\u9879\u7684\u503c\uff1a\u89c2\u5bdf \\(d[2]=f[1]+f[2]=d[1]+d[2]-d[1]=d[2]\\) \u53ef\u77e5\uff0c\u6570\u5217\u7b2c \\(i\\) \u9879\u7684\u503c\u662f\u53ef\u4ee5\u7528\u5dee\u5206\u6570\u7ec4\u7684\u524d \\(i\\) \u9879\u7684\u548c\u8ba1\u7b97\u7684\uff0c\u5373 \\(d[i]=f[i]\\) \u7684\u524d\u7f00\u548c\u3002 \u7b2c \\(i\\) \u9879\u7684\u524d\u7f00\u548c\u5373\u4e3a\u6570\u5217\u524d \\(i\\) \u9879\u7684\u548c \u901a\u8fc7\u4ee5\u4e0a\u4e24\u70b9\u6027\u8d28\u6211\u4eec\u80fd\u5728 \\(O(N)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6c42\u51fa\u533a\u95f4\u548c\u4ee5\u53ca\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u503c\uff0c\u5e26\u6765\u7684\u597d\u5904\u5c31\u662f\u80fd\u5feb\u901f\u5904\u7406\u533a\u95f4\u52a0\u51cf\u64cd\u4f5c 2.3\u4f7f\u7528 \u00b6 \u5bf9\u4e8e\u533a\u95f4 \\([L,R]\\) \u7684\u589e\u52a0\u4e00\u4e2ax\uff0c\u90a3\u4e48\u5728\u5dee\u5206\u6570\u7ec4\u4e0a\u6211\u4eec\u8fdb\u884c\u7684\u64cd\u4f5c\u5c31\u662f \\(f[L]+x,f[R+1]-x\\) \uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u6765\u56de\u987e\u4e00\u4e0b\u5bf9\u4e8e\u5dee\u5206\u6570\u7ec4\u6c42\u524d \\(i\\) \u9879\u524d\u7f00\u548c\u6c42\u51fa\u6765\u7684\u5c31\u662f \\(d[i]\\) \uff0c\u90a3\u4e48\u6211\u4eec\u5728 \\(f[L]\\) \u7684\u4f4d\u7f6e\u8fdb\u884c\u4e00\u4e2a\u52a0\u6cd5\u64cd\u4f5c\u4e5f\u5c31\u662f\u8ba9\u4eceL\u8fd9\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u7684\u540e\u9762\u6240\u6709\u7684d\u8fdb\u884c\u4e00\u4e2a+x\u7684\u64cd\u4f5c\uff0c\u5bf9\u4e8e \\(F[R+1]-x\\) \u5176\u5b9e\u5c31\u662f\u8ba9R+1\u5230\u540e\u9762\u6240\u6709\u5143\u7d20\u51cf\u53bbx\uff0c\u56e0\u4e3a\u524d\u9762\u5728L\u8fd9\u4e2a\u4f4d\u7f6e\u8fdb\u884c\u4e86\u4ee5\u540e\u6240\u6709\u5143\u7d20+x\u8fd9\u4e2a\u64cd\u4f5c \u8fd9\u6837\u4e00\u6765\u533a\u95f4\u4fee\u6539\u518d\u6c42\u5355\u70b9\u7684\u503c\u6216\u8005\u533a\u95f4\u503c\u7684\u8bdd\u590d\u6742\u5ea6\u5c31\u662f \\(O(N)\\) \u7684\uff0c\u5176\u5b9e\u5230\u540e\u9762\u6211\u4eec\u4f1a\u53bb\u5b66\u4e60\u4e00\u79cd\u6570\u636e\u7ed3\u6784->\u6811\u72b6\u6570\u7ec4\uff0c\u6211\u4eec\u5229\u7528\u5dee\u5206\u8fd9\u4e2a\u6027\u8d28\u7684\u8bdd\uff0c\u5728 \\(O(log_n)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u80fd\u6c42\u5230\u5355\u70b9\u548c\u533a\u95f4\u503c\uff0c\u73b0\u5728\u6211\u4eec\u5c31\u4e0d\u505a\u63a2\u7a76\u4e86\uff0c\u5176\u5b9e\u5dee\u5206\u91cd\u8981\u7684\u4e0d\u662f\u5dee\u5206\u6570\u7ec4\uff0c\u800c\u662f \u5dee\u5206\u601d\u7ef4 \u3002 \u4e09\u3001\u7ec3\u4e60\u9898\u5355 \u00b6 \u6d1b\u8c37\u9898\u5355\uff1a https://www.luogu.com.cn/training/200 \u725b\u5ba2\uff1a https://ac.nowcoder.com/acm/contest/19483 \u725b\u5ba2\u7684BCD\u53ef\u80fd\u6709\u70b9\u96be\uff0c\u53ef\u4ee5\u4e0d\u7528\u53bb\u505a","title":"\u524d\u7f00\u548c\u4e0e\u5dee\u5206"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#_1","text":"","title":"\u524d\u7f00\u548c\u4e0e\u5dee\u5206"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#_2","text":"\u914d\u5957\u89c6\u9891\uff1a www.bilibili.com/video/BV1xq4y1y7Kz","title":"\u524d\u8a00"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#_3","text":"","title":"\u4e00\u3001\u524d\u7f00\u548c"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#11","text":"\u524d\u7f00\u548c\u662f\u4e00\u79cd\u91cd\u8981\u7684\u9884\u5904\u7406\uff0c\u80fd\u5927\u5927\u964d\u4f4e\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u5e38\u5e38\u7528\u4e8e\u4e00\u4e9b\u9898\u76ee\u7684\u4f18\u5316\uff0c\u5176\u5b9e\u524d\u7f00\u548c\u662f\u4e00\u79cd\u601d\u60f3\uff0c\u4e3b\u8981\u662f\u7ef4\u62a4 \u79bb\u7ebf\u533a\u95f4\u4fe1\u606f \u7684\u4e00\u79cd\u4f18\u5316\u624b\u6bb5 \u6700\u7b80\u5355\u7684\u4e00\u9053\u9898\u5c31\u662f\u7ed9\u5b9a n \u4e2a\u6570\u548c m \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u6bb5\u533a\u95f4\u7684\u548c\u3002\u6c42\u4e00\u4e2a O(n + m) \u7684\u505a\u6cd5\u3002","title":"1.1\u4ec0\u4e48\u662f\u524d\u7f00\u548c"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#12","text":"","title":"1.2\u4e00\u7ef4\u524d\u7f00\u548c"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#121","text":"\u4f8b\u9898\uff1a http://acm.mangata.ltd/p/P1501","title":"1.2.1\u95ee\u9898\u5f15\u51fa"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#122","text":"\u5bf9\u4e8e\u4e00\u7ef4\u524d\u7f00\u548c\u6211\u4eec\u5728\u8f93\u5165\u6570\u636e\u7684\u65f6\u5019\u5c31\u80fd\u8fdb\u884c\u5904\u7406\uff0c\u5047\u8bbe\u524d\u7f00\u548c\u6570\u7ec4\u662fpre\uff0c\u90a3\u4e48\u6211\u4eec\u7684 pre[i] = pre[i-1]+a[i] \uff0c\u8fd9\u6837\u5c31\u7ef4\u62a4\u4e86\u4e00\u4e2a\u524d\u7f00\uff0c\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u7684i\u4ece1\u5f00\u59cb\u904d\u5386 \u4ee3\u7801\u793a\u4f8b\uff1a C++ for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ]; pre [ i ] = pre [ i -1 ] + a [ i ]; } \u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u7ef4\u524d\u7f00\u548c\u7684\u4e00\u4e2a\u6570\u7ec4\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7ec4\u53ef\u4ee5\u5e72\u4ec0\u4e48\u4e8b\u5462\uff1f\u9996\u5148\u6211\u4eec\u80fd\u5728 \\(O(1)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6c42\u51fa\u4efb\u4e00\u4e00\u4e2a\u533a\u95f4\u7684\u548c\u4f8b\u5982\u6211\u4eec\u8981\u6c42 \\([L,R]\\) \u533a\u95f4\u548c\uff0c\u5373 pre[R]-pre[L-1] \uff0c","title":"1.2.2\u601d\u8def"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#13","text":"","title":"1.3\u4e00\u7ef4\u524d\u7f00\u79ef"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#131","text":"\u4f8b\u9898\uff1a https://ac.nowcoder.com/acm/contest/19483/A","title":"1.3.1\u95ee\u9898\u5f15\u51fa"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#132","text":"\u7531\u4e8e\u6709\u524d\u7f00\u548c\u8fd9\u79cd\u64cd\u4f5c\uff0c\u6211\u80fd\u80fd\u610f\u8bc6\u5230\u8fd9\u662f\u4e00\u79cd\u601d\u60f3\uff0c\u987a\u7740\u8fd9\u4e2a\u601d\u60f3\u6211\u4eec\u80fd\u60f3\u5230\u524d\u7f00\u79ef\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u548c\u524d\u7f00\u548c\u76f8\u4f3c\u6211\u4eec\u901a\u8fc7\u5bf9pre\u6570\u7ec4\u8fdb\u884c\u4e58\u6cd5\u66f4\u65b0\u7136\u540e \u4e0d\u65ad\u53d6\u6a21 \u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u524d\u7f00\u79ef\uff0c\u5982\u679c\u6211\u4eec\u60f3\u83b7\u5f97 \\([L,R]\\) \u7684\u533a\u95f4\u79ef\u90a3\u4e48\u9700\u8981\u7528\u5230 \u9006\u5143 \u7684\u64cd\u4f5c\u5373 \\(ans = pre[R] \\times inv(pre[L-1])\\) \u4ee3\u7801\u793a\u4f8b\uff1a C++ pre [ 0 ] = 1 ; //\u5426\u5219\u5168\u90fd\u53d8\u62100\u4e86 for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ]; pre [ i ] = pre [ i -1 ] * a [ i ] % mod ; } \u6c42 [ L , R ] \u533a\u95f4\u5185\u524d\u7f00\u79ef ans = pre [ R ] * inv ( pre [ L -1 ]);","title":"1.3.2\u601d\u8def"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#14","text":"\u548c\u4e0a\u9762\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u7ef4\u62a4\u7684\u662f\u5f02\u6216\u548c","title":"1.4 \u4e00\u7ef4\u524d\u7f00\u5f02\u6216"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#15","text":"","title":"1.5\u4e8c\u7ef4\u524d\u7f00\u548c"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#151","text":"\u4f8b\u9898\uff1a https://www.luogu.com.cn/problem/P2004","title":"1.5.1\u95ee\u9898\u5f15\u51fa"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#152","text":"\u5bf9\u4e8e\u4e8c\u7ef4\u524d\u7f00\u548c\u540c\u7406\uff0c\u6211\u4eec\u4ece\u7ef4\u62a4\u7ebf\u524d\u7f00\u548c\u53d8\u6210\u4e86\u77e9\u9635\u524d\u7f00\u548c\uff0c\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u4ece\u7ef4\u62a4\u4e00\u7ef4\u524d\u7f00\u548c\u53d8\u6210\u4e86\u7ef4\u62a4\u4e8c\u7ef4\u524d\u7f00\u548c\u3002\u6211\u4eec\u6b64\u65f6\u7684 pre[i][j] \u8868\u793a\u7684\u542b\u4e49\u5c31\u662f\u4ece\u5de6\u4e0a\u89d2 [1][1] \u5230\u53f3\u4e0b\u89d2 [i][j] \u8fd9\u4e2a\u77e9\u9635\u7684\u4e00\u4e2a\u548c\uff0c\u56e0\u6b64\u6211\u4eec\u80fd\u5199\u51fa\u8fd9\u6837\u4e00\u4e2a\u7ef4\u62a4\u4ee3\u7801 \\(pre[i][j]=pre[i-1][j] + pre[i][j-1] - pre[i-1][j-1] + a[i][j]\\) \uff0c\u8fd9\u4e2a\u4e5f\u662f\u5f88\u597d\u7406\u89e3\u7684\uff0c\u73b0\u5728\u6211\u4eec\u5982\u679c\u8981\u6c42\u4e00\u4e2a\u5de6\u4e0a\u89d2\u4e3a \\(x_1,y1\\) \uff0c\u53f3\u4e0b\u89d2\u4e3a \\(x_2,y_2\\) \u7684\u77e9\u9635\u548c\u5c31\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a \\(ans=pre[x2][y2]-pre[x2][y1-1]-pre[x1][y2-1]+pre[x1-1][y1-1]\\) \u6211\u4eec\u53ef\u4ee5\u6765\u770b\u8fd9\u6837\u4e00\u5f20\u56fe\uff1a \u5bf9\u4e8e\u7c89\u8272\u90e8\u5206\u5c31\u662f\u6211\u4eec\u60f3\u8981\u6c42\u5f97\u7684\u77e9\u9635\u8303\u56f4\uff0c\u5bf9\u4e8e\u9ec4\u8272\uff0c\u548c\u68d5\u8272\u90e8\u5206\u5c31\u662f\u6211\u4eec\u591a\u4f59\u7684\u8303\u56f4\uff0c\u9700\u8981\u51cf\u53bb\uff0c\u4f46\u662f\u5728\u51cf\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u9047\u5230\u51cf\u7684\u533a\u95f4\u91cd\u590d\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u52a0\u4e0a \\(pre[x1-1][y1-1]\\) \u7684\u64cd\u4f5c \u4ee3\u7801\u5b9e\u73b0\uff1a C++ for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { cin >> a [ i ][ j ]; pre [ i ][ j ] = pre [ i -1 ][ j ] + pre [ i ][ j -1 ] - pre [ i -1 ][ j -1 ] + a [ i ][ j ]; } } ans = pre [ x2 ][ y2 ] - pre [ x2 ][ y1 -1 ] - pre [ x1 -1 ][ y2 ] + pre [ x1 -1 ][ y1 -1 ];","title":"1.5.2\u601d\u8def"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#15_1","text":"\u4f18\u70b9\u5f88\u663e\u7136\uff0c\u5c31\u662f\u80fd\u5feb\u901f\u6c42\u51fa\u533a\u95f4\u6216\u8005\u77e9\u9635\u7684 \u4e00\u4e9b\u4fe1\u606f \u4f8b\u5982\u548c\u3001\u79ef\u3001\u5f02\u6216\u7b49 \u7f3a\u70b9\u4e5f\u5f88\u663e\u7136\uff0c\u5c31\u662f \u4e0d\u80fd\u5728\u7ebf\u64cd\u4f5c \uff0c\u53ea\u80fd \u79bb\u7ebf\u5904\u7406 \uff0c\u9047\u5230\u4e00\u4e2a\u52a8\u6001\u53d8\u5316\u7684\u5c31\u4e0d\u80fd\u4f7f\u7528\u524d\u7f00\u548c\u64cd\u4f5c\u3002","title":"1.5\u4f18\u7f3a\u70b9"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#_4","text":"","title":"\u4e8c\u3001\u5dee\u5206\u6570\u7ec4"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#21","text":"\u5bf9\u4e8e\u5df2\u77e5\u6709n\u4e2a\u5143\u7d20\u7684\u79bb\u7ebf\u6570\u5217d\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u8bb0\u5f55\u5b83\u6bcf\u9879\u4e0e\u524d\u4e00\u9879\u5dee\u503c\u7684\u5dee\u5206\u6570\u7ec4 \\(f\\) \uff1a\u663e\u7136\uff0c \\(f[1]=d[1]-0=d[1];\\) \u5bf9\u4e8e\u6574\u6570 \\(i\u2208[2,n]\\) \uff0c\u6211\u4eec\u8ba9 \\(f[i]=d[i]-d[i-1]\\) \u3002","title":"2.1\u5b9a\u4e49"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#22","text":"\u8ba1\u7b97\u6570\u5217\u5404\u9879\u7684\u503c\uff1a\u89c2\u5bdf \\(d[2]=f[1]+f[2]=d[1]+d[2]-d[1]=d[2]\\) \u53ef\u77e5\uff0c\u6570\u5217\u7b2c \\(i\\) \u9879\u7684\u503c\u662f\u53ef\u4ee5\u7528\u5dee\u5206\u6570\u7ec4\u7684\u524d \\(i\\) \u9879\u7684\u548c\u8ba1\u7b97\u7684\uff0c\u5373 \\(d[i]=f[i]\\) \u7684\u524d\u7f00\u548c\u3002 \u7b2c \\(i\\) \u9879\u7684\u524d\u7f00\u548c\u5373\u4e3a\u6570\u5217\u524d \\(i\\) \u9879\u7684\u548c \u901a\u8fc7\u4ee5\u4e0a\u4e24\u70b9\u6027\u8d28\u6211\u4eec\u80fd\u5728 \\(O(N)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6c42\u51fa\u533a\u95f4\u548c\u4ee5\u53ca\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u503c\uff0c\u5e26\u6765\u7684\u597d\u5904\u5c31\u662f\u80fd\u5feb\u901f\u5904\u7406\u533a\u95f4\u52a0\u51cf\u64cd\u4f5c","title":"2.2\u6027\u8d28"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#23","text":"\u5bf9\u4e8e\u533a\u95f4 \\([L,R]\\) \u7684\u589e\u52a0\u4e00\u4e2ax\uff0c\u90a3\u4e48\u5728\u5dee\u5206\u6570\u7ec4\u4e0a\u6211\u4eec\u8fdb\u884c\u7684\u64cd\u4f5c\u5c31\u662f \\(f[L]+x,f[R+1]-x\\) \uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u6765\u56de\u987e\u4e00\u4e0b\u5bf9\u4e8e\u5dee\u5206\u6570\u7ec4\u6c42\u524d \\(i\\) \u9879\u524d\u7f00\u548c\u6c42\u51fa\u6765\u7684\u5c31\u662f \\(d[i]\\) \uff0c\u90a3\u4e48\u6211\u4eec\u5728 \\(f[L]\\) \u7684\u4f4d\u7f6e\u8fdb\u884c\u4e00\u4e2a\u52a0\u6cd5\u64cd\u4f5c\u4e5f\u5c31\u662f\u8ba9\u4eceL\u8fd9\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u7684\u540e\u9762\u6240\u6709\u7684d\u8fdb\u884c\u4e00\u4e2a+x\u7684\u64cd\u4f5c\uff0c\u5bf9\u4e8e \\(F[R+1]-x\\) \u5176\u5b9e\u5c31\u662f\u8ba9R+1\u5230\u540e\u9762\u6240\u6709\u5143\u7d20\u51cf\u53bbx\uff0c\u56e0\u4e3a\u524d\u9762\u5728L\u8fd9\u4e2a\u4f4d\u7f6e\u8fdb\u884c\u4e86\u4ee5\u540e\u6240\u6709\u5143\u7d20+x\u8fd9\u4e2a\u64cd\u4f5c \u8fd9\u6837\u4e00\u6765\u533a\u95f4\u4fee\u6539\u518d\u6c42\u5355\u70b9\u7684\u503c\u6216\u8005\u533a\u95f4\u503c\u7684\u8bdd\u590d\u6742\u5ea6\u5c31\u662f \\(O(N)\\) \u7684\uff0c\u5176\u5b9e\u5230\u540e\u9762\u6211\u4eec\u4f1a\u53bb\u5b66\u4e60\u4e00\u79cd\u6570\u636e\u7ed3\u6784->\u6811\u72b6\u6570\u7ec4\uff0c\u6211\u4eec\u5229\u7528\u5dee\u5206\u8fd9\u4e2a\u6027\u8d28\u7684\u8bdd\uff0c\u5728 \\(O(log_n)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u80fd\u6c42\u5230\u5355\u70b9\u548c\u533a\u95f4\u503c\uff0c\u73b0\u5728\u6211\u4eec\u5c31\u4e0d\u505a\u63a2\u7a76\u4e86\uff0c\u5176\u5b9e\u5dee\u5206\u91cd\u8981\u7684\u4e0d\u662f\u5dee\u5206\u6570\u7ec4\uff0c\u800c\u662f \u5dee\u5206\u601d\u7ef4 \u3002","title":"2.3\u4f7f\u7528"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#_5","text":"\u6d1b\u8c37\u9898\u5355\uff1a https://www.luogu.com.cn/training/200 \u725b\u5ba2\uff1a https://ac.nowcoder.com/acm/contest/19483 \u725b\u5ba2\u7684BCD\u53ef\u80fd\u6709\u70b9\u96be\uff0c\u53ef\u4ee5\u4e0d\u7528\u53bb\u505a","title":"\u4e09\u3001\u7ec3\u4e60\u9898\u5355"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/","text":"\u957f\u6587\u9884\u544a\uff01\uff01\uff01 \u53cc\u6307\u9488\u7b97\u6cd5 \u00b6 \u53cc\u6307\u9488\u53c8\u88ab\u79f0\u4e3a \u5c3a\u53d6\u6cd5 \u53cc\u6307\u9488\u662f\u4e00\u79cd\u7b80\u5355\u800c\u53c8\u7075\u6d3b\u7684\u6280\u5de7\u548c\u601d\u60f3\uff0c\u5e76\u4e0d\u662f\u4e00\u79cd\u5177\u4f53\u7684\u7b97\u6cd5\uff0c\u5355\u72ec\u4f7f\u7528\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u4e00\u4e9b\u7279\u5b9a\u95ee\u9898\uff0c\u548c\u5176\u4ed6\u7b97\u6cd5\u7ed3\u5408\u4e5f\u80fd\u53d1\u6325\u591a\u6837\u7684\u7528\u5904\u3002 \u53cc\u6307\u9488\u987e\u540d\u601d\u4e49\uff0c\u540c\u65f6\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\u7ef4\u62a4\u6216\u8005\u662f\u7edf\u8ba1\u4e00\u4e9b\u533a\u95f4\u4fe1\u606f\u7684\u3002\u7279\u522b\u662f\u5728\u6570\u7ec4\u3001\u94fe\u8868\u7b49\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u53cc\u6307\u9488\u7684\u7b97\u6cd5\u80fd\u5927\u5927\u51cf\u5c11\u6211\u4eec\u7684\u7f16\u7801\u901f\u5ea6\u4ee5\u53ca\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u53cc\u6307\u9488\u5927\u4f53\u7684\u5e94\u7528\u5206\u4e3a\u4ee5\u4e0b\u4e09\u4e2a\u5927\u7c7b\uff1a \u6ed1\u52a8\u7a97\u53e3 \u3001 \u78b0\u649e\u6307\u9488 \u3001 \u5feb\u6162\u6307\u9488 \u4e00\u3001\u6ed1\u52a8\u7a97\u53e3 \u00b6 1.1 \u7ef4\u62a4\u533a\u95f4\u548c|\u79ef \u00b6 1.1.1 \u95ee\u9898\u5f15\u51fa \u00b6 \u9009\u81ea Subsequence (POJ No.3061) \u7ed9\u5b9a\u957f\u5ea6\u4e3a \\(N \\ (10 < N <10^5)\\) \u7684\u6b63\u6574\u6570\u6570\u5217 \\(a_0,a_1,\u2026\u2026,a_{n-1}\\) \u4ee5\u53ca\u6b63\u6574\u6570 \\(S \\ (0 < S < 10^8)\\) \u3002\u6c42\u51fa\u603b\u5408\u4e0d\u5c0f\u4e8eS\u7684 \u8fde\u7eed \u5b50\u5e8f\u5217\u957f\u5ea6\u7684\u6700\u5c0f\u503c\u3002\u5982\u679c\u89e3\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa0 \u6837\u4f8b\uff1a Text Only 10 15 5 1 3 5 10 7 4 9 2 8 Text Output 2 1.1.2 \u6734\u7d20\u60f3\u6cd5 \u00b6 \u6211\u4eec\u679a\u4e3e\u5b50\u5e8f\u5217\u7684\u5de6\u7aef\u70b9\uff0c\u7136\u540e\u518d\u679a\u4e3e\u957f\u5ea6\uff0c\u4ee5\u53ca\u518d\u4e00\u4e2a\u5faa\u73af\u6765\u8ba1\u7b97 \\([l,r]\\) \u8fd9\u4e2a\u533a\u95f4\u7684\u4e00\u4e2a\u6743\u503c\u548c\uff0c\u7136\u540e\u4ece\u6ee1\u8db3\u6761\u4ef6\u7684\u5e8f\u5217\u91cc\u9762\u6311\u9009\u51fa\u6700\u77ed\u7684\u4e00\u4e2a\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u5c31\u4e3a \\(O(N^3)\\) , \u4ee3\u7801\u5982\u4e0b\uff1a C++ #include <iostream> #include <algorithm> using namespace std ; #define ll long long const int N = 1e5 + 10 ; ll a [ N ], S , n ; int main () { int t ; cin >> t ; while ( t -- ){ cin >> n >> S ; int ans = 0x3f3f3f3f ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int l = 1 ; l <= n ; ++ l ){ for ( int len = 1 ; l + len - 1 <= n ; ++ len ) { int r = l + len - 1 ; ll sum = 0 ; for ( int j = l ; j <= r ; ++ j ) sum += a [ j ]; if ( sum >= S ) ans = min ( ans , len ); } } if ( ans == 0x3f3f3f3f ) cout << 0 << endl ; else cout << ans << endl ; } return 0 ; } 1.1.3 \u524d\u7f00\u548c\u4f18\u5316 \u00b6 \u5f53\u7136 \\(O(N^3)\\) \u7684\u590d\u6742\u5ea6\u8fdc\u8fdc\u4e0d\u591f\uff0c\u4e8e\u662f\u6211\u4eec\u53d1\u73b0\u5728\u6700\u5185\u5c42\u7684\u8ba1\u7b97\u533a\u95f4\u548c\u7684\u5faa\u73af\u53ef\u4ee5\u7528\u524d\u7f00\u548c\u4f18\u5316\u6389\uff0c\u90a3\u4e48\u4f18\u5316\u540e\u4ee3\u7801\u5982\u4e0b\uff1a C++ #include <iostream> #include <algorithm> using namespace std ; #define ll long long const int N = 1e5 + 10 ; ll a [ N ], S , n , pre [ N ]; int main () { int t ; cin >> t ; while ( t -- ){ cin >> n >> S ; int ans = 0x3f3f3f3f ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], pre [ i ] = pre [ i -1 ] + a [ i ]; for ( int l = 1 ; l <= n ; ++ l ){ for ( int len = 1 ; l + len - 1 <= n ; ++ len ) { int r = l + len - 1 ; ll sum = pre [ r ] - pre [ l -1 ]; if ( sum >= S ) ans = min ( ans , len ); } } if ( ans == 0x3f3f3f3f ) cout << 0 << endl ; else cout << ans << endl ; } return 0 ; } 1.1.4 \u4e8c\u5206\u4f18\u5316 \u00b6 \u73b0\u5728\u6211\u4eec\u4ee5\u53ca\u5c06\u590d\u6742\u5ea6\u964d\u5230\u4e86 \\(O(N^2)\\) \u4e86\uff0c\u4f46\u662f\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u800c\u8a00\uff0c\u663e\u7136\u662f\u4e0d\u591f\u770b\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u5f97\u518d\u60f3\u4e00\u4e0b\u4f18\u5316\uff0c\u4e0d\u96be\u53d1\u73b0\u7531\u4e8e\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u90fd\u662f\u6b63\u6574\u6570\uff0c\u90a3\u4e48\u8bf4\u660e\u6211\u4eec\u7684\u524d\u7f00\u548c\u662f\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u7684\u5e8f\u5217\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u901a\u8fc7\u4e8c\u5206\u6cd5\u6765\u52a0\u901f\u6211\u4eec\u5bfb\u627e\u53ef\u884c\u957f\u5ea6\uff0c\u800c\u4e0d\u662f\u4ece1\u5f00\u59cb\u679a\u4e3e\uff0c\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u6837\u7684\u4ee3\u7801\uff1a C++ #include <iostream> #include <algorithm> using namespace std ; #define ll long long const int N = 1e5 + 10 ; ll a [ N ], S , n , pre [ N ]; int main () { int t ; cin >> t ; while ( t -- ){ cin >> n >> S ; int ans = 0x3f3f3f3f ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], pre [ i ] = pre [ i -1 ] + a [ i ]; for ( int l = 1 ; l <= n ; ++ l ){ int r = lower_bound ( pre + 1 , pre + n + 1 , S + pre [ l -1 ]) - pre ; if ( r > n ) continue ; ans = min ( ans , r - l + 1 ); } if ( ans == 0x3f3f3f3f ) cout << 0 << endl ; else cout << ans << endl ; } return 0 ; } \u6b64\u65f6\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(Nlog_N)\\) \uff0c\u5bf9\u4e8e\u8fd9\u4e00\u9053\u9898\u6765\u8bf4\u7b97\u662f\u7ef0\u7ef0\u6709\u4f59\u4e86\uff0c\u4f46\u662f\u8fd9\u4e0d\u662f\u6700\u4f18\u89e3\u6216\u8005\u8bf4\u4e0d\u7b97\u4e00\u4e2a\u6bd4\u8f83\u7406\u60f3\u7684\u89e3\u6cd5 1.1.5 \u53cc\u6307\u9488\u505a\u6cd5 \u00b6 \u4e8e\u662f\u5f15\u51fa\u4e86\u6211\u4eec\u4eca\u5929\u7684\u4e3b\u89d2 \uff1a \u201c\u53cc\u6307\u9488\u7b97\u6cd5\u201d 1.\u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\uff1a \\(l\\) \u548c \\(r\\) \u5728\u521d\u59cb\u65f6\u523b\u90fd\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u4e14\u5c06\u5b50\u533a\u95f4\u7684\u548c\u7f6e\u4e3a \\(a[1]\\) 2.\u7136\u540e\u6211\u4eec\u632a\u52a8 \\(r\\) \u6307\u9488\u4e00\u76f4\u5230\u5927\u4e8e\u7b49\u4e8e \\(S\\) \u4f4d\u7f6e\uff0c\u7136\u540e\u6211\u4eec \u7edf\u8ba1\u5f53\u524d\u7684\u957f\u5ea6 \uff0c\u540e\u9762\u7684\u5b8c\u5168\u4e0d\u7528\u53bb\u904d\u5386\u4e86\uff0c\u56e0\u4e3a\u524d\u7f00\u548c\u662f\u5355\u8c03\u9012\u589e\u7684\u6240\u4ee5\u5f53\u524d\u4f4d\u7f6e\u5c31\u662f\u6700\u4f18\u7684 3.\u7136\u540e\u6211\u4eec\u5c06\u5de6\u6307\u9488 \\(l\\) \u5f80\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c 4.\u7136\u540e\u518d\u770b \\(r\\) \u6307\u9488\u662f\u5426\u80fd\u79fb\u52a8\uff0c\u4e5f\u5c31\u662f\u91cd\u590d\u4e0a\u9762\u7684 \\(r\\) \u6307\u9488\u79fb\u52a8\u7684\u8fc7\u7a0b\uff0c\u6700\u540e\u5982\u679c\u6211\u4eec\u53d1\u73b0 \\(r\\) \u6307\u9488\u4ee5\u53ca\u79fb\u52a8\u5230\u672b\u5c3e\u4e86\uff0c\u5e76\u4e14\u5f53\u524d\u7684\u548c\u8fd8\u662f\u5c0f\u4e8e \\(S\\) \u7684\uff0c\u90a3\u4e48\u8bf4\u660e\u540e\u9762\u4e5f\u4e0d\u53ef\u80fd\u518d\u6709\u8fd9\u79cd\u533a\u95f4\u6ee1\u8db3\u6761\u4ef6\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5 break \u6700\u540e\u6211\u4eec\u7684ans\u5982\u679c\u6ca1\u66f4\u65b0\u7684\u8bdd\u8bf4\u660e\u5c31\u6ca1\u6709\u6ee1\u8db3\u7684\u533a\u95f4\uff0c\u5f53\u7136\u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6c42\u548c\u5224\u65ad\u662f\u5426\u4f1a\u5b58\u5728 \u4e0a\u9762\u6837\u4f8b\u7684\u4e00\u4e2a\u56fe\u89e3\uff1a \u90a3\u4e48\u6211\u4eec\u4e0d\u96be\u5f97\u51fa\u5982\u4e0b\u4ee3\u7801\uff1a C++ #include <iostream> #include <algorithm> using namespace std ; #define ll long long const int N = 1e5 + 10 ; ll a [ N ], S , n , pre [ N ]; int main () { int t ; cin >> t ; while ( t -- ){ cin >> n >> S ; int ans = 0x3f3f3f3f ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; int l = 1 , r = 1 ; ll sum = a [ 1 ]; while ( r <= n ) { while ( r <= n && sum < S ) sum += a [ ++ r ]; if ( sum < S ) break ; ans = min ( ans , r - l + 1 ); sum -= a [ l ++ ]; } if ( ans == 0x3f3f3f3f ) cout << 0 << endl ; else cout << ans << endl ; } return 0 ; } \u6211\u4eec\u6765\u5206\u6790\u8fd9\u4e2a\u4ee3\u7801\u7684\u590d\u6742\u5ea6\uff0c\u5bf9\u4e8e \\(l\\) \u548c \\(r\\) \u6307\u9488\u6211\u4eec\u6ca1\u6709\u8fdb\u884c\u56de\u6eaf\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4e24\u4e2a\u6307\u9488\u800c\u8a00\u6700\u591a\u8986\u76d6\u6574\u4e2a\u6570\u7ec4\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f \\(O(N)\\) \u7684\uff0c\u5e76\u4e14\u5728\u601d\u8def\u4e0a\u53cc\u6307\u9488\u7684\u505a\u6cd5\u4e5f\u4f1a\u6bd4\u524d\u7f00\u548c+\u4e8c\u5206\u4f18\u5316\u597d\uff0c\u7a7a\u95f4\u5229\u7528\u7387\u4e5f\u6bd4\u8f83\u9ad8\uff0c\u4f46\u662f\u6709\u7684\u65f6\u5019\u53ef\u80fd\u53cc\u6307\u9488\u4f1a\u642d\u914d\u4e8c\u5206\u4e00\u8d77\u7528\uff0c\u8fd9\u4e9b\u4e1c\u897f\u5c31\u9700\u8981\u8bfb\u8005\u5237\u9898\u8e29\u5751\u5566\uff0c\u6211\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002 1.2 \u6700\u5c0f\u53ef\u884c\u533a\u95f4 \u00b6 1.2.1 \u95ee\u9898\u5f15\u51fa \u00b6 \u9009\u81ea Jessica\u2019s Reading Problem (POJ No.3320) \u4e3a\u4e86\u51c6\u5907\u8003\u8bd5\uff0c \\(Jessica\\) \u5f00\u59cb\u8bfb\u4e00\u672c\u5f88\u539a\u7684\u8bfe\u672c\u3002\u8981\u60f3\u901a\u8fc7\u8003\u8bd5\uff0c\u5fc5\u987b\u628a\u8bfe\u672c\u4e2d\u6240\u6709\u7684\u77e5\u8bc6\u70b9\u90fd\u638c\u63e1\u3002\u8fd9\u672c\u4e66\u603b\u5171\u6709P\u9875\uff0c\u7b2c \\(i\\) \u9875\u6070\u597d\u6709\u4e00\u4e2a\u77e5\u8bc6\u70b9 \\(a_i\\) (\u6bcf\u4e2a\u77e5\u8bc6\u70b9\u90fd\u6709\u4e00\u4e2a\u6574\u6570\u7f16\u53f7 \uff09\u3002\u5168\u4e66\u4e2d\u540c\u4e00\u4e2a\u77e5\u8bc6\u70b9\u53ef\u80fd\u4f1a\u88ab\u591a\u6b21\u63d0\u5230\uff0c\u6240\u4ee5\u5979\u5e0c\u671b\u901a\u8fc7\u9605\u8bfb\u5176\u4e2d\u8fde\u7eed\u7684\u4e00\u4e9b\u9875\u628a\u6240\u6709\u7684\u77e5\u8bc6\u70b9\u90fd\u8986\u76d6\u5230\u3002\u7ed9\u5b9a\u6bcf\u9875\u5199\u5230\u7684\u77e5\u8bc6\u70b9\uff0c\u8bf7\u6c42\u51fa\u8981\u9605\u8bfb\u7684\u6700\u5c11\u9875\u6570\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a Text Only 5 1 8 8 8 1 \u8f93\u51fa\uff1a Text Only 2 1.2.2 \u601d\u8def \u00b6 \u9996\u5148\u6211\u4eec\u8981\u7edf\u8ba1\u6709\u591a\u5c11\u672c\u4e66\uff08\u6570\u91cf\u4e3a \\(len\\) \uff09\uff0c\u8fd9\u4e2a\u6211\u4eec\u53ef\u4ee5\u7528 set \u6216\u8005 map \u5bb9\u5668\u6765\u7edf\u8ba1\uff0c\u7136\u540e\u540c\u6837\u7684 1.\u6211\u4eec\u5b9a\u4e49 \\(l\\) \u548c \\(r\\) \u4e24\u4e2a\u6307\u9488,\u4e24\u8005\u90fd\u521d\u59cb\u5316\u4e3a\u9996\u4f4d\u7f6e \\(1\\) \u7edf\u8ba1\u8bbf\u95ee\u6b21\u6570\u7684\u53ef\u4ee5\u4f7f\u7528 map<int,int> \u5bb9\u5668\u6765\u5b58\u50a8\u4fe1\u606f 2.\u7136\u540e\u6211\u4eec\u5c06 \\(r\\) \u6307\u9488\u4e0d\u65ad\u5f80\u540e\u79fb\u52a8\u76f4\u5230\u6ee1\u8db3\u4e0d\u540c\u4e66\u672c\u6570 \\(res\\) \u548c \\(len\\) \u76f8\u7b49\uff0c\u5728\u5c06 \\(r\\) \u6307\u9488\u4e0d\u65ad\u540e\u79fb\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ea\u8ba1\u7b97\u5f53\u524d\u8bbf\u95ee\u6b21\u6570\u503c\u4e3a0\u7684\u4e66\u672c\u6570\u5373\u53ef\uff08\u5373\u51fa\u73b0\u65b0\u4e66\u7684\u65f6\u5019\u6211\u4eec\u7684\u6570\u7684\u79cd\u7c7bres\u624d\u4f1a\u66f4\u65b0\uff09 3.\u5982\u679c\u6211\u4eec\u53d1\u73b0\u5faa\u73af\u7ed3\u675f\u540e\u6211\u4eec\u7684 \\(res\\) \u5373\u4e66\u672c\u6570\u91cf\u6bd4 \\(n\\) \u5c0f\u7684\u8bdd\u8bf4\u660e\u540e\u9762\u4e5f\u4e0d\u518d\u53ef\u80fd\u4f1a\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u5e8f\u5217\u4e86 4.\u7136\u540e\u6211\u4eec\u7edf\u8ba1\u5f53\u524d\u7684\u957f\u5ea6\uff0c\u5e76\u66f4\u65b0 \\(ans\\) \u7684\u7ed3\u679c\uff0c\u540c\u65f6\u5c06 \\(l\\) \u6307\u9488\u53f3\u79fb\u4e00\u6b65 \u4e8e\u662f\u6211\u4eec\u5c31\u80fd\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ #include <iostream> #include <algorithm> #include <cstdio> #include <set> #include <map> using namespace std ; #define ll long long const int N = 1e5 + 10 ; int a [ N ], n ; int main () { scanf ( \"%d\" , & n ); set < int > S ; for ( int i = 1 ; i <= n ; ++ i ) scanf ( \"%d\" , & a [ i ]), S . insert ( a [ i ]); int len = S . size (); map < int , int > vis ; vis . clear (); int l = 1 , r = 1 , res = 0 ; int ans = 0x3f3f3f3f ; while ( l <= r ){ while ( r <= n && res < len ){ if ( vis [ a [ r ]] == 0 ) res ++ ; vis [ a [ r ++ ]] ++ ; } if ( res < len ) break ; ans = min ( ans , r - l ); if ( -- vis [ a [ l ++ ]] == 0 ) res -- ; } printf ( \"%d \\n \" , ans ); return 0 ; } \u6ce8\u610f\u8fd9\u91cc\u7684\u5199\u6cd5\u548c\u4e0a\u9762\u7684\u6709\u70b9\u4e0d\u592a\u4e00\u6837\uff0c\u5c31\u5728\u4e8e\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u6211\u4eec\u5728\u8fd9\u91cc\u5e76\u6ca1\u6709\u76f4\u63a5\u7b97\u4e0a\uff0c\u662f\u56e0\u4e3a\u4e0d\u7b97\u4e0a\u7684\u8bdd\u5728\u540e\u9762\u7684\u5904\u7406\u4e2d\u4e0d\u7528\u8003\u8651\u8fb9\u754c\u60c5\u51b5\uff0c\u8fd9\u4e00\u70b9\u8bfb\u8005\u4eec\u53ef\u4ee5\u81ea\u5df1\u4e0b\u6765\u624b\u52a8\u6a21\u62df\u4e00\u4e0b 1.3 \u56fa\u5b9a\u7a97\u53e3\u6ed1\u52a8 \u00b6 1.3.1 \u95ee\u9898\u5f15\u51fa \u00b6 \u7ed9\u5b9a\u957f\u5ea6\u4e3a \\(n \\ (k <= n <= 10^6)\\) \u7684\u6570\u5217 \\(a_0 a_1 a_2 \u2026\u2026 a_{n-1} \\ (0 <= a_i <= 10^9)\\) \u6c42\u89e3\u533a\u95f4\u957f\u5ea6\u4e3a \\(k (1<=k<=n)\\) \u7684\u5b50\u4e32\u7684\u6700\u5927\u503c 1.3.2 \u601d\u8def \u00b6 \u8fd9\u4e2a\u9898\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u4e86\u5148\u9884\u5904\u7406\u51fa\u524d \\(n\\) \u4e2a\u6570\u7684\u524d\u7f00\u548c\uff0c\u7136\u540e\u6211\u4eec\u904d\u5386\u679a\u4e3e\u5de6\u533a\u95f4\u5c31\u597d\u4e86,\u4f46\u662f\u901a\u8fc7\u53cc\u6307\u9488\u6216\u8005\u662f\u8bf4\u6ed1\u52a8\u7a97\u53e3\u7684\u65b9\u6cd5\u80fd\u66f4 \u201c\u4f18\u96c5\u201d \u7684\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5148\u5c06\u524dk\u4e2a\u6570\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u6211\u4eec\u5b9a\u4e49 \\(l\\) \u6307\u9488\u6307\u5411\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c \\(r\\) \u6307\u9488\u6307\u5411\u7b2ck\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u4e0d\u65ad\u5c06 \\(l\\) \u548c \\(r\\) \u6307\u9488\u53f3\u79fb\uff0c\u5728\u79fb\u52a8\u5730\u8fc7\u7a0b\u4e2d\u6211\u4eec\u4f1a\u53d1\u73b0\u5176\u5b9e \\([l,r]\\) \u533a\u95f4\u7684\u548c\u4f1a\u589e\u52a0 \\(a[r+1] - a[l]\\) \uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u4e00\u5c42\u5faa\u73af\u904d\u5386\u5c31\u597d\u4e86\uff0c\u4e8e\u662f\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ #include <iostream> #include <algorithm> #include <cstdio> using namespace std ; const int N = 1e5 + 10 ; int a [ N ], n , k ; int main () { cin >> n >> k ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; int l = 1 , r = 1 ; int res = 0 ; while ( r <= k ) res += a [ r ++ ]; int ans = res ; for (; r <= n ; ++ r , l ++ ){ res += a [ r ] - a [ l ]; ans = max ( ans , res ); } cout << ans << endl ; return 0 ; } 1.4 \u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32 \u00b6 1.4.1 \u95ee\u9898\u5f15\u51fa \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n \\ (n<=10^7)\\) \u7684\u5b57\u7b26\u4e32 \uff0c\u6c42\u4e00\u4e2a\u6700\u957f\u7684\u6ee1\u8db3\u6240\u6709\u5b57\u7b26\u4e0d\u91cd\u590d\u7684\u5b50\u4e32 1.4.1 \u6734\u7d20\u60f3\u6cd5 \u00b6 \u6211\u4eec\u679a\u4e3e\u5b57\u7b26\u4e32\u7684\u5de6\u533a\u95f4\uff0c\u7136\u540e\u518d\u5f00\u4e00\u5c42\u5faa\u73af\u679a\u4e3e\u4ece\u5f53\u524d\u70b9\u5f00\u59cb\u7684\u5b57\u7b26\u4e32\uff0c\u53d1\u73b0\u6709\u91cd\u590d\u7684\u5b57\u7b26\uff08\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u5f00\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(300\\) \u7684\u6570\u7ec4\u6216\u8005\u76f4\u63a5\u7528map\u6765\u7edf\u8ba1\uff09\u5c31\u505c\u6b62\u5f53\u524d\u679a\u4e3e\uff0c\u5426\u5219\u5c31\u4e0d\u65ad\u66f4\u65b0\u957f\u5ea6\u503c \\(ans\\) \uff0c\u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ #include <iostream> #include <algorithm> #include <map> using namespace std ; #define ll long long const int N = 1e5 + 10 ; int a [ N ], n , k ; int main () { string s ; cin >> n >> s ; map < char , bool > vis ; int ans = 0 ; for ( int i = 0 ; i < n ; ++ i ) { int res = 0 ; vis . clear (); for ( int j = i ; j < n ; ++ j ) if ( vis [ s [ j ]]) break ; else vis [ s [ j ]] = true , res ++ ; ans = max ( ans , res ); } cout << ans << endl ; return 0 ; } \u90a3\u4e48\u6211\u4eec\u8fd9\u4e2a\u505a\u6cd5\u7684\u7684\u590d\u6742\u5ea6\u5c31\u4e3a \\(O(N^2)\\) \u663e\u7136\u5f53 \\(n\\) \u7684\u8303\u56f4\u5c0f\u4e8e \\(10^4\\) \u7684\u65f6\u5019\u770b\u8d77\u6765\u662f\u53ef\u884c\u7684\uff0c\u4f46\u662f\u6211\u4eec\u73b0\u5728\u7684\u590d\u6742\u5ea6\u9ad8\u8fbe \\(10^7\\) \uff01\uff0c\u4e8e\u662f\u6211\u4eec\u5f97\u60f3\u4e00\u4e0b\u4f18\u5316 1.4.2 \u53cc\u6307\u9488\u505a\u6cd5 \u00b6 \u6211\u4eec\u601d\u8003\u4e0a\u9762\u7684\u505a\u6cd5\uff0c\u6bcf\u6b21\u9047\u5230\u4e00\u4e2a\u91cd\u590d\u5b57\u7b26\u4e32\u6211\u4eec\u7684 \\(j\\) \u6307\u9488\u5c31\u56de\u6eaf\u4e86\uff0c\u4f46\u662f\u5176\u5b9e\u6ca1\u5fc5\u8981\u56de\u6eaf\uff0c\u56e0\u4e3a\u6b64\u65f6\u7684\u957f\u5ea6\u662f\u4ece\u4e0a\u4e00\u4e2a \\(s[j]\\) \u91cd\u590d\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u6700\u957f\u8ddd\u79bb\u4e86\uff0c\u4f8b\u5982\u6211\u4eec\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32 afbcdbekpm \u5f53\u6211\u4eec\u7684i\u6307\u9488\u6307\u5411\u7684 a \u4e14j\u6307\u9488\u6307\u5411\u4e86\u7b2c\u4e8c\u4e2a b \u7684\u65f6\u5019\u6211\u4eec\u4f1a\u53d1\u73b0i\u6307\u9488\u5728\u7b2c\u4e00\u4e2a \\(b\\) \u4e4b\u524d\uff08\u5305\u542bb\uff09\u7684\u4f4d\u7f6e\u7684\u4e00\u4e2a\u4e0d\u91cd\u590d\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u90fd\u662f\u8981\u4f4e\u4e8e\u6211\u4eec\u73b0\u5728\u6c42\u5f97\u7684 \\([1,5]\\) \u7684\u957f\u5ea6\u7684\uff0c\u56e0\u4e3a\u90fd\u4f1a\u5728\u7b2c\u4e8c\u4e2a b \u505c\u4e0b\u6765\uff0c\u4f46\u662f\u5de6\u8fb9\u7684\u533a\u95f4\u5374\u7f29\u5c0f\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4e0d\u65ad\u79fb\u52a8 \\(i\\) \u6307\u9488\u5e76\u5230\u8fbe\u7b2c\u4e00\u4e2a b \u7684\u4f4d\u7f6e\u5373\u53ef\uff0c \\(j\\) \u6307\u9488\u5c31\u4e0d\u7528\u56de\u6eaf\u4e86\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e24\u4e2a\u6307\u9488\u90fd\u662f\u6700\u591a\u8d70 \\(O(N)\\) \u6b65\uff0c\u90a3\u4e48\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f \\(O(N)\\) ,\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ #include <iostream> #include <algorithm> #include <map> using namespace std ; #define ll long long const int N = 1e5 + 10 ; int n , k ; int main () { string s ; cin >> n >> s ; map < char , bool > vis ; int ans = 0 ; int l = 0 , r = 0 ; for (; l < n ; vis [ s [ l ++ ]] = false ) { while ( r < n && vis [ s [ r ]] == false ) vis [ s [ r ++ ]] = true ; ans = max ( ans , r - l ); } cout << ans << endl ; return 0 ; } 1.5 \u5b50\u5e8f\u5217\u5339\u914d \u00b6 1.5.1 \u95ee\u9898\u5f15\u51fa \u00b6 \u9009\u81ea leetcode 524. \u901a\u8fc7\u5220\u9664\u5b57\u6bcd\u5339\u914d\u5230\u5b57\u5178\u91cc\u6700\u957f\u5355\u8bcd \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(s\\) \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 \\(dictionary\\) \u4f5c\u4e3a\u5b57\u5178\uff0c\u627e\u51fa\u5e76\u8fd4\u56de\u5b57\u5178\u4e2d\u6700\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u8be5\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7\u5220\u9664 \\(s\\) \u4e2d\u7684\u67d0\u4e9b\u5b57\u7b26\u5f97\u5230\u3002\u5982\u679c\u7b54\u6848\u4e0d\u6b62\u4e00\u4e2a\uff0c\u8fd4\u56de\u957f\u5ea6\u6700\u957f\u4e14\u5b57\u6bcd\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u7b54\u6848\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002 \u6837\u4f8b\uff1a \u8f93\u5165: s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"] \u8f93\u51fa\uff1a\"apple\" 1.5.2 \u601d\u8def \u00b6 \u6211\u4eec\u5206\u6790\u8fd9\u4e2a\u95ee\u9898\u5176\u5b9e\u662f\u5bfb\u627e \\(dictionary\\) \u4e2d\u7684\u6700\u957f\u7684\u80fd\u6210\u4e3a \\(s\\) \u7684\u5b50\u5e8f\u5217\u7684 \\(t\\) \u7684\u957f\u5ea6\uff0c\u4e8e\u662f\u6211\u4eec\u5c06\u4e24\u4e2a\u6307\u9488\u4e00\u4e2a \\(i\\) \u653e\u5728 \\(s\\) \u5f00\u59cb\u4f4d\u7f6e\uff0c\u4e00\u4e2a \\(j\\) \u653e\u5728 \\(t\\) \u5f00\u59cb\u4f4d\u7f6e\uff0c\u5982\u679c \\(s[i]=t[j]\\) \u8bf4\u660e \\(t\\) \u7684\u7b2c \\(j\\) \u4f4d\u5df2\u7ecf\u5728 \\(s\\) \u4e2d\u627e\u5230\u4e86\u7b2c\u4e00\u4e2a\u5bf9\u5e94\uff0c\u53ef\u4ee5\u8fdb\u800c\u68c0\u6d4b\u540e\u9762\u7684\u90e8\u5206\u4e86\uff0c\u90a3\u4e48 \\(i\\) \u548c \\(j\\) \u540c\u65f6\u52a0\u4e00\u3002\u5982\u679c\u4e0a\u8ff0\u7b49\u5f0f\u4e0d\u6210\u7acb\uff0c\u5219 \\(t\\) \u7684\u7b2c \\(j\\) \u4f4d\u4ecd\u7136\u6ca1\u6709\u88ab\u5339\u914d\u4e0a\uff0c\u6240\u4ee5\u53ea\u7ed9 \\(i\\) \u52a0\u4e00\uff0c\u5728 \\(s\\) \u7684\u540e\u9762\u90e8\u5206\u518d\u7ee7\u7eed\u5bfb\u627e\u3002\u6700\u540e\uff0c\u5982\u679c \\(j\\) \u5df2\u7ecf\u79fb\u5230\u4e86\u672b\u5c3e\uff0c\u8bf4\u660e\u6574\u4e2a\u5b57\u7b26\u4e32\u90fd\u53ef\u4ee5\u88ab\u5339\u914d\u4e0a\uff0c\u4e5f\u5c31\u662f \u662f \\(s\\) \u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u5426\u5219\u4e0d\u662f\u3002\u7136\u540e\u6211\u4eec\u6839\u636e\u662f\u5426\u5339\u914d\u6210\u529f\u6765\u5224\u65ad\u5f53\u524d\u5b57\u7b26\u4e32\u662f\u5426\u80fd\u66f4\u65b0\u6211\u4eec\u7684\u7b54\u6848\uff0c\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ string findLongestWord ( string s , vector < string >& dictionary ) { string ans = \"\" ; int l = s . size (), ans_len = 0 ; for ( auto t : dictionary ){ int n = t . size (); int i = 0 , j = 0 ; while ( i < l && j < n ) if ( s [ i ] == t [ j ]) ++ i , ++ j ; else ++ i ; if ( j >= n ){ if ( n == ans_len ) ans = min ( ans , t ); else if ( n > ans_len ) ans = t , ans_len = n ; } } return ans ; } \u4e8c\u3001\u78b0\u649e\u6307\u9488 \u00b6 2.1 \u53cd\u8f6c\u6570\u7ec4 \u00b6 \u8fd9\u662f\u6700\u7b80\u5355\u7684\u78b0\u649e\u6307\u9488\u4e86\uff0c\u6211\u4eec\u5b9a\u4e49\u5de6\u6307\u9488 \\(l\\) \u5e76\u6307\u5411\u6570\u7ec4\u7684\u5de6\u533a\u95f4\uff0c\u7136\u540e\u5b9a\u4e49\u53f3\u6307\u9488 \\(r\\) \u5e76\u6307\u5411\u6570\u7ec4\u7684\u53f3\u533a\u95f4\uff0c\u7136\u540e\u4e0d\u65ad\u5411\u4e2d\u95f4\u79fb\u52a8\uff0c\u76f4\u5230\u76f8\u649e\u5c31\u505c\u6b62\uff0c\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ void reverseStr ( char * S ){ int r = strlen ( S ) -1 , l = 0 ; while ( l < r ) swap ( S [ l ++ ], S [ r -- ]); } 2.2 N\u6570\u548c\u95ee\u9898 \u00b6 2.2.1 \u95ee\u9898\u5f15\u51fa \u00b6 \u5f15\u81ea leetcode 167. \u4e24\u6570\u4e4b\u548c II - \u8f93\u5165\u6709\u5e8f\u6570\u7ec4 \u7ed9\u5b9a\u4e00\u4e2a\u5df2\u6309\u7167 \u5347\u5e8f\u6392\u5217 \u7684\u6574\u6570\u6570\u7ec4 \\(numbers\\) \uff0c\u8bf7\u4f60\u4ece\u6570\u7ec4\u4e2d\u627e\u51fa\u4e24\u4e2a\u4e0d\u540c\u4f4d\u7f6e\u7684\u6570\u6ee1\u8db3\u76f8\u52a0\u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570 \\(target\\) \u5e76\u8f93\u51fa\u4e24\u6570\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff08\u4ece \\(1\\) \u5f00\u59cb\u8ba1\u7b97\uff09\u3002 2.2.2 \u5206\u6790 \u00b6 \u6709\u4e00\u4e2a\u5f88\u5173\u952e\u7684\u4fe1\u606f \u5347\u5e8f\u6392\u5217 \uff0c\u90a3\u4e48\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u679a\u4e3e\u7b2c\u4e00\u4e2a\u70b9\u7684\u6570\uff0c\u7136\u540e\u4e8c\u5206\uff0c\u867d\u7136\u4e8c\u5206\u4e5f\u662f\u6bd4\u8f83\u8fc5\u901f\u4e14\u65b9\u4fbf\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f\u4f1a\u591a\u4e2a \\(log_2n\\) \uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u8981\u7528\u53cc\u6307\u9488\u600e\u4e48\u6765\u89e3\u51b3\u5462\uff0c\u65e2\u7136\u8981\u627e\u5230\u4e24\u4e2a\u6570\uff0c\u4e14\u8fd9\u4e24\u4e2a\u6570\u4e0d\u80fd\u5728\u540c\u4e00\u4f4d\u7f6e\uff0c\u90a3\u5176\u4f4d\u7f6e\u4e00\u5b9a\u662f\u4e00\u5de6\u4e00\u53f3\u3002\u7531\u4e8e\u4e24\u6570\u4e4b\u548c\u56fa\u5b9a\uff0c\u90a3\u4e48\u4e24\u6570\u4e4b\u4e2d\u7684\u5c0f\u6570\u8d8a\u5927\uff0c\u5927\u6570\u8d8a\u5c0f\u3002\u8003\u8651\u5230\u8fd9\u4e9b\u6027\u8d28\uff0c\u90a3\u6211\u4eec\u4e0d\u59a8\u4ece\u4e24\u8fb9\u63a5\u8fd1\u5b83\u4eec\u3002 \u6211\u4eec\u9996\u5148\u5047\u8bbe\u7b54\u6848\u5c31\u662f\u7531 \\(a[1]\\) \u548c \\(a[n]\\) \u6784\u6210\u7684\uff0c\u5982\u679c\u8bf4 \\(a[1] + a[n] > target\\) \u90a3\u4e48\u6211\u4eec\u8981\u60f3\u5c06\u4e24\u6570\u548c\u53d8\u5c0f\uff0c\u800c\u5bf9\u4e8e\u5de6\u8fb9\u7684\u6307\u9488\u6765\u8bf4\u6765\u8bf4\u5df2\u7ecf\u4e0d\u80fd\u53d8\u5f97\u66f4\u5c0f\u4e86\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5728\u6574\u4e2a\u6570\u7ec4\u7684\u6700\u5de6\u8fb9\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u5c06\u53f3\u8fb9\u7684\u6307\u9488\u5f80\u5de6\u79fb\u52a8 \u5982\u679c\u6b64\u65f6\u53d1\u73b0 \\(a[1] + a[n] < target\\) \u90a3\u4e48\u6211\u4eec\u5c31\u8981\u5c06\u5de6\u8fb9\u7684\u6307\u9488\u53f3\u79fb,\u56e0\u4e3a\u53f3\u8fb9\u7684\u6307\u9488\u5df2\u7ecf\u4e0d\u80fd\u53d8\u5f97\u66f4\u5927\u4e86\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5728\u6574\u4e2a\u6570\u7ec4\u7684\u6700\u53f3\u8fb9\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u5c06\u5de6\u8fb9\u7684\u6307\u9488\u5f80\u53f3\u79fb\u52a8 \u63a8\u5e7f\u5230\u4e00\u822c\u60c5\u5f62\uff0c\u5982\u679c\u6b64\u65f6\u6211\u4eec\u4e24\u4e2a\u6307\u9488\u5206\u522b\u6307\u5728 \\(l,r\\) \u4e0a\uff0c\u4e14 \\(l < r\\) , \u5982\u679c \\(a[l] + a[r] > target\\) \uff0c\u5c31\u5c06 \\(r\\) \u51cf\u4e00\uff0c\u5982\u679c \\(a[l] + a[r] < target\\) \uff0c\u5c31\u5c06 \\(l\\) \u52a0\u4e00\u3002\u8fd9\u6837 \\(l\\) \u6307\u9488\u4e0d\u65ad\u53f3\u79fb\uff0c \\(r\\) \u6307\u9488\u4e0d\u65ad\u5de6\u79fb\uff0c\u6700\u540e\u4e24\u8005\u5404\u903c\u8fd1\u5230\u4e00\u4e2a\u7b54\u6848\uff0c\u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684\u4e24\u4e2a\u4f4d\u7f6e \u4e8e\u662f\u6211\u4eec\u80fd\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ vector < int > twoSum ( vector < int >& numbers , int target ) { int l = 0 , r = numbers . size () -1 ; while ( l < r ) if ( numbers [ l ] + numbers [ r ] > target ) r -- ; else if ( numbers [ l ] + numbers [ r ] == target ) break ; else l ++ ; return ( vector < int > ){ l + 1 , r + 1 }; } 2.2.3 \u5feb\u6392\u4e2d\u7684\u5bf9\u78b0\u6307\u9488 \u00b6 \u6211\u4eec\u5728\u5feb\u901f\u6392\u5e8f\u7684\u5212\u5206\u754c\u9650\u7684\u65f6\u5019\u5176\u5b9e\u5c31\u7528\u5230\u4e86\u5bf9\u78b0\u6307\u9488\uff0c\u5047\u8bbe\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u754c\u9650\u4f4d\u7f6e \\(x\\) \uff0c\u7136\u540e\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u7ec4\u6240\u6709\u5927\u4e8e \\(a[x]\\) \u7684\u6570\u653e\u5230 \\(x\\) \u7684\u53f3\u8fb9\uff0c\u7136\u540e\u5c06\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e \\(a[x]\\) \u7684\u6570\u653e\u5728 \\(x\\) \u4f4d\u7f6e\u7684\u5de6\u8fb9\uff0c\u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\u5206\u522b\u6307\u5411\u6700\u5de6\u8fb9\u548c\u6700\u53f3\u8fb9\uff0c\u7136\u540e\u4e24\u4e2a\u6307\u9488\u90fd\u5f80\u4e2d\u95f4\u8d70\uff0c\u7136\u540e\u5de6\u8fb9\u9047\u5230\u5927\u4e8e\u6211\u4eec\u9009\u4e2d\u7684x\u503c\u5c31\u505c\u4e0b\u6765\uff0c\u53f3\u8fb9\u5c31\u9047\u5230\u5c0f\u4e8e\u6211\u4eec\u9009\u62e9\u7684 \\(x\\) \u503c\u5c31\u505c\u4e0b\u6765\uff0c\u7136\u540e\u4ea4\u6362\u4e24\u6570\uff0c\u7136\u540e\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u4e24\u4e2a\u6307\u9488\u76f8\u9047\u5c31\u5b8c\u6210\u4e86\u6211\u4eec\u7684\u5212\u5206\uff0c\u5373 \\(x\\) \u5de6\u8fb9\u7684\u90fd\u5c0f\u4e8e\u7b49\u4e8e \\(a[x]\\) \uff0c \\(x\\) \u53f3\u8fb9\u7684\u90fd\u5927\u4e8e\u7b49\u4e8e \\(a[x]\\) \u4e8e\u662f\u6211\u4eec\u80fd\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a\uff08\u622a\u53d6\u4ee3\u7801\u6bb5\uff09 C++ int x = a [ l + r >> 1 ], i = l -1 , j = r + 1 ; while ( i < j ) { while ( a [ ++ i ] < x ); while ( a [ -- j ] > x ); if ( i < j ) swap ( a [ i ], a [ j ]); } \u4e09\u3001\u5feb\u6162\u6307\u9488 \u00b6 \u5feb\u6162\u6307\u9488\u662f\u6307\u7684\uff0c\u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488 \\(low\\) \u548c \\(fast\\) \uff0c\u4e24\u8005\u90fd\u5f80\u540c\u4e00\u4e2a\u65b9\u5411\u524d\u8fdb\uff0c\u4f46\u662f\u4e24\u4e2a\u6307\u9488\u79fb\u52a8\u7684\u901f\u5ea6\u4e0d\u540c\uff0c\u6216\u8005\u76f8\u540c\u7684\u901f\u5ea6\uff0c\u4f46\u662f\u79fb\u52a8\u7684\u5951\u673a\u4e0d\u540c\uff0c\u8fd9\u79cd\u5f62\u6210\u4e00\u5feb\u4e00\u6162\u7684\u5f62\u5f0f\u5c31\u662f\u6211\u4eec\u7684\u5feb\u6162\u6307\u9488\u62c9 3.1 \u8ba1\u7b97\u94fe\u8868\u7684\u4e2d\u70b9 \u00b6 \u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\u5206\u522b\u4e3a \u6162\u6307\u9488 \\(low\\) \u548c\u5feb\u6307\u9488 \\(fast\\) \u90fd\u4ece\u5934\u8282\u70b9 head \u51fa\u53d1\uff0c\u6bcf\u8f6e\u8fed\u4ee3\u79fb\u52a8\u4e2d\uff0c\u5feb\u6307\u9488\u5411\u524d\u79fb\u52a8 \u4e24\u4e2a\u8282\u70b9 \uff0c\u6162\u6307\u9488\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\uff0c\u6700\u7ec8\u5f53\u5feb\u6307\u9488\u5230\u8fbe\u7ec8\u70b9\u7684\u65f6\u5019\uff0c\u6162\u6307\u9488\u521a\u597d\u5728\u4e2d\u95f4\u7684\u8282\u70b9\u3002 \u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7684\u8282\u70b9\u4e2a\u6570\u4e0e\u4e2d\u95f4\u8282\u70b9\u7684\u5173\u7cfb\uff08\u5934\u8282\u70b9\u7b97\u7b2c\u4e00\u4e2a\u8282\u70b9\uff09\uff0c\u5982\u679c\u662f\u5947\u6570\u4e2a\u8282\u70b9\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u7684 \\(low\\) \u6307\u9488\u521a\u597d\u8d70\u5230\u4e2d\u95f4\uff0c\u4f46\u662f\u5982\u679c\u662f\u5076\u6570\u4e2a\u8282\u70b9\u7684\u8bdd\uff0c\u6211\u4eec\u7684\u8282\u70b9\u4f1a\u8d70\u5230\u53f3\u8fb9\u53bb\uff0c\u8fd9\u91cc\u6839\u636e\u9898\u76ee\u7684\u9700\u6c42\u8f93\u51fa\u5bf9\u5e94\u7684\u7b54\u6848\u5c31\u597d\u4e86\uff0c\u6bd4\u5982\u8bf4\u5982\u679c\u6211\u4eec\u60f3\u8d70\u5230\u5de6\u8fb9\u90a3\u4e00\u4e2a\u90a3\u4e48\u6211\u4eec\u8d70 \\(fast\\) \u6307\u9488\u5982\u679c\u53d1\u73b0\u4e0d\u80fd\u79fb\u52a8\u4e24\u6b65\uff0c \\(low\\) \u6307\u9488\u5c31\u4e0d\u79fb\u52a8\u4e86\uff0c\u4e0b\u9762\u7ed9\u51fa\u4e24\u79cd\u573a\u666f\u7684\u56fe\u89e3\uff1a \u7531\u4e8e\u4ee3\u7801\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u8bf7\u8bfb\u8005\u81ea\u5df1\u4e66\u5199\u5566 3.2 \u5224\u65ad\u94fe\u8868\u662f\u5426\u6709\u73af \u00b6 3.2.1 \u95ee\u9898\u5f15\u51fa \u00b6 \u9009\u81ea\uff1a leetcode.141 \u73af\u5f62\u94fe\u8868 \u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 head \uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002 \u5982\u679c\u94fe\u8868\u4e2d\u6709\u67d0\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fde\u7eed\u8ddf\u8e2a next \u6307\u9488\u518d\u6b21\u5230\u8fbe\uff0c\u5219\u94fe\u8868\u4e2d\u5b58\u5728\u73af\u3002 \u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u8bc4\u6d4b\u7cfb\u7edf\u5185\u90e8\u4f7f\u7528\u6574\u6570 pos \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002\u6ce8\u610f\uff1apos \u4e0d\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012 \u3002\u4ec5\u4ec5\u662f\u4e3a\u4e86\u6807\u8bc6\u94fe\u8868\u7684\u5b9e\u9645\u60c5\u51b5\u3002 \u5982\u679c\u94fe\u8868\u4e2d\u5b58\u5728\u73af \uff0c\u5219\u8fd4\u56de true \u3002 \u5426\u5219\uff0c\u8fd4\u56de false \u3002 3.2.2 \u601d\u8def \u00b6 \u5982\u679c\u8bf4\u94fe\u8868\u4e2d\u6709\u73af\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u5feb\u6162\u6307\u9488 \\(fast\\) \u548c \\(low\\) \u5982\u679c\u90fd\u8fdb\u5165\u4e86\u8fd9\u4e2a\u73af\u4e2d\uff0c\u90a3\u4e48\u5b83\u4eec\u5c31\u4f1a\u5728\u91cc\u9762\u8f6c\u5708\uff0c\u56e0\u4e3a\u6211\u4eec\u5b9a\u4e49\u7684 \\(fast\\) \u6bcf\u6b21\u79fb\u52a8\u4e24\u6b65\uff0c \\(low\\) \u6bcf\u6b21\u79fb\u52a8\u4e00\u6b65\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u79fb\u52a8 \\(fast\\) \u6307\u9488\u90fd\u4f1a\u6bd4 \\(low\\) \u6307\u9488\u591a\u79fb\u52a8\u4e00\u6b65\uff0c\u90a3\u4e48\u8bf4\u660e\u8fd9\u4e24\u4e2a\u6307\u9488\u8fdf\u65e9\u4f1a\u5728\u73af\u91cc\u9762\u76f8\u9047\uff08\u5982\u679c\u5b58\u5728\u73af\u7684\u8bdd\uff09\u6211\u4eec\u5c31\u8fd4\u56de true \u5373\u53ef\uff0c\u5426\u5219\u6211\u4eec\u7684 \\(fast\\) \u6307\u9488\u9047\u5230\u4e86\u4e00\u4e2a \\(NULL\\) \u8282\u70b9\u5c31\u76f4\u63a5\u8fd4\u56de false \u5373\u53ef\u3002\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ bool hasCycle ( ListNode * head ) { ListNode * fast , * low ; fast = low = head ; while ( fast != NULL && fast -> next != NULL ){ fast = fast -> next -> next ; low = low -> next ; if ( fast == low ) return true ; } return false ; } Java boolean hasCycle ( ListNode head ) { ListNode fast , slow ; fast = slow = head ; while ( fast != null && fast . next != null ) { fast = fast . next . next ; slow = slow . next ; if ( fast == slow ) return true ; } return false ; } 3.3 \u5224\u65ad\u94fe\u8868\u4e2d\u73af\u7684\u8d77\u70b9 \u00b6 3.3.1 \u95ee\u9898\u5f15\u51fa \u00b6 \u9009\u81ea\uff1a leetcode 142. \u73af\u5f62\u94fe\u8868 II \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 head \u8fd4\u56de\u94fe\u8868\u5f00\u59cb\u5165\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002\u5982\u679c\u94fe\u8868\u65e0\u73af\uff0c\u5219\u8fd4\u56de null \u3002 \u5982\u679c\u94fe\u8868\u4e2d\u6709\u67d0\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fde\u7eed\u8ddf\u8e2a next \u6307\u9488\u518d\u6b21\u5230\u8fbe\uff0c\u5219\u94fe\u8868\u4e2d\u5b58\u5728\u73af\u3002 \u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u8bc4\u6d4b\u7cfb\u7edf\u5185\u90e8\u4f7f\u7528\u6574\u6570 pos \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e \uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09 \u3002\u5982\u679c pos \u662f -1 \uff0c\u5219\u5728\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002\u6ce8\u610f\uff1a pos \u4e0d\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u6807\u8bc6\u94fe\u8868\u7684\u5b9e\u9645\u60c5\u51b5\u3002 \u4e0d\u5141\u8bb8\u4fee\u6539 \u94fe\u8868\u3002 3.3.2 \u601d\u8def \u00b6 \u719f\u6089 STL \u7684\u540c\u5b66\u4f30\u8ba1\u4e00\u77ac\u95f4\u5c31\u60f3\u5230\u4e86\u7528\u4e00\u4e2a map<ListNode*,bool> \u6765\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u8282\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5982\u679c\u6211\u4eec\u5bf9\u4e00\u4e2a\u8282\u70b9\u8bbf\u95ee\u4e86 \u7b2c\u4e8c\u6b21 \uff0c\u8bf4\u660e\u8fd9\u4e2a\u70b9\u5c31\u662f\u6211\u4eec\u73af\u7684\u8d77\u70b9\uff0c\u4e8e\u662f\u6211\u4eec\u80fd\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ ListNode * detectCycle ( ListNode * head ) { map < ListNode * , bool > vis ; while ( head != NULL ){ if ( vis [ head ]) return head ; vis [ head ] = true ; head = head -> next ; } return NULL ; } \u7b80\u77ed\u6709\u529b\uff0c\u4f46\u662f\u8fd9\u4e0d\u662f\u6211\u4eec\u4eca\u5929\u8981\u8bb2\u7684\uff0c\u6211\u4eec\u6709\u4e00\u79cd\u66f4\u52a0 \"\u4f18\u96c5\" \u7684\u505a\u6cd5\uff0c\u5373\u53cc\u6307\u9488: \u6211\u4eec\u5047\u8bbe\u7b2c\u4e00\u6b21\u76f8\u9047\u65f6\u6162\u6307\u9488 \\(low\\) \u8d70\u4e86 \\(k\\) \u6b65\u90a3\u4e48\u5feb\u6307\u9488 \\(fast\\) \u4e00\u5b9a\u8d70\u4e86 \\(2k\\) \u6b65\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bd4 \\(low\\) \u591a\u8d70\u4e86 \\(k\\) \u6b65\uff08\u4e5f\u5c31\u662f\u73af\u7684\u957f\u5ea6\uff09\u3002 \u8bbe\u76f8\u9047\u70b9\u8ddd\u73af\u7684\u8d77\u70b9\u7684\u8ddd\u79bb\u4e3a \\(m\\) \uff0c\u90a3\u4e48\u73af\u7684\u8d77\u70b9\u8ddd\u5934\u7ed3\u70b9 \\(head\\) \u7684\u8ddd\u79bb\u4e3a \\(k - m\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u4ece \\(head\\) \u524d\u8fdb \\(k - m\\) \u6b65\u5c31\u80fd\u5230\u8fbe\u73af\u8d77\u70b9\u3002\u5de7\u7684\u662f\uff0c\u5982\u679c\u4ece\u76f8\u9047\u70b9\u7ee7\u7eed\u524d\u8fdb \\(k - m\\) \u6b65\uff0c\u4e5f\u6070\u597d\u5230\u8fbe\u73af\u8d77\u70b9\u3002 \u6240\u4ee5\uff0c\u53ea\u8981\u6211\u4eec\u628a\u5feb\u6162\u6307\u9488\u4e2d\u7684\u4efb\u4e00\u4e2a\u91cd\u65b0\u6307\u5411 head\uff0c\u7136\u540e\u4e24\u4e2a\u6307\u9488\u540c\u901f\u524d\u8fdb\uff0ck - m \u6b65\u540e\u5c31\u4f1a\u76f8\u9047\uff0c\u76f8\u9047\u4e4b\u5904\u5c31\u662f\u73af\u7684\u8d77\u70b9\u4e86\u3002 \u4e8e\u662f\u6211\u4eec\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ ListNode * detectCycle ( ListNode * head ) { ListNode * fast , * low ; fast = low = head ; while ( fast != NULL && fast -> next != NULL ){ fast = fast -> next -> next ; low = low -> next ; if ( fast == low ) break ; } if ( fast == NULL || fast -> next == NULL ) return NULL ; fast = head ; while ( fast != low ) fast = fast -> next , low = low -> next ; return low ; } 3.4 \u6c42\u94fe\u8868\u4e2d\u73af\u7684\u957f\u5ea6 \u00b6 \u4e0a\u9762\u4e5f\u5df2\u7ecf\u63d0\u8fc7\u4e86,\u5982\u679c\u5b58\u5728\u73af\u7684\u8bdd\uff0c\u6211\u4eec\u5728\u4e24\u4e2a\u6307\u9488\u76f8\u9047\u540e\uff0c\u505c\u6b62\u4e24\u4e2a\u6307\u9488\u7684\u5176\u4e2d\u4e00\u4e2a\uff0c\u7136\u540e\u8ba9\u53e6\u4e00\u4e2a\u7ee7\u7eed\u8d70\uff0c\u76f4\u5230\u518d\u6b21\u76f8\u9047\uff0c\u90a3\u4e48\u8d70\u7684\u8fd9\u4e2a\u6307\u9488\u7684\u8d70\u8fc7\u7684\u8def\u5f84\u957f\u5ea6\u5c31\u662f\u94fe\u8868\u4e2d\u73af\u7684\u957f\u5ea6\uff0c\u4e0d\u96be\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ ListNode * GetCycleLen ( ListNode * head ) { ListNode * fast , * low ; fast = low = head ; while ( fast != NULL && fast -> next != NULL ){ fast = fast -> next -> next ; low = low -> next ; if ( fast == low ) break ; } if ( fast == NULL || fast -> next == NULL ) return 0 ; int ans = 0 ; while ( fast != low ) low = low -> next , ans ++ ; return ans ; } 3.5 \u6c42\u94fe\u8868\u5012\u6570\u7b2ck\u4e2a\u5143\u7d20 \u00b6 3.5.1 \u95ee\u9898\u5f15\u5165 \u00b6 \u9009\u81ea\uff1a leetcode \u5251\u6307 Offer 22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2c \\(k\\) \u4e2a\u8282\u70b9\u3002\u4e3a\u4e86\u7b26\u5408\u5927\u591a\u6570\u4eba\u7684\u4e60\u60ef\uff0c\u672c\u9898\u4ece \\(1\\) \u5f00\u59cb\u8ba1\u6570\uff0c\u5373\u94fe\u8868\u7684\u5c3e\u8282\u70b9\u662f\u5012\u6570\u7b2c \\(1\\) \u4e2a\u8282\u70b9\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u94fe\u8868\u6709 \\(6\\) \u4e2a\u8282\u70b9\uff0c\u4ece\u5934\u8282\u70b9\u5f00\u59cb\uff0c\u5b83\u4eec\u7684\u503c\u4f9d\u6b21\u662f \\(1\u30012\u30013\u30014\u30015\u30016\\) \u3002\u8fd9\u4e2a\u94fe\u8868\u7684\u5012\u6570\u7b2c \\(3\\) \u4e2a\u8282\u70b9\u662f\u503c\u4e3a \\(4\\) \u7684\u8282\u70b9\u3002 \u6211\u4eec\u53ea\u9700\u8981\u8ba9\u5feb\u6307\u9488 \\(fast\\) \u5148\u79fb\u52a8k\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u6211\u4eec\u540c\u65f6\u540c\u6b65\u79fb\u52a8\u5feb\u6162\u6307\u9488\uff0c\u76f4\u5230\u5feb\u6307\u9488\u5230\u8fbe NULL \u6b64\u65f6\u7684\u6162\u6307\u9488 \\(low\\) \u6307\u5411\u7684\u4f4d\u7f6e\u5c31\u662f\u94fe\u8868\u5012\u6570\u7b2ck\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u4e8e\u662f\u6211\u4eec\u4e0d\u96be\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ ListNode * getKthFromEnd ( ListNode * head , int k ) { ListNode * fast , * low ; fast = low = head ; while ( k -- ) fast = fast -> next ; while ( fast != NULL ) fast = fast -> next , low = low -> next ; return low ; } \u540e\u8a00 \u00b6 \u5bf9\u4e8e\u53cc\u6307\u9488\u6765\u8bf4\u5176\u5b9e\u6bd4\u8f83\u5bbd\u6cdb\uff0c\u800c\u4e14\u975e\u5e38\u7075\u6d3b\uff0c\u9700\u8981\u8bfb\u8005\u591a\u5199\u624d\u80fd\u638c\u63e1\uff0c\u76ee\u524d\u5c31\u5148\u4ecb\u7ecd\u8fd9\u4e9b\u5185\u5bb9\u5427\uff0c\u5176\u5b9e\u5f00\u59cb\u6211\u53ea\u662f\u60f3\u4ecb\u7ecd\u4e00\u4e0b\u5173\u4e8e\u6ed1\u52a8\u7a97\u53e3\u90e8\u5206\u7684\u53cc\u6307\u9488\uff0c\u5728\u67e5\u9605\u7f51\u4e0a\u4e00\u4e9b\u8d44\u6599\u540e\uff0c\u6ca1\u60f3\u5230\u8d8a\u5199\u8d8a\u591a\uff0c\u5982\u679c\u9047\u5230\u4e00\u4e9b\u65b0\u7684\u6280\u5de7\u6211\u4f1a\u6301\u7eed\u66f4\u65b0\u7684\uff0c\u4e0b\u9762\u5c31\u662f\u8bad\u7ec3\u9898\u5355\u73af\u8282\u4e86\uff1a \u9898\u76ee \u94fe\u63a5 \u9898\u89e3 Subsequence http://poj.org/problem?id=3061 \u89c1\u4e0a\u9762 \u4e58\u79ef\u5c0f\u4e8eK\u7684\u5b50\u6570\u7ec4 https://leetcode-cn.com/problems/subarray-product-less-than-k/ Jessica's Reading Problem http://poj.org/problem?id=3320 \u89c1\u4e0a\u9762 \u901a\u8fc7\u5220\u9664\u5b57\u6bcd\u5339\u914d\u5230\u5b57\u5178\u91cc\u6700\u957f\u5355\u8bcd https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/ \u89c1\u4e0a\u9762 \u4e24\u6570\u4e4b\u548c II - \u8f93\u5165\u6709\u5e8f\u6570\u7ec4 https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/ \u89c1\u4e0a\u9762 \u73af\u5f62\u94fe\u8868 https://leetcode-cn.com/problems/linked-list-cycle/ \u89c1\u4e0a\u9762 \u73af\u5f62\u94fe\u8868 II https://leetcode-cn.com/problems/linked-list-cycle-ii/ \u89c1\u4e0a\u9762 \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9 https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/ \u89c1\u4e0a\u9762 \u4e09\u6570\u4e4b\u548c https://leetcode-cn.com/problems/3sum/ \u7edd\u5bf9\u5dee\u4e0d\u8d85\u8fc7\u9650\u5236\u7684\u6700\u957f\u8fde\u7eed\u5b50\u6570\u7ec4 https://leetcode-cn.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/ \u6551\u751f\u8247 https://leetcode-cn.com/problems/boats-to-save-people/ R https://ac.nowcoder.com/acm/contest/23479/A https://acmer.blog.csdn.net/article/details/122837067 \u61d2\u60f0\u7684\u725b https://www.acwing.com/problem/content/1924 https://acmer.blog.csdn.net/article/details/122801496 \u8d1d\u831c\u653e\u6162\u811a\u6b65 https://www.acwing.com/problem/content/description/1936/ https://acmer.blog.csdn.net/article/details/122794773 \u667a\u4e43\u7684\u5bc6\u7801 https://ac.nowcoder.com/acm/contest/23478/I https://acmer.blog.csdn.net/article/details/122790920","title":"\u53cc\u6307\u9488"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#_1","text":"\u53cc\u6307\u9488\u53c8\u88ab\u79f0\u4e3a \u5c3a\u53d6\u6cd5 \u53cc\u6307\u9488\u662f\u4e00\u79cd\u7b80\u5355\u800c\u53c8\u7075\u6d3b\u7684\u6280\u5de7\u548c\u601d\u60f3\uff0c\u5e76\u4e0d\u662f\u4e00\u79cd\u5177\u4f53\u7684\u7b97\u6cd5\uff0c\u5355\u72ec\u4f7f\u7528\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u4e00\u4e9b\u7279\u5b9a\u95ee\u9898\uff0c\u548c\u5176\u4ed6\u7b97\u6cd5\u7ed3\u5408\u4e5f\u80fd\u53d1\u6325\u591a\u6837\u7684\u7528\u5904\u3002 \u53cc\u6307\u9488\u987e\u540d\u601d\u4e49\uff0c\u540c\u65f6\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\u7ef4\u62a4\u6216\u8005\u662f\u7edf\u8ba1\u4e00\u4e9b\u533a\u95f4\u4fe1\u606f\u7684\u3002\u7279\u522b\u662f\u5728\u6570\u7ec4\u3001\u94fe\u8868\u7b49\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u53cc\u6307\u9488\u7684\u7b97\u6cd5\u80fd\u5927\u5927\u51cf\u5c11\u6211\u4eec\u7684\u7f16\u7801\u901f\u5ea6\u4ee5\u53ca\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u53cc\u6307\u9488\u5927\u4f53\u7684\u5e94\u7528\u5206\u4e3a\u4ee5\u4e0b\u4e09\u4e2a\u5927\u7c7b\uff1a \u6ed1\u52a8\u7a97\u53e3 \u3001 \u78b0\u649e\u6307\u9488 \u3001 \u5feb\u6162\u6307\u9488","title":"\u53cc\u6307\u9488\u7b97\u6cd5"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#_2","text":"","title":"\u4e00\u3001\u6ed1\u52a8\u7a97\u53e3"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#11","text":"","title":"1.1 \u7ef4\u62a4\u533a\u95f4\u548c|\u79ef"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#111","text":"\u9009\u81ea Subsequence (POJ No.3061) \u7ed9\u5b9a\u957f\u5ea6\u4e3a \\(N \\ (10 < N <10^5)\\) \u7684\u6b63\u6574\u6570\u6570\u5217 \\(a_0,a_1,\u2026\u2026,a_{n-1}\\) \u4ee5\u53ca\u6b63\u6574\u6570 \\(S \\ (0 < S < 10^8)\\) \u3002\u6c42\u51fa\u603b\u5408\u4e0d\u5c0f\u4e8eS\u7684 \u8fde\u7eed \u5b50\u5e8f\u5217\u957f\u5ea6\u7684\u6700\u5c0f\u503c\u3002\u5982\u679c\u89e3\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa0 \u6837\u4f8b\uff1a Text Only 10 15 5 1 3 5 10 7 4 9 2 8 Text Output 2","title":"1.1.1 \u95ee\u9898\u5f15\u51fa"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#112","text":"\u6211\u4eec\u679a\u4e3e\u5b50\u5e8f\u5217\u7684\u5de6\u7aef\u70b9\uff0c\u7136\u540e\u518d\u679a\u4e3e\u957f\u5ea6\uff0c\u4ee5\u53ca\u518d\u4e00\u4e2a\u5faa\u73af\u6765\u8ba1\u7b97 \\([l,r]\\) \u8fd9\u4e2a\u533a\u95f4\u7684\u4e00\u4e2a\u6743\u503c\u548c\uff0c\u7136\u540e\u4ece\u6ee1\u8db3\u6761\u4ef6\u7684\u5e8f\u5217\u91cc\u9762\u6311\u9009\u51fa\u6700\u77ed\u7684\u4e00\u4e2a\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u5c31\u4e3a \\(O(N^3)\\) , \u4ee3\u7801\u5982\u4e0b\uff1a C++ #include <iostream> #include <algorithm> using namespace std ; #define ll long long const int N = 1e5 + 10 ; ll a [ N ], S , n ; int main () { int t ; cin >> t ; while ( t -- ){ cin >> n >> S ; int ans = 0x3f3f3f3f ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int l = 1 ; l <= n ; ++ l ){ for ( int len = 1 ; l + len - 1 <= n ; ++ len ) { int r = l + len - 1 ; ll sum = 0 ; for ( int j = l ; j <= r ; ++ j ) sum += a [ j ]; if ( sum >= S ) ans = min ( ans , len ); } } if ( ans == 0x3f3f3f3f ) cout << 0 << endl ; else cout << ans << endl ; } return 0 ; }","title":"1.1.2 \u6734\u7d20\u60f3\u6cd5"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#113","text":"\u5f53\u7136 \\(O(N^3)\\) \u7684\u590d\u6742\u5ea6\u8fdc\u8fdc\u4e0d\u591f\uff0c\u4e8e\u662f\u6211\u4eec\u53d1\u73b0\u5728\u6700\u5185\u5c42\u7684\u8ba1\u7b97\u533a\u95f4\u548c\u7684\u5faa\u73af\u53ef\u4ee5\u7528\u524d\u7f00\u548c\u4f18\u5316\u6389\uff0c\u90a3\u4e48\u4f18\u5316\u540e\u4ee3\u7801\u5982\u4e0b\uff1a C++ #include <iostream> #include <algorithm> using namespace std ; #define ll long long const int N = 1e5 + 10 ; ll a [ N ], S , n , pre [ N ]; int main () { int t ; cin >> t ; while ( t -- ){ cin >> n >> S ; int ans = 0x3f3f3f3f ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], pre [ i ] = pre [ i -1 ] + a [ i ]; for ( int l = 1 ; l <= n ; ++ l ){ for ( int len = 1 ; l + len - 1 <= n ; ++ len ) { int r = l + len - 1 ; ll sum = pre [ r ] - pre [ l -1 ]; if ( sum >= S ) ans = min ( ans , len ); } } if ( ans == 0x3f3f3f3f ) cout << 0 << endl ; else cout << ans << endl ; } return 0 ; }","title":"1.1.3 \u524d\u7f00\u548c\u4f18\u5316"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#114","text":"\u73b0\u5728\u6211\u4eec\u4ee5\u53ca\u5c06\u590d\u6742\u5ea6\u964d\u5230\u4e86 \\(O(N^2)\\) \u4e86\uff0c\u4f46\u662f\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u800c\u8a00\uff0c\u663e\u7136\u662f\u4e0d\u591f\u770b\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u5f97\u518d\u60f3\u4e00\u4e0b\u4f18\u5316\uff0c\u4e0d\u96be\u53d1\u73b0\u7531\u4e8e\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u90fd\u662f\u6b63\u6574\u6570\uff0c\u90a3\u4e48\u8bf4\u660e\u6211\u4eec\u7684\u524d\u7f00\u548c\u662f\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u7684\u5e8f\u5217\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u901a\u8fc7\u4e8c\u5206\u6cd5\u6765\u52a0\u901f\u6211\u4eec\u5bfb\u627e\u53ef\u884c\u957f\u5ea6\uff0c\u800c\u4e0d\u662f\u4ece1\u5f00\u59cb\u679a\u4e3e\uff0c\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u6837\u7684\u4ee3\u7801\uff1a C++ #include <iostream> #include <algorithm> using namespace std ; #define ll long long const int N = 1e5 + 10 ; ll a [ N ], S , n , pre [ N ]; int main () { int t ; cin >> t ; while ( t -- ){ cin >> n >> S ; int ans = 0x3f3f3f3f ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], pre [ i ] = pre [ i -1 ] + a [ i ]; for ( int l = 1 ; l <= n ; ++ l ){ int r = lower_bound ( pre + 1 , pre + n + 1 , S + pre [ l -1 ]) - pre ; if ( r > n ) continue ; ans = min ( ans , r - l + 1 ); } if ( ans == 0x3f3f3f3f ) cout << 0 << endl ; else cout << ans << endl ; } return 0 ; } \u6b64\u65f6\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(Nlog_N)\\) \uff0c\u5bf9\u4e8e\u8fd9\u4e00\u9053\u9898\u6765\u8bf4\u7b97\u662f\u7ef0\u7ef0\u6709\u4f59\u4e86\uff0c\u4f46\u662f\u8fd9\u4e0d\u662f\u6700\u4f18\u89e3\u6216\u8005\u8bf4\u4e0d\u7b97\u4e00\u4e2a\u6bd4\u8f83\u7406\u60f3\u7684\u89e3\u6cd5","title":"1.1.4 \u4e8c\u5206\u4f18\u5316"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#115","text":"\u4e8e\u662f\u5f15\u51fa\u4e86\u6211\u4eec\u4eca\u5929\u7684\u4e3b\u89d2 \uff1a \u201c\u53cc\u6307\u9488\u7b97\u6cd5\u201d 1.\u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\uff1a \\(l\\) \u548c \\(r\\) \u5728\u521d\u59cb\u65f6\u523b\u90fd\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u4e14\u5c06\u5b50\u533a\u95f4\u7684\u548c\u7f6e\u4e3a \\(a[1]\\) 2.\u7136\u540e\u6211\u4eec\u632a\u52a8 \\(r\\) \u6307\u9488\u4e00\u76f4\u5230\u5927\u4e8e\u7b49\u4e8e \\(S\\) \u4f4d\u7f6e\uff0c\u7136\u540e\u6211\u4eec \u7edf\u8ba1\u5f53\u524d\u7684\u957f\u5ea6 \uff0c\u540e\u9762\u7684\u5b8c\u5168\u4e0d\u7528\u53bb\u904d\u5386\u4e86\uff0c\u56e0\u4e3a\u524d\u7f00\u548c\u662f\u5355\u8c03\u9012\u589e\u7684\u6240\u4ee5\u5f53\u524d\u4f4d\u7f6e\u5c31\u662f\u6700\u4f18\u7684 3.\u7136\u540e\u6211\u4eec\u5c06\u5de6\u6307\u9488 \\(l\\) \u5f80\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c 4.\u7136\u540e\u518d\u770b \\(r\\) \u6307\u9488\u662f\u5426\u80fd\u79fb\u52a8\uff0c\u4e5f\u5c31\u662f\u91cd\u590d\u4e0a\u9762\u7684 \\(r\\) \u6307\u9488\u79fb\u52a8\u7684\u8fc7\u7a0b\uff0c\u6700\u540e\u5982\u679c\u6211\u4eec\u53d1\u73b0 \\(r\\) \u6307\u9488\u4ee5\u53ca\u79fb\u52a8\u5230\u672b\u5c3e\u4e86\uff0c\u5e76\u4e14\u5f53\u524d\u7684\u548c\u8fd8\u662f\u5c0f\u4e8e \\(S\\) \u7684\uff0c\u90a3\u4e48\u8bf4\u660e\u540e\u9762\u4e5f\u4e0d\u53ef\u80fd\u518d\u6709\u8fd9\u79cd\u533a\u95f4\u6ee1\u8db3\u6761\u4ef6\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5 break \u6700\u540e\u6211\u4eec\u7684ans\u5982\u679c\u6ca1\u66f4\u65b0\u7684\u8bdd\u8bf4\u660e\u5c31\u6ca1\u6709\u6ee1\u8db3\u7684\u533a\u95f4\uff0c\u5f53\u7136\u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6c42\u548c\u5224\u65ad\u662f\u5426\u4f1a\u5b58\u5728 \u4e0a\u9762\u6837\u4f8b\u7684\u4e00\u4e2a\u56fe\u89e3\uff1a \u90a3\u4e48\u6211\u4eec\u4e0d\u96be\u5f97\u51fa\u5982\u4e0b\u4ee3\u7801\uff1a C++ #include <iostream> #include <algorithm> using namespace std ; #define ll long long const int N = 1e5 + 10 ; ll a [ N ], S , n , pre [ N ]; int main () { int t ; cin >> t ; while ( t -- ){ cin >> n >> S ; int ans = 0x3f3f3f3f ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; int l = 1 , r = 1 ; ll sum = a [ 1 ]; while ( r <= n ) { while ( r <= n && sum < S ) sum += a [ ++ r ]; if ( sum < S ) break ; ans = min ( ans , r - l + 1 ); sum -= a [ l ++ ]; } if ( ans == 0x3f3f3f3f ) cout << 0 << endl ; else cout << ans << endl ; } return 0 ; } \u6211\u4eec\u6765\u5206\u6790\u8fd9\u4e2a\u4ee3\u7801\u7684\u590d\u6742\u5ea6\uff0c\u5bf9\u4e8e \\(l\\) \u548c \\(r\\) \u6307\u9488\u6211\u4eec\u6ca1\u6709\u8fdb\u884c\u56de\u6eaf\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4e24\u4e2a\u6307\u9488\u800c\u8a00\u6700\u591a\u8986\u76d6\u6574\u4e2a\u6570\u7ec4\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f \\(O(N)\\) \u7684\uff0c\u5e76\u4e14\u5728\u601d\u8def\u4e0a\u53cc\u6307\u9488\u7684\u505a\u6cd5\u4e5f\u4f1a\u6bd4\u524d\u7f00\u548c+\u4e8c\u5206\u4f18\u5316\u597d\uff0c\u7a7a\u95f4\u5229\u7528\u7387\u4e5f\u6bd4\u8f83\u9ad8\uff0c\u4f46\u662f\u6709\u7684\u65f6\u5019\u53ef\u80fd\u53cc\u6307\u9488\u4f1a\u642d\u914d\u4e8c\u5206\u4e00\u8d77\u7528\uff0c\u8fd9\u4e9b\u4e1c\u897f\u5c31\u9700\u8981\u8bfb\u8005\u5237\u9898\u8e29\u5751\u5566\uff0c\u6211\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002","title":"1.1.5 \u53cc\u6307\u9488\u505a\u6cd5"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#12","text":"","title":"1.2 \u6700\u5c0f\u53ef\u884c\u533a\u95f4"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#121","text":"\u9009\u81ea Jessica\u2019s Reading Problem (POJ No.3320) \u4e3a\u4e86\u51c6\u5907\u8003\u8bd5\uff0c \\(Jessica\\) \u5f00\u59cb\u8bfb\u4e00\u672c\u5f88\u539a\u7684\u8bfe\u672c\u3002\u8981\u60f3\u901a\u8fc7\u8003\u8bd5\uff0c\u5fc5\u987b\u628a\u8bfe\u672c\u4e2d\u6240\u6709\u7684\u77e5\u8bc6\u70b9\u90fd\u638c\u63e1\u3002\u8fd9\u672c\u4e66\u603b\u5171\u6709P\u9875\uff0c\u7b2c \\(i\\) \u9875\u6070\u597d\u6709\u4e00\u4e2a\u77e5\u8bc6\u70b9 \\(a_i\\) (\u6bcf\u4e2a\u77e5\u8bc6\u70b9\u90fd\u6709\u4e00\u4e2a\u6574\u6570\u7f16\u53f7 \uff09\u3002\u5168\u4e66\u4e2d\u540c\u4e00\u4e2a\u77e5\u8bc6\u70b9\u53ef\u80fd\u4f1a\u88ab\u591a\u6b21\u63d0\u5230\uff0c\u6240\u4ee5\u5979\u5e0c\u671b\u901a\u8fc7\u9605\u8bfb\u5176\u4e2d\u8fde\u7eed\u7684\u4e00\u4e9b\u9875\u628a\u6240\u6709\u7684\u77e5\u8bc6\u70b9\u90fd\u8986\u76d6\u5230\u3002\u7ed9\u5b9a\u6bcf\u9875\u5199\u5230\u7684\u77e5\u8bc6\u70b9\uff0c\u8bf7\u6c42\u51fa\u8981\u9605\u8bfb\u7684\u6700\u5c11\u9875\u6570\u3002 \u6837\u4f8b\uff1a \u8f93\u5165\uff1a Text Only 5 1 8 8 8 1 \u8f93\u51fa\uff1a Text Only 2","title":"1.2.1 \u95ee\u9898\u5f15\u51fa"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#122","text":"\u9996\u5148\u6211\u4eec\u8981\u7edf\u8ba1\u6709\u591a\u5c11\u672c\u4e66\uff08\u6570\u91cf\u4e3a \\(len\\) \uff09\uff0c\u8fd9\u4e2a\u6211\u4eec\u53ef\u4ee5\u7528 set \u6216\u8005 map \u5bb9\u5668\u6765\u7edf\u8ba1\uff0c\u7136\u540e\u540c\u6837\u7684 1.\u6211\u4eec\u5b9a\u4e49 \\(l\\) \u548c \\(r\\) \u4e24\u4e2a\u6307\u9488,\u4e24\u8005\u90fd\u521d\u59cb\u5316\u4e3a\u9996\u4f4d\u7f6e \\(1\\) \u7edf\u8ba1\u8bbf\u95ee\u6b21\u6570\u7684\u53ef\u4ee5\u4f7f\u7528 map<int,int> \u5bb9\u5668\u6765\u5b58\u50a8\u4fe1\u606f 2.\u7136\u540e\u6211\u4eec\u5c06 \\(r\\) \u6307\u9488\u4e0d\u65ad\u5f80\u540e\u79fb\u52a8\u76f4\u5230\u6ee1\u8db3\u4e0d\u540c\u4e66\u672c\u6570 \\(res\\) \u548c \\(len\\) \u76f8\u7b49\uff0c\u5728\u5c06 \\(r\\) \u6307\u9488\u4e0d\u65ad\u540e\u79fb\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ea\u8ba1\u7b97\u5f53\u524d\u8bbf\u95ee\u6b21\u6570\u503c\u4e3a0\u7684\u4e66\u672c\u6570\u5373\u53ef\uff08\u5373\u51fa\u73b0\u65b0\u4e66\u7684\u65f6\u5019\u6211\u4eec\u7684\u6570\u7684\u79cd\u7c7bres\u624d\u4f1a\u66f4\u65b0\uff09 3.\u5982\u679c\u6211\u4eec\u53d1\u73b0\u5faa\u73af\u7ed3\u675f\u540e\u6211\u4eec\u7684 \\(res\\) \u5373\u4e66\u672c\u6570\u91cf\u6bd4 \\(n\\) \u5c0f\u7684\u8bdd\u8bf4\u660e\u540e\u9762\u4e5f\u4e0d\u518d\u53ef\u80fd\u4f1a\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u5e8f\u5217\u4e86 4.\u7136\u540e\u6211\u4eec\u7edf\u8ba1\u5f53\u524d\u7684\u957f\u5ea6\uff0c\u5e76\u66f4\u65b0 \\(ans\\) \u7684\u7ed3\u679c\uff0c\u540c\u65f6\u5c06 \\(l\\) \u6307\u9488\u53f3\u79fb\u4e00\u6b65 \u4e8e\u662f\u6211\u4eec\u5c31\u80fd\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ #include <iostream> #include <algorithm> #include <cstdio> #include <set> #include <map> using namespace std ; #define ll long long const int N = 1e5 + 10 ; int a [ N ], n ; int main () { scanf ( \"%d\" , & n ); set < int > S ; for ( int i = 1 ; i <= n ; ++ i ) scanf ( \"%d\" , & a [ i ]), S . insert ( a [ i ]); int len = S . size (); map < int , int > vis ; vis . clear (); int l = 1 , r = 1 , res = 0 ; int ans = 0x3f3f3f3f ; while ( l <= r ){ while ( r <= n && res < len ){ if ( vis [ a [ r ]] == 0 ) res ++ ; vis [ a [ r ++ ]] ++ ; } if ( res < len ) break ; ans = min ( ans , r - l ); if ( -- vis [ a [ l ++ ]] == 0 ) res -- ; } printf ( \"%d \\n \" , ans ); return 0 ; } \u6ce8\u610f\u8fd9\u91cc\u7684\u5199\u6cd5\u548c\u4e0a\u9762\u7684\u6709\u70b9\u4e0d\u592a\u4e00\u6837\uff0c\u5c31\u5728\u4e8e\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u6211\u4eec\u5728\u8fd9\u91cc\u5e76\u6ca1\u6709\u76f4\u63a5\u7b97\u4e0a\uff0c\u662f\u56e0\u4e3a\u4e0d\u7b97\u4e0a\u7684\u8bdd\u5728\u540e\u9762\u7684\u5904\u7406\u4e2d\u4e0d\u7528\u8003\u8651\u8fb9\u754c\u60c5\u51b5\uff0c\u8fd9\u4e00\u70b9\u8bfb\u8005\u4eec\u53ef\u4ee5\u81ea\u5df1\u4e0b\u6765\u624b\u52a8\u6a21\u62df\u4e00\u4e0b","title":"1.2.2 \u601d\u8def"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#13","text":"","title":"1.3 \u56fa\u5b9a\u7a97\u53e3\u6ed1\u52a8"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#131","text":"\u7ed9\u5b9a\u957f\u5ea6\u4e3a \\(n \\ (k <= n <= 10^6)\\) \u7684\u6570\u5217 \\(a_0 a_1 a_2 \u2026\u2026 a_{n-1} \\ (0 <= a_i <= 10^9)\\) \u6c42\u89e3\u533a\u95f4\u957f\u5ea6\u4e3a \\(k (1<=k<=n)\\) \u7684\u5b50\u4e32\u7684\u6700\u5927\u503c","title":"1.3.1 \u95ee\u9898\u5f15\u51fa"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#132","text":"\u8fd9\u4e2a\u9898\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u4e86\u5148\u9884\u5904\u7406\u51fa\u524d \\(n\\) \u4e2a\u6570\u7684\u524d\u7f00\u548c\uff0c\u7136\u540e\u6211\u4eec\u904d\u5386\u679a\u4e3e\u5de6\u533a\u95f4\u5c31\u597d\u4e86,\u4f46\u662f\u901a\u8fc7\u53cc\u6307\u9488\u6216\u8005\u662f\u8bf4\u6ed1\u52a8\u7a97\u53e3\u7684\u65b9\u6cd5\u80fd\u66f4 \u201c\u4f18\u96c5\u201d \u7684\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5148\u5c06\u524dk\u4e2a\u6570\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u6211\u4eec\u5b9a\u4e49 \\(l\\) \u6307\u9488\u6307\u5411\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c \\(r\\) \u6307\u9488\u6307\u5411\u7b2ck\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u4e0d\u65ad\u5c06 \\(l\\) \u548c \\(r\\) \u6307\u9488\u53f3\u79fb\uff0c\u5728\u79fb\u52a8\u5730\u8fc7\u7a0b\u4e2d\u6211\u4eec\u4f1a\u53d1\u73b0\u5176\u5b9e \\([l,r]\\) \u533a\u95f4\u7684\u548c\u4f1a\u589e\u52a0 \\(a[r+1] - a[l]\\) \uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u4e00\u5c42\u5faa\u73af\u904d\u5386\u5c31\u597d\u4e86\uff0c\u4e8e\u662f\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ #include <iostream> #include <algorithm> #include <cstdio> using namespace std ; const int N = 1e5 + 10 ; int a [ N ], n , k ; int main () { cin >> n >> k ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; int l = 1 , r = 1 ; int res = 0 ; while ( r <= k ) res += a [ r ++ ]; int ans = res ; for (; r <= n ; ++ r , l ++ ){ res += a [ r ] - a [ l ]; ans = max ( ans , res ); } cout << ans << endl ; return 0 ; }","title":"1.3.2 \u601d\u8def"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#14","text":"","title":"1.4 \u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#141","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n \\ (n<=10^7)\\) \u7684\u5b57\u7b26\u4e32 \uff0c\u6c42\u4e00\u4e2a\u6700\u957f\u7684\u6ee1\u8db3\u6240\u6709\u5b57\u7b26\u4e0d\u91cd\u590d\u7684\u5b50\u4e32","title":"1.4.1 \u95ee\u9898\u5f15\u51fa"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#141_1","text":"\u6211\u4eec\u679a\u4e3e\u5b57\u7b26\u4e32\u7684\u5de6\u533a\u95f4\uff0c\u7136\u540e\u518d\u5f00\u4e00\u5c42\u5faa\u73af\u679a\u4e3e\u4ece\u5f53\u524d\u70b9\u5f00\u59cb\u7684\u5b57\u7b26\u4e32\uff0c\u53d1\u73b0\u6709\u91cd\u590d\u7684\u5b57\u7b26\uff08\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u5f00\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(300\\) \u7684\u6570\u7ec4\u6216\u8005\u76f4\u63a5\u7528map\u6765\u7edf\u8ba1\uff09\u5c31\u505c\u6b62\u5f53\u524d\u679a\u4e3e\uff0c\u5426\u5219\u5c31\u4e0d\u65ad\u66f4\u65b0\u957f\u5ea6\u503c \\(ans\\) \uff0c\u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ #include <iostream> #include <algorithm> #include <map> using namespace std ; #define ll long long const int N = 1e5 + 10 ; int a [ N ], n , k ; int main () { string s ; cin >> n >> s ; map < char , bool > vis ; int ans = 0 ; for ( int i = 0 ; i < n ; ++ i ) { int res = 0 ; vis . clear (); for ( int j = i ; j < n ; ++ j ) if ( vis [ s [ j ]]) break ; else vis [ s [ j ]] = true , res ++ ; ans = max ( ans , res ); } cout << ans << endl ; return 0 ; } \u90a3\u4e48\u6211\u4eec\u8fd9\u4e2a\u505a\u6cd5\u7684\u7684\u590d\u6742\u5ea6\u5c31\u4e3a \\(O(N^2)\\) \u663e\u7136\u5f53 \\(n\\) \u7684\u8303\u56f4\u5c0f\u4e8e \\(10^4\\) \u7684\u65f6\u5019\u770b\u8d77\u6765\u662f\u53ef\u884c\u7684\uff0c\u4f46\u662f\u6211\u4eec\u73b0\u5728\u7684\u590d\u6742\u5ea6\u9ad8\u8fbe \\(10^7\\) \uff01\uff0c\u4e8e\u662f\u6211\u4eec\u5f97\u60f3\u4e00\u4e0b\u4f18\u5316","title":"1.4.1 \u6734\u7d20\u60f3\u6cd5"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#142","text":"\u6211\u4eec\u601d\u8003\u4e0a\u9762\u7684\u505a\u6cd5\uff0c\u6bcf\u6b21\u9047\u5230\u4e00\u4e2a\u91cd\u590d\u5b57\u7b26\u4e32\u6211\u4eec\u7684 \\(j\\) \u6307\u9488\u5c31\u56de\u6eaf\u4e86\uff0c\u4f46\u662f\u5176\u5b9e\u6ca1\u5fc5\u8981\u56de\u6eaf\uff0c\u56e0\u4e3a\u6b64\u65f6\u7684\u957f\u5ea6\u662f\u4ece\u4e0a\u4e00\u4e2a \\(s[j]\\) \u91cd\u590d\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u6700\u957f\u8ddd\u79bb\u4e86\uff0c\u4f8b\u5982\u6211\u4eec\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32 afbcdbekpm \u5f53\u6211\u4eec\u7684i\u6307\u9488\u6307\u5411\u7684 a \u4e14j\u6307\u9488\u6307\u5411\u4e86\u7b2c\u4e8c\u4e2a b \u7684\u65f6\u5019\u6211\u4eec\u4f1a\u53d1\u73b0i\u6307\u9488\u5728\u7b2c\u4e00\u4e2a \\(b\\) \u4e4b\u524d\uff08\u5305\u542bb\uff09\u7684\u4f4d\u7f6e\u7684\u4e00\u4e2a\u4e0d\u91cd\u590d\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u90fd\u662f\u8981\u4f4e\u4e8e\u6211\u4eec\u73b0\u5728\u6c42\u5f97\u7684 \\([1,5]\\) \u7684\u957f\u5ea6\u7684\uff0c\u56e0\u4e3a\u90fd\u4f1a\u5728\u7b2c\u4e8c\u4e2a b \u505c\u4e0b\u6765\uff0c\u4f46\u662f\u5de6\u8fb9\u7684\u533a\u95f4\u5374\u7f29\u5c0f\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4e0d\u65ad\u79fb\u52a8 \\(i\\) \u6307\u9488\u5e76\u5230\u8fbe\u7b2c\u4e00\u4e2a b \u7684\u4f4d\u7f6e\u5373\u53ef\uff0c \\(j\\) \u6307\u9488\u5c31\u4e0d\u7528\u56de\u6eaf\u4e86\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e24\u4e2a\u6307\u9488\u90fd\u662f\u6700\u591a\u8d70 \\(O(N)\\) \u6b65\uff0c\u90a3\u4e48\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f \\(O(N)\\) ,\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ #include <iostream> #include <algorithm> #include <map> using namespace std ; #define ll long long const int N = 1e5 + 10 ; int n , k ; int main () { string s ; cin >> n >> s ; map < char , bool > vis ; int ans = 0 ; int l = 0 , r = 0 ; for (; l < n ; vis [ s [ l ++ ]] = false ) { while ( r < n && vis [ s [ r ]] == false ) vis [ s [ r ++ ]] = true ; ans = max ( ans , r - l ); } cout << ans << endl ; return 0 ; }","title":"1.4.2 \u53cc\u6307\u9488\u505a\u6cd5"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#15","text":"","title":"1.5 \u5b50\u5e8f\u5217\u5339\u914d"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#151","text":"\u9009\u81ea leetcode 524. \u901a\u8fc7\u5220\u9664\u5b57\u6bcd\u5339\u914d\u5230\u5b57\u5178\u91cc\u6700\u957f\u5355\u8bcd \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(s\\) \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 \\(dictionary\\) \u4f5c\u4e3a\u5b57\u5178\uff0c\u627e\u51fa\u5e76\u8fd4\u56de\u5b57\u5178\u4e2d\u6700\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u8be5\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7\u5220\u9664 \\(s\\) \u4e2d\u7684\u67d0\u4e9b\u5b57\u7b26\u5f97\u5230\u3002\u5982\u679c\u7b54\u6848\u4e0d\u6b62\u4e00\u4e2a\uff0c\u8fd4\u56de\u957f\u5ea6\u6700\u957f\u4e14\u5b57\u6bcd\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u7b54\u6848\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002 \u6837\u4f8b\uff1a \u8f93\u5165: s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"] \u8f93\u51fa\uff1a\"apple\"","title":"1.5.1 \u95ee\u9898\u5f15\u51fa"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#152","text":"\u6211\u4eec\u5206\u6790\u8fd9\u4e2a\u95ee\u9898\u5176\u5b9e\u662f\u5bfb\u627e \\(dictionary\\) \u4e2d\u7684\u6700\u957f\u7684\u80fd\u6210\u4e3a \\(s\\) \u7684\u5b50\u5e8f\u5217\u7684 \\(t\\) \u7684\u957f\u5ea6\uff0c\u4e8e\u662f\u6211\u4eec\u5c06\u4e24\u4e2a\u6307\u9488\u4e00\u4e2a \\(i\\) \u653e\u5728 \\(s\\) \u5f00\u59cb\u4f4d\u7f6e\uff0c\u4e00\u4e2a \\(j\\) \u653e\u5728 \\(t\\) \u5f00\u59cb\u4f4d\u7f6e\uff0c\u5982\u679c \\(s[i]=t[j]\\) \u8bf4\u660e \\(t\\) \u7684\u7b2c \\(j\\) \u4f4d\u5df2\u7ecf\u5728 \\(s\\) \u4e2d\u627e\u5230\u4e86\u7b2c\u4e00\u4e2a\u5bf9\u5e94\uff0c\u53ef\u4ee5\u8fdb\u800c\u68c0\u6d4b\u540e\u9762\u7684\u90e8\u5206\u4e86\uff0c\u90a3\u4e48 \\(i\\) \u548c \\(j\\) \u540c\u65f6\u52a0\u4e00\u3002\u5982\u679c\u4e0a\u8ff0\u7b49\u5f0f\u4e0d\u6210\u7acb\uff0c\u5219 \\(t\\) \u7684\u7b2c \\(j\\) \u4f4d\u4ecd\u7136\u6ca1\u6709\u88ab\u5339\u914d\u4e0a\uff0c\u6240\u4ee5\u53ea\u7ed9 \\(i\\) \u52a0\u4e00\uff0c\u5728 \\(s\\) \u7684\u540e\u9762\u90e8\u5206\u518d\u7ee7\u7eed\u5bfb\u627e\u3002\u6700\u540e\uff0c\u5982\u679c \\(j\\) \u5df2\u7ecf\u79fb\u5230\u4e86\u672b\u5c3e\uff0c\u8bf4\u660e\u6574\u4e2a\u5b57\u7b26\u4e32\u90fd\u53ef\u4ee5\u88ab\u5339\u914d\u4e0a\uff0c\u4e5f\u5c31\u662f \u662f \\(s\\) \u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u5426\u5219\u4e0d\u662f\u3002\u7136\u540e\u6211\u4eec\u6839\u636e\u662f\u5426\u5339\u914d\u6210\u529f\u6765\u5224\u65ad\u5f53\u524d\u5b57\u7b26\u4e32\u662f\u5426\u80fd\u66f4\u65b0\u6211\u4eec\u7684\u7b54\u6848\uff0c\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ string findLongestWord ( string s , vector < string >& dictionary ) { string ans = \"\" ; int l = s . size (), ans_len = 0 ; for ( auto t : dictionary ){ int n = t . size (); int i = 0 , j = 0 ; while ( i < l && j < n ) if ( s [ i ] == t [ j ]) ++ i , ++ j ; else ++ i ; if ( j >= n ){ if ( n == ans_len ) ans = min ( ans , t ); else if ( n > ans_len ) ans = t , ans_len = n ; } } return ans ; }","title":"1.5.2 \u601d\u8def"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#_3","text":"","title":"\u4e8c\u3001\u78b0\u649e\u6307\u9488"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#21","text":"\u8fd9\u662f\u6700\u7b80\u5355\u7684\u78b0\u649e\u6307\u9488\u4e86\uff0c\u6211\u4eec\u5b9a\u4e49\u5de6\u6307\u9488 \\(l\\) \u5e76\u6307\u5411\u6570\u7ec4\u7684\u5de6\u533a\u95f4\uff0c\u7136\u540e\u5b9a\u4e49\u53f3\u6307\u9488 \\(r\\) \u5e76\u6307\u5411\u6570\u7ec4\u7684\u53f3\u533a\u95f4\uff0c\u7136\u540e\u4e0d\u65ad\u5411\u4e2d\u95f4\u79fb\u52a8\uff0c\u76f4\u5230\u76f8\u649e\u5c31\u505c\u6b62\uff0c\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ void reverseStr ( char * S ){ int r = strlen ( S ) -1 , l = 0 ; while ( l < r ) swap ( S [ l ++ ], S [ r -- ]); }","title":"2.1 \u53cd\u8f6c\u6570\u7ec4"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#22-n","text":"","title":"2.2 N\u6570\u548c\u95ee\u9898"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#221","text":"\u5f15\u81ea leetcode 167. \u4e24\u6570\u4e4b\u548c II - \u8f93\u5165\u6709\u5e8f\u6570\u7ec4 \u7ed9\u5b9a\u4e00\u4e2a\u5df2\u6309\u7167 \u5347\u5e8f\u6392\u5217 \u7684\u6574\u6570\u6570\u7ec4 \\(numbers\\) \uff0c\u8bf7\u4f60\u4ece\u6570\u7ec4\u4e2d\u627e\u51fa\u4e24\u4e2a\u4e0d\u540c\u4f4d\u7f6e\u7684\u6570\u6ee1\u8db3\u76f8\u52a0\u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570 \\(target\\) \u5e76\u8f93\u51fa\u4e24\u6570\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff08\u4ece \\(1\\) \u5f00\u59cb\u8ba1\u7b97\uff09\u3002","title":"2.2.1 \u95ee\u9898\u5f15\u51fa"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#222","text":"\u6709\u4e00\u4e2a\u5f88\u5173\u952e\u7684\u4fe1\u606f \u5347\u5e8f\u6392\u5217 \uff0c\u90a3\u4e48\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u679a\u4e3e\u7b2c\u4e00\u4e2a\u70b9\u7684\u6570\uff0c\u7136\u540e\u4e8c\u5206\uff0c\u867d\u7136\u4e8c\u5206\u4e5f\u662f\u6bd4\u8f83\u8fc5\u901f\u4e14\u65b9\u4fbf\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f\u4f1a\u591a\u4e2a \\(log_2n\\) \uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u8981\u7528\u53cc\u6307\u9488\u600e\u4e48\u6765\u89e3\u51b3\u5462\uff0c\u65e2\u7136\u8981\u627e\u5230\u4e24\u4e2a\u6570\uff0c\u4e14\u8fd9\u4e24\u4e2a\u6570\u4e0d\u80fd\u5728\u540c\u4e00\u4f4d\u7f6e\uff0c\u90a3\u5176\u4f4d\u7f6e\u4e00\u5b9a\u662f\u4e00\u5de6\u4e00\u53f3\u3002\u7531\u4e8e\u4e24\u6570\u4e4b\u548c\u56fa\u5b9a\uff0c\u90a3\u4e48\u4e24\u6570\u4e4b\u4e2d\u7684\u5c0f\u6570\u8d8a\u5927\uff0c\u5927\u6570\u8d8a\u5c0f\u3002\u8003\u8651\u5230\u8fd9\u4e9b\u6027\u8d28\uff0c\u90a3\u6211\u4eec\u4e0d\u59a8\u4ece\u4e24\u8fb9\u63a5\u8fd1\u5b83\u4eec\u3002 \u6211\u4eec\u9996\u5148\u5047\u8bbe\u7b54\u6848\u5c31\u662f\u7531 \\(a[1]\\) \u548c \\(a[n]\\) \u6784\u6210\u7684\uff0c\u5982\u679c\u8bf4 \\(a[1] + a[n] > target\\) \u90a3\u4e48\u6211\u4eec\u8981\u60f3\u5c06\u4e24\u6570\u548c\u53d8\u5c0f\uff0c\u800c\u5bf9\u4e8e\u5de6\u8fb9\u7684\u6307\u9488\u6765\u8bf4\u6765\u8bf4\u5df2\u7ecf\u4e0d\u80fd\u53d8\u5f97\u66f4\u5c0f\u4e86\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5728\u6574\u4e2a\u6570\u7ec4\u7684\u6700\u5de6\u8fb9\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u5c06\u53f3\u8fb9\u7684\u6307\u9488\u5f80\u5de6\u79fb\u52a8 \u5982\u679c\u6b64\u65f6\u53d1\u73b0 \\(a[1] + a[n] < target\\) \u90a3\u4e48\u6211\u4eec\u5c31\u8981\u5c06\u5de6\u8fb9\u7684\u6307\u9488\u53f3\u79fb,\u56e0\u4e3a\u53f3\u8fb9\u7684\u6307\u9488\u5df2\u7ecf\u4e0d\u80fd\u53d8\u5f97\u66f4\u5927\u4e86\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5728\u6574\u4e2a\u6570\u7ec4\u7684\u6700\u53f3\u8fb9\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u5c06\u5de6\u8fb9\u7684\u6307\u9488\u5f80\u53f3\u79fb\u52a8 \u63a8\u5e7f\u5230\u4e00\u822c\u60c5\u5f62\uff0c\u5982\u679c\u6b64\u65f6\u6211\u4eec\u4e24\u4e2a\u6307\u9488\u5206\u522b\u6307\u5728 \\(l,r\\) \u4e0a\uff0c\u4e14 \\(l < r\\) , \u5982\u679c \\(a[l] + a[r] > target\\) \uff0c\u5c31\u5c06 \\(r\\) \u51cf\u4e00\uff0c\u5982\u679c \\(a[l] + a[r] < target\\) \uff0c\u5c31\u5c06 \\(l\\) \u52a0\u4e00\u3002\u8fd9\u6837 \\(l\\) \u6307\u9488\u4e0d\u65ad\u53f3\u79fb\uff0c \\(r\\) \u6307\u9488\u4e0d\u65ad\u5de6\u79fb\uff0c\u6700\u540e\u4e24\u8005\u5404\u903c\u8fd1\u5230\u4e00\u4e2a\u7b54\u6848\uff0c\u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684\u4e24\u4e2a\u4f4d\u7f6e \u4e8e\u662f\u6211\u4eec\u80fd\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ vector < int > twoSum ( vector < int >& numbers , int target ) { int l = 0 , r = numbers . size () -1 ; while ( l < r ) if ( numbers [ l ] + numbers [ r ] > target ) r -- ; else if ( numbers [ l ] + numbers [ r ] == target ) break ; else l ++ ; return ( vector < int > ){ l + 1 , r + 1 }; }","title":"2.2.2 \u5206\u6790"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#223","text":"\u6211\u4eec\u5728\u5feb\u901f\u6392\u5e8f\u7684\u5212\u5206\u754c\u9650\u7684\u65f6\u5019\u5176\u5b9e\u5c31\u7528\u5230\u4e86\u5bf9\u78b0\u6307\u9488\uff0c\u5047\u8bbe\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u754c\u9650\u4f4d\u7f6e \\(x\\) \uff0c\u7136\u540e\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u7ec4\u6240\u6709\u5927\u4e8e \\(a[x]\\) \u7684\u6570\u653e\u5230 \\(x\\) \u7684\u53f3\u8fb9\uff0c\u7136\u540e\u5c06\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e \\(a[x]\\) \u7684\u6570\u653e\u5728 \\(x\\) \u4f4d\u7f6e\u7684\u5de6\u8fb9\uff0c\u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\u5206\u522b\u6307\u5411\u6700\u5de6\u8fb9\u548c\u6700\u53f3\u8fb9\uff0c\u7136\u540e\u4e24\u4e2a\u6307\u9488\u90fd\u5f80\u4e2d\u95f4\u8d70\uff0c\u7136\u540e\u5de6\u8fb9\u9047\u5230\u5927\u4e8e\u6211\u4eec\u9009\u4e2d\u7684x\u503c\u5c31\u505c\u4e0b\u6765\uff0c\u53f3\u8fb9\u5c31\u9047\u5230\u5c0f\u4e8e\u6211\u4eec\u9009\u62e9\u7684 \\(x\\) \u503c\u5c31\u505c\u4e0b\u6765\uff0c\u7136\u540e\u4ea4\u6362\u4e24\u6570\uff0c\u7136\u540e\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u4e24\u4e2a\u6307\u9488\u76f8\u9047\u5c31\u5b8c\u6210\u4e86\u6211\u4eec\u7684\u5212\u5206\uff0c\u5373 \\(x\\) \u5de6\u8fb9\u7684\u90fd\u5c0f\u4e8e\u7b49\u4e8e \\(a[x]\\) \uff0c \\(x\\) \u53f3\u8fb9\u7684\u90fd\u5927\u4e8e\u7b49\u4e8e \\(a[x]\\) \u4e8e\u662f\u6211\u4eec\u80fd\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a\uff08\u622a\u53d6\u4ee3\u7801\u6bb5\uff09 C++ int x = a [ l + r >> 1 ], i = l -1 , j = r + 1 ; while ( i < j ) { while ( a [ ++ i ] < x ); while ( a [ -- j ] > x ); if ( i < j ) swap ( a [ i ], a [ j ]); }","title":"2.2.3 \u5feb\u6392\u4e2d\u7684\u5bf9\u78b0\u6307\u9488"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#_4","text":"\u5feb\u6162\u6307\u9488\u662f\u6307\u7684\uff0c\u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488 \\(low\\) \u548c \\(fast\\) \uff0c\u4e24\u8005\u90fd\u5f80\u540c\u4e00\u4e2a\u65b9\u5411\u524d\u8fdb\uff0c\u4f46\u662f\u4e24\u4e2a\u6307\u9488\u79fb\u52a8\u7684\u901f\u5ea6\u4e0d\u540c\uff0c\u6216\u8005\u76f8\u540c\u7684\u901f\u5ea6\uff0c\u4f46\u662f\u79fb\u52a8\u7684\u5951\u673a\u4e0d\u540c\uff0c\u8fd9\u79cd\u5f62\u6210\u4e00\u5feb\u4e00\u6162\u7684\u5f62\u5f0f\u5c31\u662f\u6211\u4eec\u7684\u5feb\u6162\u6307\u9488\u62c9","title":"\u4e09\u3001\u5feb\u6162\u6307\u9488"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#31","text":"\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\u5206\u522b\u4e3a \u6162\u6307\u9488 \\(low\\) \u548c\u5feb\u6307\u9488 \\(fast\\) \u90fd\u4ece\u5934\u8282\u70b9 head \u51fa\u53d1\uff0c\u6bcf\u8f6e\u8fed\u4ee3\u79fb\u52a8\u4e2d\uff0c\u5feb\u6307\u9488\u5411\u524d\u79fb\u52a8 \u4e24\u4e2a\u8282\u70b9 \uff0c\u6162\u6307\u9488\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\uff0c\u6700\u7ec8\u5f53\u5feb\u6307\u9488\u5230\u8fbe\u7ec8\u70b9\u7684\u65f6\u5019\uff0c\u6162\u6307\u9488\u521a\u597d\u5728\u4e2d\u95f4\u7684\u8282\u70b9\u3002 \u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7684\u8282\u70b9\u4e2a\u6570\u4e0e\u4e2d\u95f4\u8282\u70b9\u7684\u5173\u7cfb\uff08\u5934\u8282\u70b9\u7b97\u7b2c\u4e00\u4e2a\u8282\u70b9\uff09\uff0c\u5982\u679c\u662f\u5947\u6570\u4e2a\u8282\u70b9\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u7684 \\(low\\) \u6307\u9488\u521a\u597d\u8d70\u5230\u4e2d\u95f4\uff0c\u4f46\u662f\u5982\u679c\u662f\u5076\u6570\u4e2a\u8282\u70b9\u7684\u8bdd\uff0c\u6211\u4eec\u7684\u8282\u70b9\u4f1a\u8d70\u5230\u53f3\u8fb9\u53bb\uff0c\u8fd9\u91cc\u6839\u636e\u9898\u76ee\u7684\u9700\u6c42\u8f93\u51fa\u5bf9\u5e94\u7684\u7b54\u6848\u5c31\u597d\u4e86\uff0c\u6bd4\u5982\u8bf4\u5982\u679c\u6211\u4eec\u60f3\u8d70\u5230\u5de6\u8fb9\u90a3\u4e00\u4e2a\u90a3\u4e48\u6211\u4eec\u8d70 \\(fast\\) \u6307\u9488\u5982\u679c\u53d1\u73b0\u4e0d\u80fd\u79fb\u52a8\u4e24\u6b65\uff0c \\(low\\) \u6307\u9488\u5c31\u4e0d\u79fb\u52a8\u4e86\uff0c\u4e0b\u9762\u7ed9\u51fa\u4e24\u79cd\u573a\u666f\u7684\u56fe\u89e3\uff1a \u7531\u4e8e\u4ee3\u7801\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u8bf7\u8bfb\u8005\u81ea\u5df1\u4e66\u5199\u5566","title":"3.1 \u8ba1\u7b97\u94fe\u8868\u7684\u4e2d\u70b9"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#32","text":"","title":"3.2 \u5224\u65ad\u94fe\u8868\u662f\u5426\u6709\u73af"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#321","text":"\u9009\u81ea\uff1a leetcode.141 \u73af\u5f62\u94fe\u8868 \u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 head \uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002 \u5982\u679c\u94fe\u8868\u4e2d\u6709\u67d0\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fde\u7eed\u8ddf\u8e2a next \u6307\u9488\u518d\u6b21\u5230\u8fbe\uff0c\u5219\u94fe\u8868\u4e2d\u5b58\u5728\u73af\u3002 \u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u8bc4\u6d4b\u7cfb\u7edf\u5185\u90e8\u4f7f\u7528\u6574\u6570 pos \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002\u6ce8\u610f\uff1apos \u4e0d\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012 \u3002\u4ec5\u4ec5\u662f\u4e3a\u4e86\u6807\u8bc6\u94fe\u8868\u7684\u5b9e\u9645\u60c5\u51b5\u3002 \u5982\u679c\u94fe\u8868\u4e2d\u5b58\u5728\u73af \uff0c\u5219\u8fd4\u56de true \u3002 \u5426\u5219\uff0c\u8fd4\u56de false \u3002","title":"3.2.1 \u95ee\u9898\u5f15\u51fa"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#322","text":"\u5982\u679c\u8bf4\u94fe\u8868\u4e2d\u6709\u73af\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u5feb\u6162\u6307\u9488 \\(fast\\) \u548c \\(low\\) \u5982\u679c\u90fd\u8fdb\u5165\u4e86\u8fd9\u4e2a\u73af\u4e2d\uff0c\u90a3\u4e48\u5b83\u4eec\u5c31\u4f1a\u5728\u91cc\u9762\u8f6c\u5708\uff0c\u56e0\u4e3a\u6211\u4eec\u5b9a\u4e49\u7684 \\(fast\\) \u6bcf\u6b21\u79fb\u52a8\u4e24\u6b65\uff0c \\(low\\) \u6bcf\u6b21\u79fb\u52a8\u4e00\u6b65\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u79fb\u52a8 \\(fast\\) \u6307\u9488\u90fd\u4f1a\u6bd4 \\(low\\) \u6307\u9488\u591a\u79fb\u52a8\u4e00\u6b65\uff0c\u90a3\u4e48\u8bf4\u660e\u8fd9\u4e24\u4e2a\u6307\u9488\u8fdf\u65e9\u4f1a\u5728\u73af\u91cc\u9762\u76f8\u9047\uff08\u5982\u679c\u5b58\u5728\u73af\u7684\u8bdd\uff09\u6211\u4eec\u5c31\u8fd4\u56de true \u5373\u53ef\uff0c\u5426\u5219\u6211\u4eec\u7684 \\(fast\\) \u6307\u9488\u9047\u5230\u4e86\u4e00\u4e2a \\(NULL\\) \u8282\u70b9\u5c31\u76f4\u63a5\u8fd4\u56de false \u5373\u53ef\u3002\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ bool hasCycle ( ListNode * head ) { ListNode * fast , * low ; fast = low = head ; while ( fast != NULL && fast -> next != NULL ){ fast = fast -> next -> next ; low = low -> next ; if ( fast == low ) return true ; } return false ; } Java boolean hasCycle ( ListNode head ) { ListNode fast , slow ; fast = slow = head ; while ( fast != null && fast . next != null ) { fast = fast . next . next ; slow = slow . next ; if ( fast == slow ) return true ; } return false ; }","title":"3.2.2 \u601d\u8def"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#33","text":"","title":"3.3 \u5224\u65ad\u94fe\u8868\u4e2d\u73af\u7684\u8d77\u70b9"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#331","text":"\u9009\u81ea\uff1a leetcode 142. \u73af\u5f62\u94fe\u8868 II \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 head \u8fd4\u56de\u94fe\u8868\u5f00\u59cb\u5165\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002\u5982\u679c\u94fe\u8868\u65e0\u73af\uff0c\u5219\u8fd4\u56de null \u3002 \u5982\u679c\u94fe\u8868\u4e2d\u6709\u67d0\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fde\u7eed\u8ddf\u8e2a next \u6307\u9488\u518d\u6b21\u5230\u8fbe\uff0c\u5219\u94fe\u8868\u4e2d\u5b58\u5728\u73af\u3002 \u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u8bc4\u6d4b\u7cfb\u7edf\u5185\u90e8\u4f7f\u7528\u6574\u6570 pos \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e \uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09 \u3002\u5982\u679c pos \u662f -1 \uff0c\u5219\u5728\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002\u6ce8\u610f\uff1a pos \u4e0d\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u6807\u8bc6\u94fe\u8868\u7684\u5b9e\u9645\u60c5\u51b5\u3002 \u4e0d\u5141\u8bb8\u4fee\u6539 \u94fe\u8868\u3002","title":"3.3.1 \u95ee\u9898\u5f15\u51fa"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#332","text":"\u719f\u6089 STL \u7684\u540c\u5b66\u4f30\u8ba1\u4e00\u77ac\u95f4\u5c31\u60f3\u5230\u4e86\u7528\u4e00\u4e2a map<ListNode*,bool> \u6765\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u8282\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5982\u679c\u6211\u4eec\u5bf9\u4e00\u4e2a\u8282\u70b9\u8bbf\u95ee\u4e86 \u7b2c\u4e8c\u6b21 \uff0c\u8bf4\u660e\u8fd9\u4e2a\u70b9\u5c31\u662f\u6211\u4eec\u73af\u7684\u8d77\u70b9\uff0c\u4e8e\u662f\u6211\u4eec\u80fd\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ ListNode * detectCycle ( ListNode * head ) { map < ListNode * , bool > vis ; while ( head != NULL ){ if ( vis [ head ]) return head ; vis [ head ] = true ; head = head -> next ; } return NULL ; } \u7b80\u77ed\u6709\u529b\uff0c\u4f46\u662f\u8fd9\u4e0d\u662f\u6211\u4eec\u4eca\u5929\u8981\u8bb2\u7684\uff0c\u6211\u4eec\u6709\u4e00\u79cd\u66f4\u52a0 \"\u4f18\u96c5\" \u7684\u505a\u6cd5\uff0c\u5373\u53cc\u6307\u9488: \u6211\u4eec\u5047\u8bbe\u7b2c\u4e00\u6b21\u76f8\u9047\u65f6\u6162\u6307\u9488 \\(low\\) \u8d70\u4e86 \\(k\\) \u6b65\u90a3\u4e48\u5feb\u6307\u9488 \\(fast\\) \u4e00\u5b9a\u8d70\u4e86 \\(2k\\) \u6b65\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bd4 \\(low\\) \u591a\u8d70\u4e86 \\(k\\) \u6b65\uff08\u4e5f\u5c31\u662f\u73af\u7684\u957f\u5ea6\uff09\u3002 \u8bbe\u76f8\u9047\u70b9\u8ddd\u73af\u7684\u8d77\u70b9\u7684\u8ddd\u79bb\u4e3a \\(m\\) \uff0c\u90a3\u4e48\u73af\u7684\u8d77\u70b9\u8ddd\u5934\u7ed3\u70b9 \\(head\\) \u7684\u8ddd\u79bb\u4e3a \\(k - m\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u4ece \\(head\\) \u524d\u8fdb \\(k - m\\) \u6b65\u5c31\u80fd\u5230\u8fbe\u73af\u8d77\u70b9\u3002\u5de7\u7684\u662f\uff0c\u5982\u679c\u4ece\u76f8\u9047\u70b9\u7ee7\u7eed\u524d\u8fdb \\(k - m\\) \u6b65\uff0c\u4e5f\u6070\u597d\u5230\u8fbe\u73af\u8d77\u70b9\u3002 \u6240\u4ee5\uff0c\u53ea\u8981\u6211\u4eec\u628a\u5feb\u6162\u6307\u9488\u4e2d\u7684\u4efb\u4e00\u4e2a\u91cd\u65b0\u6307\u5411 head\uff0c\u7136\u540e\u4e24\u4e2a\u6307\u9488\u540c\u901f\u524d\u8fdb\uff0ck - m \u6b65\u540e\u5c31\u4f1a\u76f8\u9047\uff0c\u76f8\u9047\u4e4b\u5904\u5c31\u662f\u73af\u7684\u8d77\u70b9\u4e86\u3002 \u4e8e\u662f\u6211\u4eec\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ ListNode * detectCycle ( ListNode * head ) { ListNode * fast , * low ; fast = low = head ; while ( fast != NULL && fast -> next != NULL ){ fast = fast -> next -> next ; low = low -> next ; if ( fast == low ) break ; } if ( fast == NULL || fast -> next == NULL ) return NULL ; fast = head ; while ( fast != low ) fast = fast -> next , low = low -> next ; return low ; }","title":"3.3.2 \u601d\u8def"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#34","text":"\u4e0a\u9762\u4e5f\u5df2\u7ecf\u63d0\u8fc7\u4e86,\u5982\u679c\u5b58\u5728\u73af\u7684\u8bdd\uff0c\u6211\u4eec\u5728\u4e24\u4e2a\u6307\u9488\u76f8\u9047\u540e\uff0c\u505c\u6b62\u4e24\u4e2a\u6307\u9488\u7684\u5176\u4e2d\u4e00\u4e2a\uff0c\u7136\u540e\u8ba9\u53e6\u4e00\u4e2a\u7ee7\u7eed\u8d70\uff0c\u76f4\u5230\u518d\u6b21\u76f8\u9047\uff0c\u90a3\u4e48\u8d70\u7684\u8fd9\u4e2a\u6307\u9488\u7684\u8d70\u8fc7\u7684\u8def\u5f84\u957f\u5ea6\u5c31\u662f\u94fe\u8868\u4e2d\u73af\u7684\u957f\u5ea6\uff0c\u4e0d\u96be\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ ListNode * GetCycleLen ( ListNode * head ) { ListNode * fast , * low ; fast = low = head ; while ( fast != NULL && fast -> next != NULL ){ fast = fast -> next -> next ; low = low -> next ; if ( fast == low ) break ; } if ( fast == NULL || fast -> next == NULL ) return 0 ; int ans = 0 ; while ( fast != low ) low = low -> next , ans ++ ; return ans ; }","title":"3.4 \u6c42\u94fe\u8868\u4e2d\u73af\u7684\u957f\u5ea6"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#35-k","text":"","title":"3.5 \u6c42\u94fe\u8868\u5012\u6570\u7b2ck\u4e2a\u5143\u7d20"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#351","text":"\u9009\u81ea\uff1a leetcode \u5251\u6307 Offer 22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2c \\(k\\) \u4e2a\u8282\u70b9\u3002\u4e3a\u4e86\u7b26\u5408\u5927\u591a\u6570\u4eba\u7684\u4e60\u60ef\uff0c\u672c\u9898\u4ece \\(1\\) \u5f00\u59cb\u8ba1\u6570\uff0c\u5373\u94fe\u8868\u7684\u5c3e\u8282\u70b9\u662f\u5012\u6570\u7b2c \\(1\\) \u4e2a\u8282\u70b9\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u94fe\u8868\u6709 \\(6\\) \u4e2a\u8282\u70b9\uff0c\u4ece\u5934\u8282\u70b9\u5f00\u59cb\uff0c\u5b83\u4eec\u7684\u503c\u4f9d\u6b21\u662f \\(1\u30012\u30013\u30014\u30015\u30016\\) \u3002\u8fd9\u4e2a\u94fe\u8868\u7684\u5012\u6570\u7b2c \\(3\\) \u4e2a\u8282\u70b9\u662f\u503c\u4e3a \\(4\\) \u7684\u8282\u70b9\u3002 \u6211\u4eec\u53ea\u9700\u8981\u8ba9\u5feb\u6307\u9488 \\(fast\\) \u5148\u79fb\u52a8k\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u6211\u4eec\u540c\u65f6\u540c\u6b65\u79fb\u52a8\u5feb\u6162\u6307\u9488\uff0c\u76f4\u5230\u5feb\u6307\u9488\u5230\u8fbe NULL \u6b64\u65f6\u7684\u6162\u6307\u9488 \\(low\\) \u6307\u5411\u7684\u4f4d\u7f6e\u5c31\u662f\u94fe\u8868\u5012\u6570\u7b2ck\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u4e8e\u662f\u6211\u4eec\u4e0d\u96be\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a C++ ListNode * getKthFromEnd ( ListNode * head , int k ) { ListNode * fast , * low ; fast = low = head ; while ( k -- ) fast = fast -> next ; while ( fast != NULL ) fast = fast -> next , low = low -> next ; return low ; }","title":"3.5.1 \u95ee\u9898\u5f15\u5165"},{"location":"%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/#_5","text":"\u5bf9\u4e8e\u53cc\u6307\u9488\u6765\u8bf4\u5176\u5b9e\u6bd4\u8f83\u5bbd\u6cdb\uff0c\u800c\u4e14\u975e\u5e38\u7075\u6d3b\uff0c\u9700\u8981\u8bfb\u8005\u591a\u5199\u624d\u80fd\u638c\u63e1\uff0c\u76ee\u524d\u5c31\u5148\u4ecb\u7ecd\u8fd9\u4e9b\u5185\u5bb9\u5427\uff0c\u5176\u5b9e\u5f00\u59cb\u6211\u53ea\u662f\u60f3\u4ecb\u7ecd\u4e00\u4e0b\u5173\u4e8e\u6ed1\u52a8\u7a97\u53e3\u90e8\u5206\u7684\u53cc\u6307\u9488\uff0c\u5728\u67e5\u9605\u7f51\u4e0a\u4e00\u4e9b\u8d44\u6599\u540e\uff0c\u6ca1\u60f3\u5230\u8d8a\u5199\u8d8a\u591a\uff0c\u5982\u679c\u9047\u5230\u4e00\u4e9b\u65b0\u7684\u6280\u5de7\u6211\u4f1a\u6301\u7eed\u66f4\u65b0\u7684\uff0c\u4e0b\u9762\u5c31\u662f\u8bad\u7ec3\u9898\u5355\u73af\u8282\u4e86\uff1a \u9898\u76ee \u94fe\u63a5 \u9898\u89e3 Subsequence http://poj.org/problem?id=3061 \u89c1\u4e0a\u9762 \u4e58\u79ef\u5c0f\u4e8eK\u7684\u5b50\u6570\u7ec4 https://leetcode-cn.com/problems/subarray-product-less-than-k/ Jessica's Reading Problem http://poj.org/problem?id=3320 \u89c1\u4e0a\u9762 \u901a\u8fc7\u5220\u9664\u5b57\u6bcd\u5339\u914d\u5230\u5b57\u5178\u91cc\u6700\u957f\u5355\u8bcd https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/ \u89c1\u4e0a\u9762 \u4e24\u6570\u4e4b\u548c II - \u8f93\u5165\u6709\u5e8f\u6570\u7ec4 https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/ \u89c1\u4e0a\u9762 \u73af\u5f62\u94fe\u8868 https://leetcode-cn.com/problems/linked-list-cycle/ \u89c1\u4e0a\u9762 \u73af\u5f62\u94fe\u8868 II https://leetcode-cn.com/problems/linked-list-cycle-ii/ \u89c1\u4e0a\u9762 \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9 https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/ \u89c1\u4e0a\u9762 \u4e09\u6570\u4e4b\u548c https://leetcode-cn.com/problems/3sum/ \u7edd\u5bf9\u5dee\u4e0d\u8d85\u8fc7\u9650\u5236\u7684\u6700\u957f\u8fde\u7eed\u5b50\u6570\u7ec4 https://leetcode-cn.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/ \u6551\u751f\u8247 https://leetcode-cn.com/problems/boats-to-save-people/ R https://ac.nowcoder.com/acm/contest/23479/A https://acmer.blog.csdn.net/article/details/122837067 \u61d2\u60f0\u7684\u725b https://www.acwing.com/problem/content/1924 https://acmer.blog.csdn.net/article/details/122801496 \u8d1d\u831c\u653e\u6162\u811a\u6b65 https://www.acwing.com/problem/content/description/1936/ https://acmer.blog.csdn.net/article/details/122794773 \u667a\u4e43\u7684\u5bc6\u7801 https://ac.nowcoder.com/acm/contest/23478/I https://acmer.blog.csdn.net/article/details/122790920","title":"\u540e\u8a00"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/","text":"KMP\u7b97\u6cd5 \u00b6 \u524d\u8a00 \u00b6 \u914d\u5957\u89c6\u9891\uff1a www.bilibili.com/video/BV18f4y1L7Uh KMP\u7b97\u6cd5\uff08\u4e5f\u53eb\u770b\u732b\u7247\u7b97\u6cd5(bushi\uff09\u662fKnuth\u3001Pratt \u548c Morris \u5728 1977 \u5e74\u5171\u540c\u53d1\u5e03\u4e00\u4e2a\u5728\u7ebf\u6027\u65f6\u95f4(O(n+m))\u5b57\u7b26\u4e32\u67e5\u627e\u6216\u5339\u914d\u7b97\u6cd5\uff0c\u5e38\u7528\u4e8e\u5728\u4e00\u4e2a\u6587\u672c\u4e32 S \u5185\u67e5\u627e\u4e00\u4e2a\u6a21\u5f0f\u4e32 P \u7684\u51fa\u73b0\u4f4d\u7f6e\u3002 \u4e00\u3001\u524d\u7f00\u548c\u540e\u7f00 \u00b6 1.1\u524d\u7f00 \u00b6 \u662f\u6307\u7684\u4ece\u4e32\u9996\u5230\u67d0\u4e2a\u4f4d\u7f6ei\u7ed3\u675f\u7684\u4e00\u4e2a\u5b50\u4e32 1.2\u771f\u524d\u7f00 \u00b6 \u662f\u6307\u7684\u662f\u9664\u5f00\u8be5\u4e32\u672c\u8eab\u7684\u524d\u7f00 1.3\u540e\u7f00 \u00b6 \u6307\u4ece\u67d0\u4e2a\u4f4d\u7f6ei\u5f00\u59cb\u5230\u6574\u4e2a\u4e32\u672b\u5c3e\u7ed3\u675f\u7684\u4e00\u4e2a\u5b50\u4e32 1.4\u771f\u540e\u7f00 \u00b6 \u662f\u6307\u7684\u662f\u9664\u5f00\u8be5\u4e32\u672c\u8eab\u7684\u540e\u7f00 \u4e8c\u3001\u524d\u7f00\u51fd\u6570(next) \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n\u7684\u5b57\u7b26\u4e32 S\uff0c\u5176 \u524d\u7f00\u51fd\u6570 \u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4 next\u3002 \u5176\u4e2dnext[i]\u7684\u5b9a\u4e49\u662f\uff1a 1.\u5982\u679c\u5b50\u4e32S[0,\u2026\u2026,i]\u6709\u4e00\u5bf9\u76f8\u7b49\u7684\u771f\u524d\u7f00\u4e0e\u771f\u540e\u7f00\uff1aS[0,\u2026\u2026,k-1]\u548cS[i-(k-1)\u2026\u2026i]\uff0c\u90a3\u4e48next[i]\u5c31\u662f\u8fd9\u4e2a\u76f8\u7b49\u7684\u771f\u524d\u7f00\u7684\u957f\u5ea6(\u6216\u8005\u771f\u540e\u7f00\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u503c\u662f\u76f8\u7b49\u7684)\uff0c\u5373next[i] = k; 2.\u5982\u679c\u4e0d\u6b62\u6709\u4e00\u5bf9\u76f8\u7b49\u7684\uff0c\u90a3\u4e48next[i]\u5c31\u662f\u6700\u957f\u7684\u90a3\u4e2a 3.\u5982\u679c\u6ca1\u6709\u76f8\u7b49\u7684\u90a3\u4e48next[i]\u5c31\u662f0 \u5047\u5b9a\u5b57\u7b26\u4e32S\u4e3a \\(abcabca\\) \u90a3\u4e48next\u6570\u7ec4\u7684\u503c\u4e3a next[i] \u503c next[0] -1 next[1] 0 next[2] 0 next[3] 0 next[4] 1 next[5] 2 next[6] 3 next[7] 4 \u8fd9\u91cc\u5c31\u80fd\u770b\u51fa\u5b57\u7b26\u4e32abcabca\u7684\u524d\u7f00\u51fd\u6570\u6570\u7ec4\u4e3a[-1,0,0,0,1,2,3,4],\u6ce8\u610f\u4e00\u4e0b\u8fd9\u91cc\u7684next[0]\u662f\u7528\u4e8e\u8f85\u52a9\u8ba1\u7b97\u524d\u7f00\u503c\u7684\uff0cnext\u6570\u7ec4\u6c42\u51fa\u7684\u524d\u7f00\u503c\u662f\u6c42\u7684\u957f\u5ea6\u4e3ai\u7684\u5b57\u7b26\u4e32\u7684\u6700\u5927\u771f\u524d\u7f00\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u6700\u5927i-1 \u4e0d\u96be\u53d1\u73b0next\u6570\u7ec4\u7684\u503c\u7684\u589e\u52a0\u662f\u4e00\u6b65\u4e00\u6b65\u7684\uff0c\u4e5f\u5c31\u662f\u76f8\u90bb\u7684\u4e24\u4e2anext\u503c\u7684\u5dee\u503c\u6700\u5927\u4e3a1\uff0c\u4e5f\u5c31\u662f\u8bf4\u5339\u914d\u6210\u529f\u540e\u6211\u4eec\u53ef\u4ee5\u63a5\u7740\u4f7f\u7528\u8fd9\u4e2a\u6570\u636e\uff0c\u5931\u8d25\u5219\u901a\u8fc7\u6211\u4eec\u7684next\u6570\u7ec4\u8fdb\u884c\u56de\u6eaf\uff0c\u56e0\u4e3a\u524d\u540e\u7f00\u76f8\u540c\uff0c\u6211\u4eec\u4e0d\u96be\u5f97\u51fa\u4e0b\u9762\u7684\u8ba1\u7b97next\u6570\u7ec4\u7684\u4ee3\u7801 C++ const int N = 1e6 + 10 ; int nextt [ N ]; char S [ N ]; int len1 ; void get_next () { int i = 0 , j = -1 ; nextt [ 0 ] = -1 ; //\u8fd9\u4e2a\u662f\u8f85\u52a9\u8ba1\u7b97next\u503c\u5f97 while ( i < len1 ) { if ( j == -1 || S [ i ] == S [ j ]) nextt [ ++ i ] = ++ j ; //\u5982\u679c\u5339\u914d\u6210\u529f\u6216\u8005\u7b2c\u4e00\u6b21\u5339\u914d else j = nextt [ j ]; //\u5426\u5219j\u8fdb\u884c\u56de\u6eaf } } KMP\u6700\u6838\u5fc3\u7684\u4e1c\u897f\u4e5f\u5c31\u662f next\u6570\u7ec4 \uff0c\u8bf7\u4e00\u5b9a\u8981\u9886\u4f1a \u4e09\u3001KMP\u5b57\u7b26\u4e32\u5339\u914d \u00b6 \u5339\u914d\u7684\u65b9\u5f0f\u548c\u6734\u7d20\u7b97\u6cd5\u4e00\u81f4\uff0c\u4f46\u662f\u6bcf\u5f53\u5339\u914d\u5931\u8d25\u65f6\uff0c\u5b50\u4e32\u7684\u6307\u9488\u79fb\u5230next[i]\u7684\u4f4d\u7f6e\u4e0a\u53bb \u4ee3\u7801\u5b9e\u73b0 C++ //S\u8868\u793a\u7684\u662f\u5b50\u4e32(\u5339\u914d\u4e32)\uff0cT\u8868\u793a\u7684\u662f\u4e3b\u4e32(\u6587\u672c) int kmp (){ //\u8fd4\u56de\u7684\u662f\u5b50\u4e32\u5728\u4e3b\u4e32\u4e2d\u5b58\u5728\u7684\u6b21\u6570 int cnt = 0 ; //\u8868\u793a\u7684\u662f\u5b50\u4e32\u5728\u4e3b\u4e32\u4e2d\u5b58\u5728\u7684\u6b21\u6570 int i = 0 , j = 0 ; get_next (); while ( i < len2 ) { if ( j == -1 || T [ i ] == S [ j ]) \u3000\u3000 i ++ , j ++ ; else \u3000\u3000 j = nextt [ j ]; if ( j == len1 ) //\u8868\u793a\u7684\u662f\u5b50\u4e32\u5728\u4e3b\u4e32\u4e2d\u5b58\u5728\u7684\u6b21\u6570 \u3000\u3000 j = 0 , cnt ++ ; //\u5b50\u4e32\u6307\u9488\u5f52\u96f6 } return cnt ; } 3.1 \u5b8c\u6574\u7684KMP\u4ee3\u7801\u5982\u4e0b \u00b6 \u4ee5fjutoj2149\u4e3a\u4f8b C++ #include <bits/stdc++.h> using namespace std ; const int N = 1e6 + 10 ; char S [ N ], T [ N ]; int nextt [ N ]; int len1 , len2 ; void get_next () { int i = 0 , j = -1 ; nextt [ 0 ] = -1 ; while ( i < len2 ) { if ( j == -1 || S [ i ] == S [ j ]) nextt [ ++ i ] = ++ j ; else j = nextt [ j ]; } } int kmp () { int i = 0 , j = 0 ; get_next (); while ( i < len1 ) { if ( j == -1 || S [ j ] == T [ i ]) ++ i , ++ j ; else j = nextt [ j ]; if ( j == len2 ) return i - len2 ; } return -1 ; } int main () { while ( ~ scanf ( \"%s %s\" , T , S )) { len1 = strlen ( T ); len2 = strlen ( S ); printf ( \"%d \\n \" , kmp ()); } return 0 ; } \u56db\u3001\u5173\u4e8eKMP\u306enext \u00b6 4.1 \u5468\u671f\u95ee\u9898 \u00b6 \u901a\u8fc7next\u6570\u7ec4\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u5b57\u7b26\u4e32\u7684\u6700\u5c0f\u5468\u671f \u5148\u8bf4\u7ed3\u8bba next\u6570\u7ec4\uff0ci-next[i]\u5c31\u80fd\u5f97\u5230\u524di\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u7684\u6700\u5c0f\u5faa\u73af\u5468\u671f\u957f\u5ea6 \u539f\u7406\uff1a\u6211\u4eec\u5047\u8bbe\u6c42\u89e3\u7684\u5b57\u7b26\u4e32\u662f\u6709\u4e00\u4e2a\u4e0d\u6210\u5faa\u73af\u7684\u5c3e\u90e8(\u8fd9\u4e2a\u5c3e\u90e8\u53ef\u4ee5\u4e3a0)\uff0c\u90a3\u4e48\u524d\u7f00\u51fd\u6570\u6c42\u89e3\u7684\u65f6\u5019\uff0c\u6761\u4ef6\u662f\u524d\u7f00\u548c\u540e\u7f00\u6700\u957f\u76f8\u7b49\u6570\uff0c\u6211\u4eec\u901a\u8fc7n-next[n]\u4e5f\u5c31\u662f\u51cf\u53bb\u4e86\u591a\u6bb5\u5faa\u73af\u8282(\u53ef\u80fd\u4e3a0)+\u5c3e\u90e8\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u6700\u5c0f\u5faa\u73af\u5468\u671f\uff0c\u5927\u5bb6\u53ef\u4ee5\u52a8\u624b\u9a8c\u7b97\u4e00\u4e0b 4.2 \u538b\u7f29\u4f18\u5316 \u00b6 \u5bf9\u4e8e\u8fd9\u79cd\u5b50\u4e32\uff0caaaaab\uff0c\u901a\u8fc7\u524d\u7f00\u51fd\u6570\u6c42\u5f97[-1,0,1,2,3,4,0]\uff0c\u5982\u679c\u6700\u540e\u4e00\u4e2aa\u5339\u914d\u5931\u8d25\uff0c\u6211\u4eec\u6b63\u5e38\u7684kmp\u5339\u914d\u64cd\u4f5c\u4f1a\u4e0d\u65ad\u8ba9j=next[j]\uff0c\u6b64\u65f6\u5bf9\u4e8e\u8fd9\u4e2a\u5b50\u4e32\u5219\u662f\u4f1a\u8ba9j\u53d8\u4e3a j = 4 -> j = 3 -> j = 2 -> j = 1 -> j = 0\uff0c\u5176\u5b9e\u6211\u4eec\u4f1a\u53d1\u73b0\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u8ba9\u6700\u540e\u4e00\u4e2aa\u76f4\u63a5\u6307\u54110\uff0c\u8fd9\u6837\u5728\u6211\u4eec\u5339\u914d\u7684\u8fc7\u7a0b\u4e2d\u5c31\u80fd\u51cf\u5c11\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u64cd\u4f5c \u4ee3\u7801\u5b9e\u73b0: C++ const int N = 1e6 + 10 ; int nextt [ N ]; char S [ N ]; int n ; void get_next () { int i = 0 , j = -1 ; nextt [ 0 ] = -1 ; //\u8fd9\u4e2a\u662f\u8f85\u52a9\u8ba1\u7b97next\u503c\u5f97 while ( i < n ) { if ( j == -1 || S [ i ] == S [ j ]) { ++ i , ++ j ; if ( S [ i ] == S [ j ]) nextt [ j ] = next [ i ]; //\u538b\u7f29\u8def\u5f84 else nextt [ i ] = j ; } else j = nextt [ j ]; //\u5426\u5219j\u8fdb\u884c\u56de\u6eaf } } \u6ce8\u610f\u7684\u662f \u5e76\u4e0d\u662f\u6bcf\u4e00\u4e2a\u9898\u76ee\u90fd\u8981\u4f7f\u7528\u8def\u5f84\u538b\u7f29 \uff0c\u4f8b\u5982next\u6570\u7ec4\u5728\u6c42\u89e3\u6700\u5c0f\u5468\u671f\u7684\u65f6\u5019\u662f\u6709\u7528\u7684\uff0c\u5982\u679c\u4f7f\u7528\u538b\u7f29\u8def\u5f84\u4e4b\u540e\u4e2d\u95f4\u7684next\u503c\u5c31\u4e0d\u80fd\u5e2e\u52a9\u6211\u4eec\u8ba1\u7b97\u6700\u5c0f\u5468\u671f \u4e94\u3001\u9644\u4e0a\u4f8b\u9898 \u00b6 \u9898\u76ee\u8fde\u63a5 \u9898\u76ee\u540d http://120.78.128.11/Problem.jsp?pid=2149 KMP\u7b97\u6cd5 https://acm.dingbacode.com/showproblem.php?pid=1711 Number Sequence https://acm.dingbacode.com/showproblem.php?pid=1686 Oulipo https://acm.dingbacode.com/showproblem.php?pid=2087 \u526a\u82b1\u5e03\u6761 https://acm.dingbacode.com/showproblem.php?pid=2203 \u4eb2\u548c\u4e32 https://acm.dingbacode.com/showproblem.php?pid=3336 Count the string https://acm.dingbacode.com/showproblem.php?pid=2406 Power Strings http://poj.org/problem?id=2752 Seek the Name, Seek the Fame https://acm.dingbacode.com/showproblem.php?pid=1358 Period https://acm.dingbacode.com/showproblem.php?pid=1867 A + B for you again https://acm.dingbacode.com/showproblem.php?pid=3746 Cyclic Nacklace http://120.78.128.11/Problem.jsp?pid=2655 \u5a1c\u5a1c\u68a6\u6e38\u4ed9\u5883\u7cfb\u5217\u2014\u2014\u6751\u6c11\u7684\u602a\u7656","title":"KMP\u7b97\u6cd5"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/#kmp","text":"","title":"KMP\u7b97\u6cd5"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/#_1","text":"\u914d\u5957\u89c6\u9891\uff1a www.bilibili.com/video/BV18f4y1L7Uh KMP\u7b97\u6cd5\uff08\u4e5f\u53eb\u770b\u732b\u7247\u7b97\u6cd5(bushi\uff09\u662fKnuth\u3001Pratt \u548c Morris \u5728 1977 \u5e74\u5171\u540c\u53d1\u5e03\u4e00\u4e2a\u5728\u7ebf\u6027\u65f6\u95f4(O(n+m))\u5b57\u7b26\u4e32\u67e5\u627e\u6216\u5339\u914d\u7b97\u6cd5\uff0c\u5e38\u7528\u4e8e\u5728\u4e00\u4e2a\u6587\u672c\u4e32 S \u5185\u67e5\u627e\u4e00\u4e2a\u6a21\u5f0f\u4e32 P \u7684\u51fa\u73b0\u4f4d\u7f6e\u3002","title":"\u524d\u8a00"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/#_2","text":"","title":"\u4e00\u3001\u524d\u7f00\u548c\u540e\u7f00"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/#11","text":"\u662f\u6307\u7684\u4ece\u4e32\u9996\u5230\u67d0\u4e2a\u4f4d\u7f6ei\u7ed3\u675f\u7684\u4e00\u4e2a\u5b50\u4e32","title":"1.1\u524d\u7f00"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/#12","text":"\u662f\u6307\u7684\u662f\u9664\u5f00\u8be5\u4e32\u672c\u8eab\u7684\u524d\u7f00","title":"1.2\u771f\u524d\u7f00"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/#13","text":"\u6307\u4ece\u67d0\u4e2a\u4f4d\u7f6ei\u5f00\u59cb\u5230\u6574\u4e2a\u4e32\u672b\u5c3e\u7ed3\u675f\u7684\u4e00\u4e2a\u5b50\u4e32","title":"1.3\u540e\u7f00"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/#14","text":"\u662f\u6307\u7684\u662f\u9664\u5f00\u8be5\u4e32\u672c\u8eab\u7684\u540e\u7f00","title":"1.4\u771f\u540e\u7f00"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/#next","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n\u7684\u5b57\u7b26\u4e32 S\uff0c\u5176 \u524d\u7f00\u51fd\u6570 \u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4 next\u3002 \u5176\u4e2dnext[i]\u7684\u5b9a\u4e49\u662f\uff1a 1.\u5982\u679c\u5b50\u4e32S[0,\u2026\u2026,i]\u6709\u4e00\u5bf9\u76f8\u7b49\u7684\u771f\u524d\u7f00\u4e0e\u771f\u540e\u7f00\uff1aS[0,\u2026\u2026,k-1]\u548cS[i-(k-1)\u2026\u2026i]\uff0c\u90a3\u4e48next[i]\u5c31\u662f\u8fd9\u4e2a\u76f8\u7b49\u7684\u771f\u524d\u7f00\u7684\u957f\u5ea6(\u6216\u8005\u771f\u540e\u7f00\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u503c\u662f\u76f8\u7b49\u7684)\uff0c\u5373next[i] = k; 2.\u5982\u679c\u4e0d\u6b62\u6709\u4e00\u5bf9\u76f8\u7b49\u7684\uff0c\u90a3\u4e48next[i]\u5c31\u662f\u6700\u957f\u7684\u90a3\u4e2a 3.\u5982\u679c\u6ca1\u6709\u76f8\u7b49\u7684\u90a3\u4e48next[i]\u5c31\u662f0 \u5047\u5b9a\u5b57\u7b26\u4e32S\u4e3a \\(abcabca\\) \u90a3\u4e48next\u6570\u7ec4\u7684\u503c\u4e3a next[i] \u503c next[0] -1 next[1] 0 next[2] 0 next[3] 0 next[4] 1 next[5] 2 next[6] 3 next[7] 4 \u8fd9\u91cc\u5c31\u80fd\u770b\u51fa\u5b57\u7b26\u4e32abcabca\u7684\u524d\u7f00\u51fd\u6570\u6570\u7ec4\u4e3a[-1,0,0,0,1,2,3,4],\u6ce8\u610f\u4e00\u4e0b\u8fd9\u91cc\u7684next[0]\u662f\u7528\u4e8e\u8f85\u52a9\u8ba1\u7b97\u524d\u7f00\u503c\u7684\uff0cnext\u6570\u7ec4\u6c42\u51fa\u7684\u524d\u7f00\u503c\u662f\u6c42\u7684\u957f\u5ea6\u4e3ai\u7684\u5b57\u7b26\u4e32\u7684\u6700\u5927\u771f\u524d\u7f00\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u6700\u5927i-1 \u4e0d\u96be\u53d1\u73b0next\u6570\u7ec4\u7684\u503c\u7684\u589e\u52a0\u662f\u4e00\u6b65\u4e00\u6b65\u7684\uff0c\u4e5f\u5c31\u662f\u76f8\u90bb\u7684\u4e24\u4e2anext\u503c\u7684\u5dee\u503c\u6700\u5927\u4e3a1\uff0c\u4e5f\u5c31\u662f\u8bf4\u5339\u914d\u6210\u529f\u540e\u6211\u4eec\u53ef\u4ee5\u63a5\u7740\u4f7f\u7528\u8fd9\u4e2a\u6570\u636e\uff0c\u5931\u8d25\u5219\u901a\u8fc7\u6211\u4eec\u7684next\u6570\u7ec4\u8fdb\u884c\u56de\u6eaf\uff0c\u56e0\u4e3a\u524d\u540e\u7f00\u76f8\u540c\uff0c\u6211\u4eec\u4e0d\u96be\u5f97\u51fa\u4e0b\u9762\u7684\u8ba1\u7b97next\u6570\u7ec4\u7684\u4ee3\u7801 C++ const int N = 1e6 + 10 ; int nextt [ N ]; char S [ N ]; int len1 ; void get_next () { int i = 0 , j = -1 ; nextt [ 0 ] = -1 ; //\u8fd9\u4e2a\u662f\u8f85\u52a9\u8ba1\u7b97next\u503c\u5f97 while ( i < len1 ) { if ( j == -1 || S [ i ] == S [ j ]) nextt [ ++ i ] = ++ j ; //\u5982\u679c\u5339\u914d\u6210\u529f\u6216\u8005\u7b2c\u4e00\u6b21\u5339\u914d else j = nextt [ j ]; //\u5426\u5219j\u8fdb\u884c\u56de\u6eaf } } KMP\u6700\u6838\u5fc3\u7684\u4e1c\u897f\u4e5f\u5c31\u662f next\u6570\u7ec4 \uff0c\u8bf7\u4e00\u5b9a\u8981\u9886\u4f1a","title":"\u4e8c\u3001\u524d\u7f00\u51fd\u6570(next)"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/#kmp_1","text":"\u5339\u914d\u7684\u65b9\u5f0f\u548c\u6734\u7d20\u7b97\u6cd5\u4e00\u81f4\uff0c\u4f46\u662f\u6bcf\u5f53\u5339\u914d\u5931\u8d25\u65f6\uff0c\u5b50\u4e32\u7684\u6307\u9488\u79fb\u5230next[i]\u7684\u4f4d\u7f6e\u4e0a\u53bb \u4ee3\u7801\u5b9e\u73b0 C++ //S\u8868\u793a\u7684\u662f\u5b50\u4e32(\u5339\u914d\u4e32)\uff0cT\u8868\u793a\u7684\u662f\u4e3b\u4e32(\u6587\u672c) int kmp (){ //\u8fd4\u56de\u7684\u662f\u5b50\u4e32\u5728\u4e3b\u4e32\u4e2d\u5b58\u5728\u7684\u6b21\u6570 int cnt = 0 ; //\u8868\u793a\u7684\u662f\u5b50\u4e32\u5728\u4e3b\u4e32\u4e2d\u5b58\u5728\u7684\u6b21\u6570 int i = 0 , j = 0 ; get_next (); while ( i < len2 ) { if ( j == -1 || T [ i ] == S [ j ]) \u3000\u3000 i ++ , j ++ ; else \u3000\u3000 j = nextt [ j ]; if ( j == len1 ) //\u8868\u793a\u7684\u662f\u5b50\u4e32\u5728\u4e3b\u4e32\u4e2d\u5b58\u5728\u7684\u6b21\u6570 \u3000\u3000 j = 0 , cnt ++ ; //\u5b50\u4e32\u6307\u9488\u5f52\u96f6 } return cnt ; }","title":"\u4e09\u3001KMP\u5b57\u7b26\u4e32\u5339\u914d"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/#31-kmp","text":"\u4ee5fjutoj2149\u4e3a\u4f8b C++ #include <bits/stdc++.h> using namespace std ; const int N = 1e6 + 10 ; char S [ N ], T [ N ]; int nextt [ N ]; int len1 , len2 ; void get_next () { int i = 0 , j = -1 ; nextt [ 0 ] = -1 ; while ( i < len2 ) { if ( j == -1 || S [ i ] == S [ j ]) nextt [ ++ i ] = ++ j ; else j = nextt [ j ]; } } int kmp () { int i = 0 , j = 0 ; get_next (); while ( i < len1 ) { if ( j == -1 || S [ j ] == T [ i ]) ++ i , ++ j ; else j = nextt [ j ]; if ( j == len2 ) return i - len2 ; } return -1 ; } int main () { while ( ~ scanf ( \"%s %s\" , T , S )) { len1 = strlen ( T ); len2 = strlen ( S ); printf ( \"%d \\n \" , kmp ()); } return 0 ; }","title":"3.1 \u5b8c\u6574\u7684KMP\u4ee3\u7801\u5982\u4e0b"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/#kmpnext","text":"","title":"\u56db\u3001\u5173\u4e8eKMP\u306enext"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/#41","text":"\u901a\u8fc7next\u6570\u7ec4\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u5b57\u7b26\u4e32\u7684\u6700\u5c0f\u5468\u671f \u5148\u8bf4\u7ed3\u8bba next\u6570\u7ec4\uff0ci-next[i]\u5c31\u80fd\u5f97\u5230\u524di\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u7684\u6700\u5c0f\u5faa\u73af\u5468\u671f\u957f\u5ea6 \u539f\u7406\uff1a\u6211\u4eec\u5047\u8bbe\u6c42\u89e3\u7684\u5b57\u7b26\u4e32\u662f\u6709\u4e00\u4e2a\u4e0d\u6210\u5faa\u73af\u7684\u5c3e\u90e8(\u8fd9\u4e2a\u5c3e\u90e8\u53ef\u4ee5\u4e3a0)\uff0c\u90a3\u4e48\u524d\u7f00\u51fd\u6570\u6c42\u89e3\u7684\u65f6\u5019\uff0c\u6761\u4ef6\u662f\u524d\u7f00\u548c\u540e\u7f00\u6700\u957f\u76f8\u7b49\u6570\uff0c\u6211\u4eec\u901a\u8fc7n-next[n]\u4e5f\u5c31\u662f\u51cf\u53bb\u4e86\u591a\u6bb5\u5faa\u73af\u8282(\u53ef\u80fd\u4e3a0)+\u5c3e\u90e8\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u6700\u5c0f\u5faa\u73af\u5468\u671f\uff0c\u5927\u5bb6\u53ef\u4ee5\u52a8\u624b\u9a8c\u7b97\u4e00\u4e0b","title":"4.1 \u5468\u671f\u95ee\u9898"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/#42","text":"\u5bf9\u4e8e\u8fd9\u79cd\u5b50\u4e32\uff0caaaaab\uff0c\u901a\u8fc7\u524d\u7f00\u51fd\u6570\u6c42\u5f97[-1,0,1,2,3,4,0]\uff0c\u5982\u679c\u6700\u540e\u4e00\u4e2aa\u5339\u914d\u5931\u8d25\uff0c\u6211\u4eec\u6b63\u5e38\u7684kmp\u5339\u914d\u64cd\u4f5c\u4f1a\u4e0d\u65ad\u8ba9j=next[j]\uff0c\u6b64\u65f6\u5bf9\u4e8e\u8fd9\u4e2a\u5b50\u4e32\u5219\u662f\u4f1a\u8ba9j\u53d8\u4e3a j = 4 -> j = 3 -> j = 2 -> j = 1 -> j = 0\uff0c\u5176\u5b9e\u6211\u4eec\u4f1a\u53d1\u73b0\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u8ba9\u6700\u540e\u4e00\u4e2aa\u76f4\u63a5\u6307\u54110\uff0c\u8fd9\u6837\u5728\u6211\u4eec\u5339\u914d\u7684\u8fc7\u7a0b\u4e2d\u5c31\u80fd\u51cf\u5c11\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u64cd\u4f5c \u4ee3\u7801\u5b9e\u73b0: C++ const int N = 1e6 + 10 ; int nextt [ N ]; char S [ N ]; int n ; void get_next () { int i = 0 , j = -1 ; nextt [ 0 ] = -1 ; //\u8fd9\u4e2a\u662f\u8f85\u52a9\u8ba1\u7b97next\u503c\u5f97 while ( i < n ) { if ( j == -1 || S [ i ] == S [ j ]) { ++ i , ++ j ; if ( S [ i ] == S [ j ]) nextt [ j ] = next [ i ]; //\u538b\u7f29\u8def\u5f84 else nextt [ i ] = j ; } else j = nextt [ j ]; //\u5426\u5219j\u8fdb\u884c\u56de\u6eaf } } \u6ce8\u610f\u7684\u662f \u5e76\u4e0d\u662f\u6bcf\u4e00\u4e2a\u9898\u76ee\u90fd\u8981\u4f7f\u7528\u8def\u5f84\u538b\u7f29 \uff0c\u4f8b\u5982next\u6570\u7ec4\u5728\u6c42\u89e3\u6700\u5c0f\u5468\u671f\u7684\u65f6\u5019\u662f\u6709\u7528\u7684\uff0c\u5982\u679c\u4f7f\u7528\u538b\u7f29\u8def\u5f84\u4e4b\u540e\u4e2d\u95f4\u7684next\u503c\u5c31\u4e0d\u80fd\u5e2e\u52a9\u6211\u4eec\u8ba1\u7b97\u6700\u5c0f\u5468\u671f","title":"4.2 \u538b\u7f29\u4f18\u5316"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/#_3","text":"\u9898\u76ee\u8fde\u63a5 \u9898\u76ee\u540d http://120.78.128.11/Problem.jsp?pid=2149 KMP\u7b97\u6cd5 https://acm.dingbacode.com/showproblem.php?pid=1711 Number Sequence https://acm.dingbacode.com/showproblem.php?pid=1686 Oulipo https://acm.dingbacode.com/showproblem.php?pid=2087 \u526a\u82b1\u5e03\u6761 https://acm.dingbacode.com/showproblem.php?pid=2203 \u4eb2\u548c\u4e32 https://acm.dingbacode.com/showproblem.php?pid=3336 Count the string https://acm.dingbacode.com/showproblem.php?pid=2406 Power Strings http://poj.org/problem?id=2752 Seek the Name, Seek the Fame https://acm.dingbacode.com/showproblem.php?pid=1358 Period https://acm.dingbacode.com/showproblem.php?pid=1867 A + B for you again https://acm.dingbacode.com/showproblem.php?pid=3746 Cyclic Nacklace http://120.78.128.11/Problem.jsp?pid=2655 \u5a1c\u5a1c\u68a6\u6e38\u4ed9\u5883\u7cfb\u5217\u2014\u2014\u6751\u6c11\u7684\u602a\u7656","title":"\u4e94\u3001\u9644\u4e0a\u4f8b\u9898"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/Trie%E6%A0%91/","text":"Trie\u6811 \u00b6 \u524d\u8a00 \u00b6 \u914d\u5957\u89c6\u9891\uff1a www.bilibili.com/video/BV14A411c7Dr \u4e00\u3001Trie\u6811\u7b80\u4ecb \u00b6 \u987e\u540d\u601d\u4e49\uff0c\u8fd9\u68f5\u6811\u548c\u5b57\u5178\u7c7b\u4f3c\uff0c\u901a\u8fc7\u767e\u5ea6\u6211\u4eec\u53c8\u80fd\u77e5\u9053 Trie\u6811\u662f\u4e00\u79cd\u6811\u5f62\u7ed3\u6784 \uff0c\u662f\u4e00\u79cd \u54c8\u5e0c\u6811 \u7684\u53d8\u79cd\u3002\u5178\u578b\u5e94\u7528\u662f\u7528\u4e8e \u7edf\u8ba1 \uff0c \u6392\u5e8f \u548c \u4fdd\u5b58\u5927\u91cf\u7684\u5b57\u7b26\u4e32 \uff08\u4f46\u4e0d\u4ec5\u9650\u4e8e\u5b57\u7b26\u4e32\uff09\uff0c\u6240\u4ee5\u7ecf\u5e38\u88ab \u641c\u7d22\u5f15\u64ce \u7cfb\u7edf\u7528\u4e8e\u6587\u672c\u8bcd\u9891\u7edf\u8ba1\u3002\u5b83\u7684\u4f18\u70b9\u662f\uff1a\u5229\u7528\u5b57\u7b26\u4e32\u7684\u516c\u5171\u524d\u7f00\u6765\u51cf\u5c11\u67e5\u8be2\u65f6\u95f4\uff0c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u65e0\u8c13\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u67e5\u8be2\u6548\u7387\u6bd4\u54c8\u5e0c\u6811\u9ad8\u3002 \u6211\u4eec\u53ef\u4ee5\u5148\u770b\u4e00\u5f20\u56fe\u6765\u6f14\u793aTrie\u6811\u7684\u7ed3\u6784\uff1a \u8fd9\u5f20\u56fe\u5df2\u7ecf\u5f88\u660e\u663e\u7684\u544a\u8bc9\u4f60\u4e86\uff0c\u8fd9\u68f5\u6811\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u4ee3\u8868\u7740\u4e00\u4e2a\u5b57\u7b26\u6216\u8005\u8bf4\u9664\u5f00\u6839\u8282\u70b9\u5916\u5176\u4ed6\u70b9\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u5c31\u80fd\u5b9e\u73b0\u7c7b\u4f3c\u5b57\u5178\u7684\u5feb\u901f\u67e5\u627e\uff0c\u4f46\u662f\u663e\u800c\u6613\u89c1\u7684\u8fd9\u6837\u7684\u7ed3\u6784\u5bf9\u7a7a\u95f4\u7684\u6d6a\u8d39\u662f\u5de8\u5927\u7684 \u4e8c\u3001Trie\u6811\u7684\u57fa\u672c\u6027\u8d28 \u00b6 1\uff0c\u6839\u8282\u70b9\u4e0d\u5305\u542b\u5b57\u7b26\uff0c\u9664\u6839\u8282\u70b9\u610f\u5916\u6bcf\u4e2a\u8282\u70b9\u53ea\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u3002 2\uff0c\u4ece\u6839\u8282\u70b9\u5230\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u5b57\u7b26\u8fde\u63a5\u8d77\u6765\uff0c\u4e3a\u8be5\u8282\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002 3\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u5305\u542b\u7684\u5b57\u7b26\u4e32\u4e0d\u76f8\u540c\u3002 \u4e09\u3001Trie\u6811\u7684\u4f18\u7f3a\u70b9 \u00b6 3.1 \u4f18\u70b9 \u00b6 1.\u5f88\u660e\u663e\uff0cTrie\u6811\u5728\u63d2\u5165\u5b57\u7b26\u4e32\u548c\u67e5\u627e\u5b57\u7b26\u4e32\u7684\u6548\u7387\u662f\u6781\u9ad8\u7684 2.Trie\u6811\u672c\u8eab\u5c31\u662f\u4e00\u9897\u6392\u597d\u5e8f\u7684\u6811 3.Trie\u6811\u5728\u5bf9\u4e0e\u5b57\u7b26\u4e32\u5339\u914d\u65b9\u9762\u80fd\u6709\u66f4\u591a\u7684\u64cd\u4f5c 4.\u4e0d\u4f1a\u53d1\u751f\u50cfhash\u4e00\u6837\u7684hash\u78b0\u649e 3.2 \u7f3a\u70b9 \u00b6 1.\u5f88\u660e\u663e\uff0cTrie\u6811\u662f\u4e00\u79cd\u4ee5\u65f6\u95f4\u6362\u7a7a\u95f4\u7684\u505a\u6cd5\uff0c\u6240\u4ee5Trie\u6811\u7684\u7a7a\u95f4\u82b1\u8d39\u975e\u5e38\u5927 2.\u5bf9\u4e8e\u8f83\u957f\u5b57\u7b26\u4e32\u7684\u5904\u7406\uff0cTrie\u6811\u8fd8\u4e0d\u80fd\u89e3\u51b3\uff0c\u6216\u8005\u8bf4\u4f1a\u8ba9Trie\u6811\u7684\u94fe\u53d8\u5f97\u5f88\u957f\u5bfc\u81f4\u70b8\u7a7a\u95f4\u7b49\u73b0\u8c61 \u56db\u3001\u4e3a\u4ec0\u4e48\u8981\u5b66\u4e60Trie\u6811 \u00b6 1.\u56e0\u4e3a\u9898\u76ee\u9700\u8981\uff0c\u5f88\u591a\u9898\u76ee\u90fd\u4f1a\u51fa\u73b0\u5bf9\u5b57\u7b26\u4e32\u7684\u5904\u7406\u7b49\u7b49 2.\u5b66\u4e60Trie\u6811\u80fd\u4e30\u5bcc\u6211\u4eec\u7684\u6570\u636e\u7ed3\u6784\u77e5\u8bc6 3.Trie\u6811\u80fd\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e00\u79cd\u5f88\u597d\u7684\u601d\u7ef4\u65b9\u5f0f 4.Trie\u6811\u662f\u540e\u7eed\u5b66\u4e60\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u4f8b\u5982AC\u81ea\u52a8\u673a\u3001\u540e\u7f00\u81ea\u52a8\u673a\u7684\u8f85\u52a9\u7ed3\u6784 \u4e94\u3001Trie\u6811\u7684\u5e94\u7528 \u00b6 5.1 \u5b57\u7b26\u4e32\u7684\u5feb\u901f\u5339\u914d \u00b6 \u901a\u8fc7Trie\u6811\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0O(m)\u590d\u6742\u5ea6\u7684\u5339\u914d 5.2 \u5b57\u7b26\u4e32\u6392\u5e8f \u00b6 \u6211\u4eec\u901a\u8fc7\u4f18\u5148\u904d\u5386\u5b57\u7b26\u5e8f\u9760\u524d\u7684\u5b57\u7b26\u4e32\u5373\u53ef\u83b7\u5f97 5.3 \u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u5339\u914d \u00b6 \u5b57\u5178\u6811\u4f1a\u5728\u63d2\u5165\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u7684\u4fe1\u606f\uff0c\u901a\u8fc7\u8fd9\u4e9b\u4fe1\u606f\u6211\u4eec\u5c31\u80fd\u77e5\u9053\u5f53\u524d\u5339\u914d\u4f4d\u7f6e\u662f\u5426\u6709\u516c\u5171\u524d\u7f00 \u516d\u3001\u4ee3\u7801\u5b9e\u73b0 \u00b6 \u4f8b\u9898 luoguP2580 C++ #include <cstdio> #include <algorithm> #include <cstring> using namespace std ; const int N = 5e5 + 10 ; //\u8bf7\u6ce8\u610f\u8fd9\u91cc\u7684\u6570\u7ec4\u5927\u5c0f\u8981\u5f00\u5b57\u7b26\u4e32\u7684\u4e2a\u6570*\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u8fd9\u4e48\u5927 int n , m ; struct trie { int nextt [ N ][ 26 ], cnt ; //nextt[i][j]\u5b58\u50a8\u7684\u662f\u7b2ci\u4e2a\u5b57\u7b26\u4e0b\u4e00\u4e2a\u5b57\u7b26j\u7684\u4f4d\u7f6e\u4fe1\u606f int exit [ N ]; //exit[i]\u8868\u793a\u4ee5\u503c\u4e3ai\u7ed3\u675f\u7684\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5b58\u5728 void insert ( char * s , int l ) { int p = 0 ; //\u8fd9\u4e2a\u8868\u793a\u7684\u662f\u5f53\u524d\u7684\u4f4d\u7f6e\u6307\u9488 for ( int i = 0 ; i < l ; ++ i ) { int c = s [ i ] - 'a' ; if ( ! nextt [ p ][ c ]) nextt [ p ][ c ] = ++ cnt ; //\u5982\u679c\u4e0b\u9762\u4e00\u5c42\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u5c31\u66f4\u65b0\u4e0b\u4e00\u5c42\u7684\u503c p = nextt [ p ][ c ]; //\u66f4\u65b0\u5f53\u524d\u7684p\u6307\u9488 } exit [ p ] = 1 ; } void find ( char * s , int l ) { int p = 0 ; for ( int i = 0 ; i < l ; ++ i ) { int c = s [ i ] - 'a' ; if ( ! nextt [ p ][ c ]) break ; //\u8fd9\u91cc\u8868\u793a\u6ca1\u627e\u5230\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u9000\u51fa\u5373\u53ef p = nextt [ p ][ c ]; } if ( exit [ p ] == 1 ) { puts ( \"OK\" ); exit [ p ] = 2 ; } else if ( exit [ p ] == 2 ) { puts ( \"REPEAT\" ); } else if ( exit [ p ] == 0 ) { puts ( \"WRONG\" ); } } } T ; char S [ N ]; int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \" %s\" , S ); T . insert ( S , strlen ( S )); } scanf ( \"%d\" , & m ); for ( int i = 0 ; i < m ; ++ i ) { scanf ( \"%s\" , S ); T . find ( S , strlen ( S )); } return 0 ; } \u4e03\u3001Trie\u6811\u7684\u884d\u751f01-Trie \u00b6 01Trie\u5c31\u50cf\u662fTrie\u7684\u4e00\u79cd\u7b80\u5316\u7248\u672c\uff0c\u5c31\u662f\u6784\u5efa\u7684\u6811\u53ea\u67090\u548c1\uff0c\u56e0\u4e3a\u53ea\u67090\u548c1\u6211\u4eec\u5f88\u5bb9\u6613\u548c\u4f4d\u8fd0\u7b97\u7b49\u8fd0\u7b97\u8054\u7cfb\u8d77\u6765\uff0c\u6bd4\u5982xor\u3001&\u3001|\u3001\u7b49\u7b49\uff0c01\u5b57\u5178\u6811\u6700\u5e38\u7528\u7684\u5c31\u662f\u5bf9xor\u6c42\u6700\u5927\u503c\u7684\u8ba1\u7b97 7.1 01\u5b57\u5178\u6811\u7684\u4ee3\u7801\u6a21\u677f \u00b6 \u4f8b\u9898\uff1a Xor Sum C++ #include <cstring> #include <algorithm> #include <cstdio> using namespace std ; #define ll long long const int N = 1e5 + 10 ; int n , m ; struct Trie { ll nextt [ N * 32 ][ 2 ]; ll exit [ N * 32 ]; ll cnt = 0 ; void init () { memset ( nextt , 0 , sizeof nextt ); memset ( exit , 0 , sizeof exit ); cnt = 0 ; } void insert ( ll k ) { ll p = 0 ; for ( int i = 32 ; i >= 0 ; -- i ) { ll c = ( k >> i ) & 1 ; if ( ! nextt [ p ][ c ]) nextt [ p ][ c ] = ++ cnt ; p = nextt [ p ][ c ]; } exit [ p ] = k ; } ll find ( ll k ) { ll p = 0 ; for ( int i = 32 ; i >= 0 ; -- i ) { ll c = ( k >> i ) & 1 ; if ( nextt [ p ][ c ^ 1 ]) p = nextt [ p ][ c ^ 1 ]; else p = nextt [ p ][ c ]; } return exit [ p ]; } } T ; int main () { int t ; scanf ( \"%d\" , & t ); for ( int j = 1 ; j <= t ; ++ j ) { scanf ( \"%d%d\" , & n , & m ); ll k ; T . init (); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%lld\" , & k ); T . insert ( k ); } printf ( \"Case #%d: \\n \" , j ); while ( m -- ) { scanf ( \"%lld\" , & k ); printf ( \"%lld \\n \" , T . find ( k )); } } return 0 ; } \u516b\u3001\u7ec3\u4e60\u9898 \u00b6 \u9898\u76ee \u9898\u76ee\u8fde\u63a5 Babelfish http://poj.org/problem?id=2503 Phone List https://acm.hdu.edu.cn/showproblem.php?pid=1671 Xor Sum https://acm.hdu.edu.cn/showproblem.php?pid=4825 What Are You Talking About https://acm.hdu.edu.cn/showproblem.php?pid=1075 Beautiful Subarrays http://codeforces.com/problemset/problem/665/E \u7b2c\u516b\u96c6 \u4f60\u660e\u660e\u81ea\u5df1\u4e5f\u751f\u75c5\u4e86\uff0c\u5374\u8fd8\u662f\u8981\u966a\u7740\u6211 http://120.78.128.11/Problem.jsp?pid=1928 P2580 \u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86 https://www.luogu.com.cn/problem/P2580 Chip Factory https://www.luogu.com.cn/problem/U109897 Nikitosh and xor https://www.luogu.com.cn/problem/U109923 \u6700\u957f\u5f02\u6216\u8def\u5f84 https://www.luogu.com.cn/problem/P4551 \u9605\u8bfb\u7406\u89e3 https://www.luogu.com.cn/problem/P3879","title":"Trie\u6811"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/Trie%E6%A0%91/#trie","text":"","title":"Trie\u6811"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/Trie%E6%A0%91/#_1","text":"\u914d\u5957\u89c6\u9891\uff1a www.bilibili.com/video/BV14A411c7Dr","title":"\u524d\u8a00"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/Trie%E6%A0%91/#trie_1","text":"\u987e\u540d\u601d\u4e49\uff0c\u8fd9\u68f5\u6811\u548c\u5b57\u5178\u7c7b\u4f3c\uff0c\u901a\u8fc7\u767e\u5ea6\u6211\u4eec\u53c8\u80fd\u77e5\u9053 Trie\u6811\u662f\u4e00\u79cd\u6811\u5f62\u7ed3\u6784 \uff0c\u662f\u4e00\u79cd \u54c8\u5e0c\u6811 \u7684\u53d8\u79cd\u3002\u5178\u578b\u5e94\u7528\u662f\u7528\u4e8e \u7edf\u8ba1 \uff0c \u6392\u5e8f \u548c \u4fdd\u5b58\u5927\u91cf\u7684\u5b57\u7b26\u4e32 \uff08\u4f46\u4e0d\u4ec5\u9650\u4e8e\u5b57\u7b26\u4e32\uff09\uff0c\u6240\u4ee5\u7ecf\u5e38\u88ab \u641c\u7d22\u5f15\u64ce \u7cfb\u7edf\u7528\u4e8e\u6587\u672c\u8bcd\u9891\u7edf\u8ba1\u3002\u5b83\u7684\u4f18\u70b9\u662f\uff1a\u5229\u7528\u5b57\u7b26\u4e32\u7684\u516c\u5171\u524d\u7f00\u6765\u51cf\u5c11\u67e5\u8be2\u65f6\u95f4\uff0c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u65e0\u8c13\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u67e5\u8be2\u6548\u7387\u6bd4\u54c8\u5e0c\u6811\u9ad8\u3002 \u6211\u4eec\u53ef\u4ee5\u5148\u770b\u4e00\u5f20\u56fe\u6765\u6f14\u793aTrie\u6811\u7684\u7ed3\u6784\uff1a \u8fd9\u5f20\u56fe\u5df2\u7ecf\u5f88\u660e\u663e\u7684\u544a\u8bc9\u4f60\u4e86\uff0c\u8fd9\u68f5\u6811\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u4ee3\u8868\u7740\u4e00\u4e2a\u5b57\u7b26\u6216\u8005\u8bf4\u9664\u5f00\u6839\u8282\u70b9\u5916\u5176\u4ed6\u70b9\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u5c31\u80fd\u5b9e\u73b0\u7c7b\u4f3c\u5b57\u5178\u7684\u5feb\u901f\u67e5\u627e\uff0c\u4f46\u662f\u663e\u800c\u6613\u89c1\u7684\u8fd9\u6837\u7684\u7ed3\u6784\u5bf9\u7a7a\u95f4\u7684\u6d6a\u8d39\u662f\u5de8\u5927\u7684","title":"\u4e00\u3001Trie\u6811\u7b80\u4ecb"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/Trie%E6%A0%91/#trie_2","text":"1\uff0c\u6839\u8282\u70b9\u4e0d\u5305\u542b\u5b57\u7b26\uff0c\u9664\u6839\u8282\u70b9\u610f\u5916\u6bcf\u4e2a\u8282\u70b9\u53ea\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u3002 2\uff0c\u4ece\u6839\u8282\u70b9\u5230\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u5b57\u7b26\u8fde\u63a5\u8d77\u6765\uff0c\u4e3a\u8be5\u8282\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002 3\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u5305\u542b\u7684\u5b57\u7b26\u4e32\u4e0d\u76f8\u540c\u3002","title":"\u4e8c\u3001Trie\u6811\u7684\u57fa\u672c\u6027\u8d28"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/Trie%E6%A0%91/#trie_3","text":"","title":"\u4e09\u3001Trie\u6811\u7684\u4f18\u7f3a\u70b9"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/Trie%E6%A0%91/#31","text":"1.\u5f88\u660e\u663e\uff0cTrie\u6811\u5728\u63d2\u5165\u5b57\u7b26\u4e32\u548c\u67e5\u627e\u5b57\u7b26\u4e32\u7684\u6548\u7387\u662f\u6781\u9ad8\u7684 2.Trie\u6811\u672c\u8eab\u5c31\u662f\u4e00\u9897\u6392\u597d\u5e8f\u7684\u6811 3.Trie\u6811\u5728\u5bf9\u4e0e\u5b57\u7b26\u4e32\u5339\u914d\u65b9\u9762\u80fd\u6709\u66f4\u591a\u7684\u64cd\u4f5c 4.\u4e0d\u4f1a\u53d1\u751f\u50cfhash\u4e00\u6837\u7684hash\u78b0\u649e","title":"3.1 \u4f18\u70b9"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/Trie%E6%A0%91/#32","text":"1.\u5f88\u660e\u663e\uff0cTrie\u6811\u662f\u4e00\u79cd\u4ee5\u65f6\u95f4\u6362\u7a7a\u95f4\u7684\u505a\u6cd5\uff0c\u6240\u4ee5Trie\u6811\u7684\u7a7a\u95f4\u82b1\u8d39\u975e\u5e38\u5927 2.\u5bf9\u4e8e\u8f83\u957f\u5b57\u7b26\u4e32\u7684\u5904\u7406\uff0cTrie\u6811\u8fd8\u4e0d\u80fd\u89e3\u51b3\uff0c\u6216\u8005\u8bf4\u4f1a\u8ba9Trie\u6811\u7684\u94fe\u53d8\u5f97\u5f88\u957f\u5bfc\u81f4\u70b8\u7a7a\u95f4\u7b49\u73b0\u8c61","title":"3.2 \u7f3a\u70b9"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/Trie%E6%A0%91/#trie_4","text":"1.\u56e0\u4e3a\u9898\u76ee\u9700\u8981\uff0c\u5f88\u591a\u9898\u76ee\u90fd\u4f1a\u51fa\u73b0\u5bf9\u5b57\u7b26\u4e32\u7684\u5904\u7406\u7b49\u7b49 2.\u5b66\u4e60Trie\u6811\u80fd\u4e30\u5bcc\u6211\u4eec\u7684\u6570\u636e\u7ed3\u6784\u77e5\u8bc6 3.Trie\u6811\u80fd\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e00\u79cd\u5f88\u597d\u7684\u601d\u7ef4\u65b9\u5f0f 4.Trie\u6811\u662f\u540e\u7eed\u5b66\u4e60\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u4f8b\u5982AC\u81ea\u52a8\u673a\u3001\u540e\u7f00\u81ea\u52a8\u673a\u7684\u8f85\u52a9\u7ed3\u6784","title":"\u56db\u3001\u4e3a\u4ec0\u4e48\u8981\u5b66\u4e60Trie\u6811"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/Trie%E6%A0%91/#trie_5","text":"","title":"\u4e94\u3001Trie\u6811\u7684\u5e94\u7528"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/Trie%E6%A0%91/#51","text":"\u901a\u8fc7Trie\u6811\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0O(m)\u590d\u6742\u5ea6\u7684\u5339\u914d","title":"5.1 \u5b57\u7b26\u4e32\u7684\u5feb\u901f\u5339\u914d"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/Trie%E6%A0%91/#52","text":"\u6211\u4eec\u901a\u8fc7\u4f18\u5148\u904d\u5386\u5b57\u7b26\u5e8f\u9760\u524d\u7684\u5b57\u7b26\u4e32\u5373\u53ef\u83b7\u5f97","title":"5.2 \u5b57\u7b26\u4e32\u6392\u5e8f"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/Trie%E6%A0%91/#53","text":"\u5b57\u5178\u6811\u4f1a\u5728\u63d2\u5165\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u7684\u4fe1\u606f\uff0c\u901a\u8fc7\u8fd9\u4e9b\u4fe1\u606f\u6211\u4eec\u5c31\u80fd\u77e5\u9053\u5f53\u524d\u5339\u914d\u4f4d\u7f6e\u662f\u5426\u6709\u516c\u5171\u524d\u7f00","title":"5.3 \u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u5339\u914d"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/Trie%E6%A0%91/#_2","text":"\u4f8b\u9898 luoguP2580 C++ #include <cstdio> #include <algorithm> #include <cstring> using namespace std ; const int N = 5e5 + 10 ; //\u8bf7\u6ce8\u610f\u8fd9\u91cc\u7684\u6570\u7ec4\u5927\u5c0f\u8981\u5f00\u5b57\u7b26\u4e32\u7684\u4e2a\u6570*\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u8fd9\u4e48\u5927 int n , m ; struct trie { int nextt [ N ][ 26 ], cnt ; //nextt[i][j]\u5b58\u50a8\u7684\u662f\u7b2ci\u4e2a\u5b57\u7b26\u4e0b\u4e00\u4e2a\u5b57\u7b26j\u7684\u4f4d\u7f6e\u4fe1\u606f int exit [ N ]; //exit[i]\u8868\u793a\u4ee5\u503c\u4e3ai\u7ed3\u675f\u7684\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5b58\u5728 void insert ( char * s , int l ) { int p = 0 ; //\u8fd9\u4e2a\u8868\u793a\u7684\u662f\u5f53\u524d\u7684\u4f4d\u7f6e\u6307\u9488 for ( int i = 0 ; i < l ; ++ i ) { int c = s [ i ] - 'a' ; if ( ! nextt [ p ][ c ]) nextt [ p ][ c ] = ++ cnt ; //\u5982\u679c\u4e0b\u9762\u4e00\u5c42\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u5c31\u66f4\u65b0\u4e0b\u4e00\u5c42\u7684\u503c p = nextt [ p ][ c ]; //\u66f4\u65b0\u5f53\u524d\u7684p\u6307\u9488 } exit [ p ] = 1 ; } void find ( char * s , int l ) { int p = 0 ; for ( int i = 0 ; i < l ; ++ i ) { int c = s [ i ] - 'a' ; if ( ! nextt [ p ][ c ]) break ; //\u8fd9\u91cc\u8868\u793a\u6ca1\u627e\u5230\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u9000\u51fa\u5373\u53ef p = nextt [ p ][ c ]; } if ( exit [ p ] == 1 ) { puts ( \"OK\" ); exit [ p ] = 2 ; } else if ( exit [ p ] == 2 ) { puts ( \"REPEAT\" ); } else if ( exit [ p ] == 0 ) { puts ( \"WRONG\" ); } } } T ; char S [ N ]; int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \" %s\" , S ); T . insert ( S , strlen ( S )); } scanf ( \"%d\" , & m ); for ( int i = 0 ; i < m ; ++ i ) { scanf ( \"%s\" , S ); T . find ( S , strlen ( S )); } return 0 ; }","title":"\u516d\u3001\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/Trie%E6%A0%91/#trie01-trie","text":"01Trie\u5c31\u50cf\u662fTrie\u7684\u4e00\u79cd\u7b80\u5316\u7248\u672c\uff0c\u5c31\u662f\u6784\u5efa\u7684\u6811\u53ea\u67090\u548c1\uff0c\u56e0\u4e3a\u53ea\u67090\u548c1\u6211\u4eec\u5f88\u5bb9\u6613\u548c\u4f4d\u8fd0\u7b97\u7b49\u8fd0\u7b97\u8054\u7cfb\u8d77\u6765\uff0c\u6bd4\u5982xor\u3001&\u3001|\u3001\u7b49\u7b49\uff0c01\u5b57\u5178\u6811\u6700\u5e38\u7528\u7684\u5c31\u662f\u5bf9xor\u6c42\u6700\u5927\u503c\u7684\u8ba1\u7b97","title":"\u4e03\u3001Trie\u6811\u7684\u884d\u751f01-Trie"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/Trie%E6%A0%91/#71-01","text":"\u4f8b\u9898\uff1a Xor Sum C++ #include <cstring> #include <algorithm> #include <cstdio> using namespace std ; #define ll long long const int N = 1e5 + 10 ; int n , m ; struct Trie { ll nextt [ N * 32 ][ 2 ]; ll exit [ N * 32 ]; ll cnt = 0 ; void init () { memset ( nextt , 0 , sizeof nextt ); memset ( exit , 0 , sizeof exit ); cnt = 0 ; } void insert ( ll k ) { ll p = 0 ; for ( int i = 32 ; i >= 0 ; -- i ) { ll c = ( k >> i ) & 1 ; if ( ! nextt [ p ][ c ]) nextt [ p ][ c ] = ++ cnt ; p = nextt [ p ][ c ]; } exit [ p ] = k ; } ll find ( ll k ) { ll p = 0 ; for ( int i = 32 ; i >= 0 ; -- i ) { ll c = ( k >> i ) & 1 ; if ( nextt [ p ][ c ^ 1 ]) p = nextt [ p ][ c ^ 1 ]; else p = nextt [ p ][ c ]; } return exit [ p ]; } } T ; int main () { int t ; scanf ( \"%d\" , & t ); for ( int j = 1 ; j <= t ; ++ j ) { scanf ( \"%d%d\" , & n , & m ); ll k ; T . init (); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%lld\" , & k ); T . insert ( k ); } printf ( \"Case #%d: \\n \" , j ); while ( m -- ) { scanf ( \"%lld\" , & k ); printf ( \"%lld \\n \" , T . find ( k )); } } return 0 ; }","title":"7.1 01\u5b57\u5178\u6811\u7684\u4ee3\u7801\u6a21\u677f"},{"location":"%E5%AD%97%E7%AC%A6%E4%B8%B2/Trie%E6%A0%91/#_3","text":"\u9898\u76ee \u9898\u76ee\u8fde\u63a5 Babelfish http://poj.org/problem?id=2503 Phone List https://acm.hdu.edu.cn/showproblem.php?pid=1671 Xor Sum https://acm.hdu.edu.cn/showproblem.php?pid=4825 What Are You Talking About https://acm.hdu.edu.cn/showproblem.php?pid=1075 Beautiful Subarrays http://codeforces.com/problemset/problem/665/E \u7b2c\u516b\u96c6 \u4f60\u660e\u660e\u81ea\u5df1\u4e5f\u751f\u75c5\u4e86\uff0c\u5374\u8fd8\u662f\u8981\u966a\u7740\u6211 http://120.78.128.11/Problem.jsp?pid=1928 P2580 \u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86 https://www.luogu.com.cn/problem/P2580 Chip Factory https://www.luogu.com.cn/problem/U109897 Nikitosh and xor https://www.luogu.com.cn/problem/U109923 \u6700\u957f\u5f02\u6216\u8def\u5f84 https://www.luogu.com.cn/problem/P4551 \u9605\u8bfb\u7406\u89e3 https://www.luogu.com.cn/problem/P3879","title":"\u516b\u3001\u7ec3\u4e60\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88/","text":"\u5355\u8c03\u6808 \u00b6 \u524d\u8a00 \u00b6 \u914d\u5957\u89c6\u9891\uff1a www.bilibili.com/video/BV1KX4y1w7um \u4e00\u3001\u5355\u8c03\u6808\u7b80\u4ecb \u00b6 \u987e\u540d\u601d\u4e49\uff0c\u5355\u8c03\u6808\u5373\u6ee1\u8db3\u5355\u8c03\u6027\u7684\u6808\u7ed3\u6784\u3002\u8fd9\u91cc\u7684\u5355\u8c03\u9012\u589e\u6216\u9012\u51cf\u662f\u6307\u7684\u4ece\u6808\u9876\u5230\u6808\u5e95\u5355\u8c03\u9012\u589e\u6216\u9012\u51cf\u3002\u65e2\u7136\u662f\u6808\uff0c\u5c31\u6ee1\u8db3\u540e\u8fdb\u5148\u51fa\u7684\u7279\u70b9\u3002\u4e0e\u4e4b\u76f8\u5bf9\u5e94\u7684\u662f\u5355\u8c03\u961f\u5217\u3002 \u4e8c\u3001\u5355\u8c03\u6808\u7684\u5b9e\u73b0 \u00b6 2.1\u63d2\u5165 \u00b6 \u5728\u5f53\u524d\u5143\u7d20\u63d2\u5165\u6808\u91cc\u65f6\u548c\u6808\u9876\u5143\u7d20\u505a\u5bf9\u6bd4\uff0c\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u662f\u5426\u63d2\u5165 2.2\u4f7f\u7528 \u00b6 \u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u5355\u8c03\u6808\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e9b\u4e2d\u95f4\u503c\u7b49\u7b49\u4fe1\u606f 2.3\u4e3e\u4f8b \u00b6 \u73b0\u5728\u6709\u4e00\u7ec4\u657010\uff0c3\uff0c7\uff0c4\uff0c12\u3002\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u5165\u6808\uff0c\u5219\u5982\u679c**\u6808\u4e3a\u7a7a**\u6216**\u5165\u6808\u5143\u7d20\u503c\u5c0f\u4e8e\u6808\u9876\u5143\u7d20\u503c**\uff0c\u5219\u5165\u6808\uff1b\u5426\u5219\uff0c\u5982\u679c\u5165\u6808\u5219\u4f1a\u7834\u574f\u6808\u7684\u5355\u8c03\u6027\uff0c\u5219\u9700\u8981\u628a\u6bd4\u5165\u6808\u5143\u7d20\u5c0f\u7684\u5143\u7d20\u5168\u90e8\u51fa\u6808\u3002\u5355\u8c03\u9012\u51cf\u7684\u6808\u53cd\u4e4b\u3002 \u2460 10\u5165\u6808\u65f6\uff0c\u6808\u4e3a\u7a7a\uff0c\u76f4\u63a5\u5165\u6808\uff0c\u6808\u5185\u5143\u7d20\u4e3a10\u3002 \u2461 3\u5165\u6808\u65f6\uff0c\u6808\u9876\u5143\u7d2010\u6bd43\u5927\uff0c\u5219\u5165\u6808\uff0c\u6808\u5185\u5143\u7d20\u4e3a10\uff0c3 \u2462 7\u5165\u6808\u65f6\uff0c\u6808\u9876\u5143\u7d203\u6bd47\u5c0f\uff0c\u5219\u6808\u9876\u5143\u7d20\u51fa\u6808\uff0c\u6b64\u65f6\u6808\u9876\u5143\u7d20\u4e3a10\uff0c\u6bd47\u5927\uff0c\u52197\u5165\u6808\uff0c\u6808\u5185\u5143\u7d20\u4e3a10\uff0c7\u3002 \u2463 4\u5165\u6808\u65f6\uff0c\u6808\u9876\u5143\u7d207\u6bd44\u5927\uff0c\u5219\u5165\u6808\uff0c\u6808\u5185\u5143\u7d20\u4e3a10\uff0c7\uff0c4\u3002 \u2464 12\u5165\u6808\u65f6\uff0c\u6808\u9876\u5143\u7d204\u6bd412\u5c0f\uff0c4\u51fa\u6808\uff0c\u6b64\u65f6\u6808\u9876\u5143\u7d20\u4e3a7\uff0c\u4ecd\u6bd412\u5c0f\uff0c\u6808\u9876\u5143\u7d207\u7ee7\u7eed\u51fa\u6808\uff0c\u6b64\u65f6\u6808\u9876\u5143\u7d20\u4e3a10\uff0c\u4ecd\u6bd412\u5c0f\uff0c10\u51fa\u6808\uff0c\u6b64\u65f6\u6808\u4e3a\u7a7a\uff0c12\u5165\u6808\uff0c\u6808\u5185\u5143\u7d20\u4e3a12\u3002 \u4e09\u3001\u5e94\u7528 \u00b6 3.1\u7b2c\u4e00\u79cd\u5e94\u7528 \u00b6 \u7ed9\u4e00\u4e2a\u6570\u5217\uff0c\u7136\u540e\u95ee\u4f60\u8fd9\u4e2a\u6570\u5217\u6bcf\u4e00\u4e2a\u5143\u7d20\u53f3\u8fb9(\u6216\u8005\u5de6\u8fb9)\u7b2c\u4e00\u4e2a\u5927\u4e8e(\u6216\u5c0f\u4e8e)\u8be5\u5143\u7d20\u7684\u4f4d\u7f6e 3.2\u7b2c\u4e8c\u79cd\u5e94\u7528 \u00b6 \u7ed9\u4e00\u4e2a\u6570\u5217\uff0c\u5bfb\u627e\u5176\u4e2d\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\u6ee1\u8db3\u5b50\u5e8f\u5217\u7684\u6700\u5c0f\u503c\u548c\u5e8f\u5217\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u6700\u5927 3.3\u7b2c\u4e09\u79cd\u5e94\u7528 \u00b6 \u7ed9\u4e00\u4e2a\u6570\u5217\uff0c\u5bfb\u627e\u4e00\u4e2a\u5b50\u5e8f\u5217\u7684\u6700\u5c0f\u503c\u548c\u5b50\u5e8f\u5217\u7684\u6240\u6709\u5143\u7d20\u548c\u7684\u79ef\u6700\u5927 \u56db\u3001\u4ee3\u7801\u5b9e\u73b0 \u00b6 \u4ee5\u6d1b\u8c37P5788\u4e3a\u4f8b C++ #include <bits/stdc++.h> using namespace std ; const int N = 3e6 + 10 ; int a [ N ]; int f [ N ], n ; stack < int > S ; int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } for ( int i = 1 ; i <= n ; ++ i ) { while ( S . size () && a [ i ] > a [ S . top ()]) { f [ S . top ()] = i ; S . pop (); } S . push ( i ); } for ( int i = 1 ; i <= n ; ++ i ) { printf ( \"%d%c\" , f [ i ], i == n ? '\\n' : ' ' ); } return 0 ; } \u4e94\u3001\u9644\u4e0a\u7ec3\u4e60\u9898 \u00b6 \u9898\u76ee\u8fde\u63a5 \u9898\u76ee\u540d https://www.luogu.com.cn/problem/P5788 P5788 \u3010\u6a21\u677f\u3011\u5355\u8c03\u6808 http://poj.org/problem?id=3250 Bad Hair Day http://acm.mangata.ltd/p/P1450 \u7b2c\u4e5d\u96c6\uff0c\u79bb\u95f4\u8ba1 http://acm.mangata.ltd/p/P1443 Largest Rectangle in a Histogram http://poj.org/problem?id=3494 Largest Submatrix of All 1\u2019s http://poj.org/problem?id=2796 Feel Good","title":"\u5355\u8c03\u6808"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88/#_1","text":"","title":"\u5355\u8c03\u6808"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88/#_2","text":"\u914d\u5957\u89c6\u9891\uff1a www.bilibili.com/video/BV1KX4y1w7um","title":"\u524d\u8a00"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88/#_3","text":"\u987e\u540d\u601d\u4e49\uff0c\u5355\u8c03\u6808\u5373\u6ee1\u8db3\u5355\u8c03\u6027\u7684\u6808\u7ed3\u6784\u3002\u8fd9\u91cc\u7684\u5355\u8c03\u9012\u589e\u6216\u9012\u51cf\u662f\u6307\u7684\u4ece\u6808\u9876\u5230\u6808\u5e95\u5355\u8c03\u9012\u589e\u6216\u9012\u51cf\u3002\u65e2\u7136\u662f\u6808\uff0c\u5c31\u6ee1\u8db3\u540e\u8fdb\u5148\u51fa\u7684\u7279\u70b9\u3002\u4e0e\u4e4b\u76f8\u5bf9\u5e94\u7684\u662f\u5355\u8c03\u961f\u5217\u3002","title":"\u4e00\u3001\u5355\u8c03\u6808\u7b80\u4ecb"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88/#_4","text":"","title":"\u4e8c\u3001\u5355\u8c03\u6808\u7684\u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88/#21","text":"\u5728\u5f53\u524d\u5143\u7d20\u63d2\u5165\u6808\u91cc\u65f6\u548c\u6808\u9876\u5143\u7d20\u505a\u5bf9\u6bd4\uff0c\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u662f\u5426\u63d2\u5165","title":"2.1\u63d2\u5165"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88/#22","text":"\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u5355\u8c03\u6808\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e9b\u4e2d\u95f4\u503c\u7b49\u7b49\u4fe1\u606f","title":"2.2\u4f7f\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88/#23","text":"\u73b0\u5728\u6709\u4e00\u7ec4\u657010\uff0c3\uff0c7\uff0c4\uff0c12\u3002\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u5165\u6808\uff0c\u5219\u5982\u679c**\u6808\u4e3a\u7a7a**\u6216**\u5165\u6808\u5143\u7d20\u503c\u5c0f\u4e8e\u6808\u9876\u5143\u7d20\u503c**\uff0c\u5219\u5165\u6808\uff1b\u5426\u5219\uff0c\u5982\u679c\u5165\u6808\u5219\u4f1a\u7834\u574f\u6808\u7684\u5355\u8c03\u6027\uff0c\u5219\u9700\u8981\u628a\u6bd4\u5165\u6808\u5143\u7d20\u5c0f\u7684\u5143\u7d20\u5168\u90e8\u51fa\u6808\u3002\u5355\u8c03\u9012\u51cf\u7684\u6808\u53cd\u4e4b\u3002 \u2460 10\u5165\u6808\u65f6\uff0c\u6808\u4e3a\u7a7a\uff0c\u76f4\u63a5\u5165\u6808\uff0c\u6808\u5185\u5143\u7d20\u4e3a10\u3002 \u2461 3\u5165\u6808\u65f6\uff0c\u6808\u9876\u5143\u7d2010\u6bd43\u5927\uff0c\u5219\u5165\u6808\uff0c\u6808\u5185\u5143\u7d20\u4e3a10\uff0c3 \u2462 7\u5165\u6808\u65f6\uff0c\u6808\u9876\u5143\u7d203\u6bd47\u5c0f\uff0c\u5219\u6808\u9876\u5143\u7d20\u51fa\u6808\uff0c\u6b64\u65f6\u6808\u9876\u5143\u7d20\u4e3a10\uff0c\u6bd47\u5927\uff0c\u52197\u5165\u6808\uff0c\u6808\u5185\u5143\u7d20\u4e3a10\uff0c7\u3002 \u2463 4\u5165\u6808\u65f6\uff0c\u6808\u9876\u5143\u7d207\u6bd44\u5927\uff0c\u5219\u5165\u6808\uff0c\u6808\u5185\u5143\u7d20\u4e3a10\uff0c7\uff0c4\u3002 \u2464 12\u5165\u6808\u65f6\uff0c\u6808\u9876\u5143\u7d204\u6bd412\u5c0f\uff0c4\u51fa\u6808\uff0c\u6b64\u65f6\u6808\u9876\u5143\u7d20\u4e3a7\uff0c\u4ecd\u6bd412\u5c0f\uff0c\u6808\u9876\u5143\u7d207\u7ee7\u7eed\u51fa\u6808\uff0c\u6b64\u65f6\u6808\u9876\u5143\u7d20\u4e3a10\uff0c\u4ecd\u6bd412\u5c0f\uff0c10\u51fa\u6808\uff0c\u6b64\u65f6\u6808\u4e3a\u7a7a\uff0c12\u5165\u6808\uff0c\u6808\u5185\u5143\u7d20\u4e3a12\u3002","title":"2.3\u4e3e\u4f8b"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88/#_5","text":"","title":"\u4e09\u3001\u5e94\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88/#31","text":"\u7ed9\u4e00\u4e2a\u6570\u5217\uff0c\u7136\u540e\u95ee\u4f60\u8fd9\u4e2a\u6570\u5217\u6bcf\u4e00\u4e2a\u5143\u7d20\u53f3\u8fb9(\u6216\u8005\u5de6\u8fb9)\u7b2c\u4e00\u4e2a\u5927\u4e8e(\u6216\u5c0f\u4e8e)\u8be5\u5143\u7d20\u7684\u4f4d\u7f6e","title":"3.1\u7b2c\u4e00\u79cd\u5e94\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88/#32","text":"\u7ed9\u4e00\u4e2a\u6570\u5217\uff0c\u5bfb\u627e\u5176\u4e2d\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\u6ee1\u8db3\u5b50\u5e8f\u5217\u7684\u6700\u5c0f\u503c\u548c\u5e8f\u5217\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u6700\u5927","title":"3.2\u7b2c\u4e8c\u79cd\u5e94\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88/#33","text":"\u7ed9\u4e00\u4e2a\u6570\u5217\uff0c\u5bfb\u627e\u4e00\u4e2a\u5b50\u5e8f\u5217\u7684\u6700\u5c0f\u503c\u548c\u5b50\u5e8f\u5217\u7684\u6240\u6709\u5143\u7d20\u548c\u7684\u79ef\u6700\u5927","title":"3.3\u7b2c\u4e09\u79cd\u5e94\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88/#_6","text":"\u4ee5\u6d1b\u8c37P5788\u4e3a\u4f8b C++ #include <bits/stdc++.h> using namespace std ; const int N = 3e6 + 10 ; int a [ N ]; int f [ N ], n ; stack < int > S ; int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } for ( int i = 1 ; i <= n ; ++ i ) { while ( S . size () && a [ i ] > a [ S . top ()]) { f [ S . top ()] = i ; S . pop (); } S . push ( i ); } for ( int i = 1 ; i <= n ; ++ i ) { printf ( \"%d%c\" , f [ i ], i == n ? '\\n' : ' ' ); } return 0 ; }","title":"\u56db\u3001\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88/#_7","text":"\u9898\u76ee\u8fde\u63a5 \u9898\u76ee\u540d https://www.luogu.com.cn/problem/P5788 P5788 \u3010\u6a21\u677f\u3011\u5355\u8c03\u6808 http://poj.org/problem?id=3250 Bad Hair Day http://acm.mangata.ltd/p/P1450 \u7b2c\u4e5d\u96c6\uff0c\u79bb\u95f4\u8ba1 http://acm.mangata.ltd/p/P1443 Largest Rectangle in a Histogram http://poj.org/problem?id=3494 Largest Submatrix of All 1\u2019s http://poj.org/problem?id=2796 Feel Good","title":"\u4e94\u3001\u9644\u4e0a\u7ec3\u4e60\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/","text":"\u5e76\u67e5\u96c6 \u00b6 \u524d\u8a00 \u00b6 \u914d\u5957\u89c6\u9891 \u65b0\u7248\u672c\uff1a www.bilibili.com/video/BV1w44y1j7R1 \u65e7\u7248\u672c\uff1a www.bilibili.com/video/BV1Uy4y1M7VM \u4e00\u3001\u5e76\u67e5\u96c6\u7b80\u4ecb \u00b6 \u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u6811\u5f62\u7684\u6570\u636e\u7ed3\u6784\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5b83\u7528\u4e8e\u5904\u7406\u4e00\u4e9b\u4e0d\u4ea4\u96c6\u7684 \u5408\u5e76 \u53ca \u67e5\u8be2 \u95ee\u9898\u3002 \u5b83\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a 1.\u67e5\u627e\uff08find\uff09\uff1a\u786e\u5b9a\u67d0\u4e2a\u5143\u7d20\u5904\u4e8e\u54ea\u4e2a\u5b50\u96c6 2.\u5408\u5e76\uff08merge\uff09\uff1a\u5c06\u4e24\u4e2a\u5b50\u96c6\u5408\u5e76\u6210\u4e00\u4e2a\u96c6\u5408 \u5e76\u67e5\u96c6\u80fd\u65b9\u4fbf\u5e76\u6709\u6548\u7684\u5904\u7406\u5143\u7d20\u548c\u5143\u7d20\u4e4b\u95f4\u7684\u5206\u7c7b\u5173\u7cfb \u4e8c\u3001\u521d\u59cb\u5316 \u00b6 C++ void init ( int n ) { for ( int i = 1 ; i <= n ; ++ i ) fa [ i ] = i ; } \u5148\u8ba9\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u7236\u4eb2\u5143\u7d20\u7b49\u4e8e\u81ea\u5df1 \u4e09\u3001\u67e5\u627e \u00b6 \u5f15\u7528\u4e00\u4e2a\u5c0f\u6545\u4e8b\uff1a\u51e0\u4e2a\u5bb6\u65cf\u8fdb\u884c\u5bb4\u4f1a\uff0c\u4f46\u662f\u5bb6\u65cf\u666e\u904d\u957f\u5bff\uff0c\u6240\u4ee5\u4eba\u6570\u4f17\u591a\u3002\u7531\u4e8e\u957f\u65f6\u95f4\u7684\u5206\u79bb\u4ee5\u53ca\u5e74\u9f84\u7684\u589e\u957f\uff0c\u8fd9\u4e9b\u4eba\u9010\u6e10\u5fd8\u6389\u4e86\u81ea\u5df1\u7684\u4eb2\u4eba\uff0c\u53ea\u8bb0\u5f97\u81ea\u5df1\u7684\u7238\u7238\u662f\u8c01\u4e86\uff0c\u800c\u6700\u957f\u8005\uff08\u79f0\u4e3a\u300c\u7956\u5148\u300d\uff09\u7684\u7236\u4eb2\u5df2\u7ecf\u53bb\u4e16\uff0c\u4ed6\u53ea\u77e5\u9053\u81ea\u5df1\u662f\u7956\u5148\u3002\u4e3a\u4e86\u786e\u5b9a\u81ea\u5df1\u662f\u54ea\u4e2a\u5bb6\u65cf\uff0c\u4ed6\u4eec\u60f3\u51fa\u4e86\u4e00\u4e2a\u529e\u6cd5\uff0c\u53ea\u8981\u95ee\u81ea\u5df1\u7684\u7238\u7238\u662f\u4e0d\u662f\u7956\u5148\uff0c\u4e00\u5c42\u4e00\u5c42\u7684\u5411\u4e0a\u95ee\uff0c\u76f4\u5230\u95ee\u5230\u7956\u5148\u3002\u5982\u679c\u8981\u5224\u65ad\u4e24\u4eba\u662f\u5426\u5728\u540c\u4e00\u5bb6\u65cf\uff0c\u53ea\u8981\u770b\u4e24\u4eba\u7684\u7956\u5148\u662f\u4e0d\u662f\u540c\u4e00\u4eba\u5c31\u53ef\u4ee5\u4e86\u3002 \u8fd9\u5c31\u662f\u5e76\u67e5\u96c6\u7684\u601d\u60f3\uff0c\u6211\u4eec\u53ea\u7528\u8bb0\u5f55\u5f53\u524d\u5143\u7d20\u7684\u7236\u5143\u7d20\u662f\u8c01\uff0c\u6bcf\u5f53\u9700\u8981\u5224\u65ad\u662f\u5426\u4e00\u7c7b\u65f6\uff0c\u901a\u8fc7\u5bfb\u627e\u8be5\u5143\u7d20\u7684\u7956\u5148\u5143\u7d20\u5373\u53ef\u533a\u5206 \u5b9e\u73b0\u4ee3\u7801\uff1a \u975e\u9012\u5f52\u5f0f C++ int find ( int x ) { whille ( x != fa [ x ]) x = fa [ x ]; return x ; } \u9012\u5f52\u5f0f C++ int find ( int x ) { if ( x == fa [ x ]) return x ; //\u5982\u679cx\u7684\u7236\u4eb2\u5c31\u662fx\u90a3\u4e48\u5c31\u662f\u627e\u5230\u4e86x\u7684\u7956\u5148\u8282\u70b9 return find ( x ); //\u9012\u5f52\u8fd4\u56de } \u56db\u3001\u8def\u5f84\u538b\u7f29 \u00b6 \u8def\u5f84\u538b\u7f29\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u63d0\u9ad8\u67e5\u627e\u6548\u7387\uff0c\u5927\u5bb6\u4e0d\u96be\u60f3\u5230\u5f53\u8fd9\u4e2a\u5e76\u67e5\u96c6\u6811\u9000\u5316\u6210\u4e86\u4e00\u6761\u94fe\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u67e5\u8be2\u90fd\u9700\u8981\u904d\u5386\u6574\u4e2a\u94fe\uff0c\u8fd9\u6837\u5341\u5206\u7684\u8d39\u65f6\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8def\u5f84\u538b\u7f29\u7684\u65b9\u5f0f\u5bf9\u8fd9\u4e2a\u6811\u5f62\u7ed3\u6784\u8fdb\u884c\u4f18\u5316\uff0c\u4e5f\u5c31\u662f\u5c06\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u76f4\u63a5\u53d8\u6210\u6839\u8282\u70b9\u4e5f\u5c31\u662f\u7956\u5148\u8282\u70b9\u3002 \u5077\u4e24\u5f20\u56fe\uff1a \u5b9e\u73b0\u4ee3\u7801\uff1a \u975e\u9012\u5f52\u5b9e\u73b0\uff1a C++ int find ( int x ) { int t = x ; while ( t != fa [ t ]) t = fa [ t ]; //\u76f4\u63a5\u67e5\u627ex\u7684\u7956\u5148\u8282\u70b9 while ( x != fa [ x ]) { int temp = fa [ x ]; fa [ x ] = t ; //\u4ece\u4e0b\u5230\u4e0a\u66f4\u65b0fa[x]\u7684\u503c\u4e3ax\u7684\u7956\u5148\u8282\u70b9\u7684\u503c x = temp ; } return x ; } \u9012\u5f52\u5b9e\u73b0\uff1a C++ int find ( int x ) { if ( x != fa [ x ]) fa [ x ] = find ( x ); //\u5982\u679cx\u4e0d\u662f\u81ea\u5df1\u7684\u7236\u4eb2\u8282\u70b9\u90a3\u4e48\u5c31\u627e\u5230x\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u4e00\u8def\u4e0a\u8def\u5f84\u538b\u7f29 return fa [ x ]; } \u4e94\u3001\u5408\u5e76 \u00b6 \u63a5\u7740\u4e0a\u9762\u7684\u6545\u4e8b\uff0c\u5982\u679c\u8bf4\u6709\u4e24\u4e2a\u5bb6\u65cf\u7a81\u7136\u4ea4\u597d\uff0c\u4ed6\u4eec\u7684\u5173\u7cfb\u60f3\u5408\u5728\u4e00\u8d77\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\uff0c\u8ba9\u4e00\u8fb9\u7684\u7956\u5148\u53d8\u6210\u53e6\u4e00\u4e2a\u7956\u5148\u7684\u7236\u8282\u70b9\u5373\u53ef \u4ee3\u7801\u5b9e\u73b0: C++ void merge ( int a , int b ) { a = find ( a ); b = find ( b ); if ( a != b ) fa [ b ] = a ; //\u5982\u679c\u4e24\u4e2a\u5143\u7d20\u4e0d\u76f8\u7b49\u5c31\u8ba9\u4e00\u4e2a\u5143\u7d20\u6210\u4e3a\u53e6\u4e00\u4e2a\u5143\u7d20\u7684\u7236\u8282\u70b9 } 5.1\u6309\u79e9\u5408\u5e76(\u4e86\u89e3) \u00b6 \u6309\u79e9\u5408\u5e76\u4e5f\u6210\u4e3a\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5176\u7528\u9014\u662f\u7528\u5728\u4e24\u4e2a\u96c6\u5408\u7684\u5408\u5e76\u64cd\u4f5c\uff0c\u5f53\u4e24\u4e2a\u96c6\u5408\u5408\u5e76\u7684\u65f6\u5019\uff0c\u4f18\u5148\u9009\u62e9\u96c6\u5408\u6570\u5c11\u7684\u5143\u7d20\u878d\u5165\u96c6\u5408\u5143\u7d20\u591a\u7684\u91cc\u9762\uff0c\u5c3d\u7ba1\u65e0\u8bba\u54ea\u79cd\u8fde\u63a5\u90fd\u80fd\u83b7\u53d6\u6b63\u786e\u7684\u7b54\u6848\uff0c\u4f46\u662f\u4e0d\u540c\u7684\u8fde\u63a5\u65b9\u5f0f\u53ef\u80fd\u4f1a\u9020\u6210\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u9762\u7684\u5dee\u8ddd\uff0c\u4e00\u822c\u6765\u8bf4\u4e00\u9897\u5c0f\u6811\u8fde\u63a5\u5230\u4e00\u9897\u5927\u6811\u4e0a\u9762\u4f1a\u5feb\u4e00\u70b9\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u4e0d\u603b\u80fd\u9047\u5230\u6070\u597d\u5982\u4e0a\u6240\u8ff0\u7684\u96c6\u5408\u2014\u2014\u2014\u2014\u70b9\u6570\u4e0e\u6df1\u5ea6\u90fd\u66f4\u5c0f\u3002\u9274\u4e8e\u70b9\u6570\u4e0e\u6df1\u5ea6\u8fd9\u4e24\u4e2a\u7279\u5f81\u90fd\u5f88\u5bb9\u6613\u7ef4\u62a4\uff0c\u6211\u4eec\u5e38\u5e38\u4ece\u4e2d\u62e9\u4e00\uff0c\u4f5c\u4e3a\u4f30\u4ef7\u51fd\u6570\u3002\u800c\u65e0\u8bba\u9009\u62e9\u54ea\u4e00\u4e2a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3a O(m\u03b1(m,n))O(m\u03b1(m,n))\uff0c\u5177\u4f53\u7684\u8bc1\u660e\u53ef\u53c2\u89c1 References \u4e2d\u5f15\u7528\u7684\u8bba\u6587\u3002 \u5728\u7b97\u6cd5\u7ade\u8d5b\u7684\u5b9e\u9645\u4ee3\u7801\u4e2d\uff0c\u5373\u4fbf\u4e0d\u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u4ee3\u7801\u4e5f\u5f80\u5f80\u80fd\u591f\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u5b8c\u6210\u4efb\u52a1\u3002\u5728 Tarjan \u7684\u8bba\u6587[1]\u4e2d\uff0c\u8bc1\u660e\u4e86\u4e0d\u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u3001\u53ea\u4f7f\u7528\u8def\u5f84\u538b\u7f29\u7684\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(mlogn)O(mlog\u2061n)\u3002\u5728\u59da\u671f\u667a\u7684\u8bba\u6587[2]\u4e2d\uff0c\u8bc1\u660e\u4e86\u4e0d\u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u3001\u53ea\u4f7f\u7528\u8def\u5f84\u538b\u7f29\uff0c\u5728\u5e73\u5747\u60c5\u51b5\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4f9d\u7136\u662f O(m\u03b1(m,n))O(m\u03b1(m,n))\u3002 \u5982\u679c\u53ea\u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u800c\u4e0d\u4f7f\u7528\u8def\u5f84\u538b\u7f29\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(mlogn)O(mlog\u2061n)\u3002\u7531\u4e8e\u8def\u5f84\u538b\u7f29\u5355\u6b21\u5408\u5e76\u53ef\u80fd\u9020\u6210\u5927\u91cf\u4fee\u6539\uff0c\u6709\u65f6\u8def\u5f84\u538b\u7f29\u5e76\u4e0d\u9002\u5408\u4f7f\u7528\u3002\u4f8b\u5982\uff0c\u5728\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u3001\u7ebf\u6bb5\u6811\u5206\u6cbb + \u5e76\u67e5\u96c6\u4e2d\uff0c\u4e00\u822c\u4f7f\u7528\u53ea\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u5e76\u67e5\u96c6\u3002 \u516d\u3001\u5e76\u67e5\u96c6\u62d3\u5c55 \u00b6 \u5173\u4e8e\u5e76\u67e5\u96c6\u7684\u62d3\u5c55\u5634\u7ecf\u5178\u7684\u8fd8\u662f\u5c5e\u4e8e**\u79cd\u7c7b\u5e76\u67e5\u96c6**\u4ee5\u53ca**\u5e26\u6743\u5e76\u67e5\u96c6** \u5173\u4e8e\u79cd\u7c7b\u5e76\u67e5\u96c6\u4e5f\u5c31\u662f\u8981\u7ef4\u62a4\u591a\u4e2a\u5173\u7cfb\u7684\u5e76\u67e5\u96c6\uff0c\u901a\u5e38\u7684\u5e76\u67e5\u96c6\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u540c\u4e00\u7c7b\u96c6\u5408\u7684\u5173\u7cfb\uff0c\u4f46\u662f\u79cd\u7c7b\u5e76\u67e5\u96c6\u5c31\u53ef\u80fd\u7ef4\u62a4\u4e24\u79cd\u3001\u4e09\u79cd\u751a\u81f3\u66f4\u591a\u7684\u5173\u7cfb \u79cd\u7c7b\u5e76\u67e5\u96c6\u6700\u7ecf\u5178\u7684\u5c31\u662f\u98df\u7269\u94fe\u548c\u72af\u7f6a\u56e2\u4f19 \u5173\u4e8e\u5e26\u6743\u5e76\u67e5\u96c6\u5c31\u662f\u8981\u5728\u8bb0\u5f55\u8282\u70b9\u7684\u8fc7\u7a0b\u4e2d\u6bcf\u4e2a\u8282\u70b9\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u6743\u503c\uff0c\u6211\u4eec\u5728\u89e3\u9898\u8fc7\u7a0b\u4e2d\u9700\u8981\u5bf9\u8fd9\u4e2a\u6743\u503c\u505a\u4e00\u4e9b\u5904\u7406\u7136\u540e\u6765\u89e3\u51b3\u9898\u76ee\u7684\u95ee\u9898 \u4e03\u3001\u7ec3\u4e60\u9898\u76ee \u00b6 \u9898\u76ee\u8fde\u63a5 \u9898\u76ee\u540d https://www.luogu.com.cn/problem/P1551 P1551 \u4eb2\u621a https://www.luogu.com.cn/problem/P1536 P1536 \u6751\u6751\u901a https://www.luogu.com.cn/problem/P1525 P1525 [NOIP2010 \u63d0\u9ad8\u7ec4] \u5173\u62bc\u7f6a\u72af\uff08\u79cd\u7c7b\u5e76\u67e5\u96c6\uff09 https://www.luogu.com.cn/problem/P1621 P1621 \u96c6\u5408 https://www.luogu.com.cn/problem/P1892 P1892 [BOI2003]\u56e2\u4f19 https://www.luogu.com.cn/problem/P1955 P1955 [NOI2015] \u7a0b\u5e8f\u81ea\u52a8\u5206\u6790(\u8fd9\u4e2a\u6709\u8da3) https://www.luogu.com.cn/problem/P2814 P2814 \u5bb6\u8c31(\u8fd9\u4e2a\u7b80\u5355\uff0c\u4e0d\u8fc7\u5b57\u7b26\u4e32\u5904\u7406\u4e00\u4e0b) https://vjudge.net/contest/445444 \u8fd9\u4e2a\u5e76\u67e5\u96c6\u9898\u5355\u8fd8\u662f\u633a\u6709\u8da3\u7684 http://acm.hdu.edu.cn/showproblem.php?pid=3038 How Many Answers Are Wrong\uff08\u8fd9\u662f\u4e00\u4e2a\u5e26\u6743\u5e76\u67e5\u96c6\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u8bd5\u8bd5\uff09 \u8fd9\u4e2a\u9898\u76ee\u4eba\u57477\u9898\u5427","title":"\u5e76\u67e5\u96c6"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_1","text":"","title":"\u5e76\u67e5\u96c6"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_2","text":"\u914d\u5957\u89c6\u9891 \u65b0\u7248\u672c\uff1a www.bilibili.com/video/BV1w44y1j7R1 \u65e7\u7248\u672c\uff1a www.bilibili.com/video/BV1Uy4y1M7VM","title":"\u524d\u8a00"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_3","text":"\u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u6811\u5f62\u7684\u6570\u636e\u7ed3\u6784\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5b83\u7528\u4e8e\u5904\u7406\u4e00\u4e9b\u4e0d\u4ea4\u96c6\u7684 \u5408\u5e76 \u53ca \u67e5\u8be2 \u95ee\u9898\u3002 \u5b83\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a 1.\u67e5\u627e\uff08find\uff09\uff1a\u786e\u5b9a\u67d0\u4e2a\u5143\u7d20\u5904\u4e8e\u54ea\u4e2a\u5b50\u96c6 2.\u5408\u5e76\uff08merge\uff09\uff1a\u5c06\u4e24\u4e2a\u5b50\u96c6\u5408\u5e76\u6210\u4e00\u4e2a\u96c6\u5408 \u5e76\u67e5\u96c6\u80fd\u65b9\u4fbf\u5e76\u6709\u6548\u7684\u5904\u7406\u5143\u7d20\u548c\u5143\u7d20\u4e4b\u95f4\u7684\u5206\u7c7b\u5173\u7cfb","title":"\u4e00\u3001\u5e76\u67e5\u96c6\u7b80\u4ecb"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_4","text":"C++ void init ( int n ) { for ( int i = 1 ; i <= n ; ++ i ) fa [ i ] = i ; } \u5148\u8ba9\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u7236\u4eb2\u5143\u7d20\u7b49\u4e8e\u81ea\u5df1","title":"\u4e8c\u3001\u521d\u59cb\u5316"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_5","text":"\u5f15\u7528\u4e00\u4e2a\u5c0f\u6545\u4e8b\uff1a\u51e0\u4e2a\u5bb6\u65cf\u8fdb\u884c\u5bb4\u4f1a\uff0c\u4f46\u662f\u5bb6\u65cf\u666e\u904d\u957f\u5bff\uff0c\u6240\u4ee5\u4eba\u6570\u4f17\u591a\u3002\u7531\u4e8e\u957f\u65f6\u95f4\u7684\u5206\u79bb\u4ee5\u53ca\u5e74\u9f84\u7684\u589e\u957f\uff0c\u8fd9\u4e9b\u4eba\u9010\u6e10\u5fd8\u6389\u4e86\u81ea\u5df1\u7684\u4eb2\u4eba\uff0c\u53ea\u8bb0\u5f97\u81ea\u5df1\u7684\u7238\u7238\u662f\u8c01\u4e86\uff0c\u800c\u6700\u957f\u8005\uff08\u79f0\u4e3a\u300c\u7956\u5148\u300d\uff09\u7684\u7236\u4eb2\u5df2\u7ecf\u53bb\u4e16\uff0c\u4ed6\u53ea\u77e5\u9053\u81ea\u5df1\u662f\u7956\u5148\u3002\u4e3a\u4e86\u786e\u5b9a\u81ea\u5df1\u662f\u54ea\u4e2a\u5bb6\u65cf\uff0c\u4ed6\u4eec\u60f3\u51fa\u4e86\u4e00\u4e2a\u529e\u6cd5\uff0c\u53ea\u8981\u95ee\u81ea\u5df1\u7684\u7238\u7238\u662f\u4e0d\u662f\u7956\u5148\uff0c\u4e00\u5c42\u4e00\u5c42\u7684\u5411\u4e0a\u95ee\uff0c\u76f4\u5230\u95ee\u5230\u7956\u5148\u3002\u5982\u679c\u8981\u5224\u65ad\u4e24\u4eba\u662f\u5426\u5728\u540c\u4e00\u5bb6\u65cf\uff0c\u53ea\u8981\u770b\u4e24\u4eba\u7684\u7956\u5148\u662f\u4e0d\u662f\u540c\u4e00\u4eba\u5c31\u53ef\u4ee5\u4e86\u3002 \u8fd9\u5c31\u662f\u5e76\u67e5\u96c6\u7684\u601d\u60f3\uff0c\u6211\u4eec\u53ea\u7528\u8bb0\u5f55\u5f53\u524d\u5143\u7d20\u7684\u7236\u5143\u7d20\u662f\u8c01\uff0c\u6bcf\u5f53\u9700\u8981\u5224\u65ad\u662f\u5426\u4e00\u7c7b\u65f6\uff0c\u901a\u8fc7\u5bfb\u627e\u8be5\u5143\u7d20\u7684\u7956\u5148\u5143\u7d20\u5373\u53ef\u533a\u5206 \u5b9e\u73b0\u4ee3\u7801\uff1a \u975e\u9012\u5f52\u5f0f C++ int find ( int x ) { whille ( x != fa [ x ]) x = fa [ x ]; return x ; } \u9012\u5f52\u5f0f C++ int find ( int x ) { if ( x == fa [ x ]) return x ; //\u5982\u679cx\u7684\u7236\u4eb2\u5c31\u662fx\u90a3\u4e48\u5c31\u662f\u627e\u5230\u4e86x\u7684\u7956\u5148\u8282\u70b9 return find ( x ); //\u9012\u5f52\u8fd4\u56de }","title":"\u4e09\u3001\u67e5\u627e"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_6","text":"\u8def\u5f84\u538b\u7f29\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u63d0\u9ad8\u67e5\u627e\u6548\u7387\uff0c\u5927\u5bb6\u4e0d\u96be\u60f3\u5230\u5f53\u8fd9\u4e2a\u5e76\u67e5\u96c6\u6811\u9000\u5316\u6210\u4e86\u4e00\u6761\u94fe\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u67e5\u8be2\u90fd\u9700\u8981\u904d\u5386\u6574\u4e2a\u94fe\uff0c\u8fd9\u6837\u5341\u5206\u7684\u8d39\u65f6\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8def\u5f84\u538b\u7f29\u7684\u65b9\u5f0f\u5bf9\u8fd9\u4e2a\u6811\u5f62\u7ed3\u6784\u8fdb\u884c\u4f18\u5316\uff0c\u4e5f\u5c31\u662f\u5c06\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u76f4\u63a5\u53d8\u6210\u6839\u8282\u70b9\u4e5f\u5c31\u662f\u7956\u5148\u8282\u70b9\u3002 \u5077\u4e24\u5f20\u56fe\uff1a \u5b9e\u73b0\u4ee3\u7801\uff1a \u975e\u9012\u5f52\u5b9e\u73b0\uff1a C++ int find ( int x ) { int t = x ; while ( t != fa [ t ]) t = fa [ t ]; //\u76f4\u63a5\u67e5\u627ex\u7684\u7956\u5148\u8282\u70b9 while ( x != fa [ x ]) { int temp = fa [ x ]; fa [ x ] = t ; //\u4ece\u4e0b\u5230\u4e0a\u66f4\u65b0fa[x]\u7684\u503c\u4e3ax\u7684\u7956\u5148\u8282\u70b9\u7684\u503c x = temp ; } return x ; } \u9012\u5f52\u5b9e\u73b0\uff1a C++ int find ( int x ) { if ( x != fa [ x ]) fa [ x ] = find ( x ); //\u5982\u679cx\u4e0d\u662f\u81ea\u5df1\u7684\u7236\u4eb2\u8282\u70b9\u90a3\u4e48\u5c31\u627e\u5230x\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u4e00\u8def\u4e0a\u8def\u5f84\u538b\u7f29 return fa [ x ]; }","title":"\u56db\u3001\u8def\u5f84\u538b\u7f29"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_7","text":"\u63a5\u7740\u4e0a\u9762\u7684\u6545\u4e8b\uff0c\u5982\u679c\u8bf4\u6709\u4e24\u4e2a\u5bb6\u65cf\u7a81\u7136\u4ea4\u597d\uff0c\u4ed6\u4eec\u7684\u5173\u7cfb\u60f3\u5408\u5728\u4e00\u8d77\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\uff0c\u8ba9\u4e00\u8fb9\u7684\u7956\u5148\u53d8\u6210\u53e6\u4e00\u4e2a\u7956\u5148\u7684\u7236\u8282\u70b9\u5373\u53ef \u4ee3\u7801\u5b9e\u73b0: C++ void merge ( int a , int b ) { a = find ( a ); b = find ( b ); if ( a != b ) fa [ b ] = a ; //\u5982\u679c\u4e24\u4e2a\u5143\u7d20\u4e0d\u76f8\u7b49\u5c31\u8ba9\u4e00\u4e2a\u5143\u7d20\u6210\u4e3a\u53e6\u4e00\u4e2a\u5143\u7d20\u7684\u7236\u8282\u70b9 }","title":"\u4e94\u3001\u5408\u5e76"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#51","text":"\u6309\u79e9\u5408\u5e76\u4e5f\u6210\u4e3a\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5176\u7528\u9014\u662f\u7528\u5728\u4e24\u4e2a\u96c6\u5408\u7684\u5408\u5e76\u64cd\u4f5c\uff0c\u5f53\u4e24\u4e2a\u96c6\u5408\u5408\u5e76\u7684\u65f6\u5019\uff0c\u4f18\u5148\u9009\u62e9\u96c6\u5408\u6570\u5c11\u7684\u5143\u7d20\u878d\u5165\u96c6\u5408\u5143\u7d20\u591a\u7684\u91cc\u9762\uff0c\u5c3d\u7ba1\u65e0\u8bba\u54ea\u79cd\u8fde\u63a5\u90fd\u80fd\u83b7\u53d6\u6b63\u786e\u7684\u7b54\u6848\uff0c\u4f46\u662f\u4e0d\u540c\u7684\u8fde\u63a5\u65b9\u5f0f\u53ef\u80fd\u4f1a\u9020\u6210\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u9762\u7684\u5dee\u8ddd\uff0c\u4e00\u822c\u6765\u8bf4\u4e00\u9897\u5c0f\u6811\u8fde\u63a5\u5230\u4e00\u9897\u5927\u6811\u4e0a\u9762\u4f1a\u5feb\u4e00\u70b9\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u4e0d\u603b\u80fd\u9047\u5230\u6070\u597d\u5982\u4e0a\u6240\u8ff0\u7684\u96c6\u5408\u2014\u2014\u2014\u2014\u70b9\u6570\u4e0e\u6df1\u5ea6\u90fd\u66f4\u5c0f\u3002\u9274\u4e8e\u70b9\u6570\u4e0e\u6df1\u5ea6\u8fd9\u4e24\u4e2a\u7279\u5f81\u90fd\u5f88\u5bb9\u6613\u7ef4\u62a4\uff0c\u6211\u4eec\u5e38\u5e38\u4ece\u4e2d\u62e9\u4e00\uff0c\u4f5c\u4e3a\u4f30\u4ef7\u51fd\u6570\u3002\u800c\u65e0\u8bba\u9009\u62e9\u54ea\u4e00\u4e2a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3a O(m\u03b1(m,n))O(m\u03b1(m,n))\uff0c\u5177\u4f53\u7684\u8bc1\u660e\u53ef\u53c2\u89c1 References \u4e2d\u5f15\u7528\u7684\u8bba\u6587\u3002 \u5728\u7b97\u6cd5\u7ade\u8d5b\u7684\u5b9e\u9645\u4ee3\u7801\u4e2d\uff0c\u5373\u4fbf\u4e0d\u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u4ee3\u7801\u4e5f\u5f80\u5f80\u80fd\u591f\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u5b8c\u6210\u4efb\u52a1\u3002\u5728 Tarjan \u7684\u8bba\u6587[1]\u4e2d\uff0c\u8bc1\u660e\u4e86\u4e0d\u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u3001\u53ea\u4f7f\u7528\u8def\u5f84\u538b\u7f29\u7684\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(mlogn)O(mlog\u2061n)\u3002\u5728\u59da\u671f\u667a\u7684\u8bba\u6587[2]\u4e2d\uff0c\u8bc1\u660e\u4e86\u4e0d\u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u3001\u53ea\u4f7f\u7528\u8def\u5f84\u538b\u7f29\uff0c\u5728\u5e73\u5747\u60c5\u51b5\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4f9d\u7136\u662f O(m\u03b1(m,n))O(m\u03b1(m,n))\u3002 \u5982\u679c\u53ea\u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u800c\u4e0d\u4f7f\u7528\u8def\u5f84\u538b\u7f29\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(mlogn)O(mlog\u2061n)\u3002\u7531\u4e8e\u8def\u5f84\u538b\u7f29\u5355\u6b21\u5408\u5e76\u53ef\u80fd\u9020\u6210\u5927\u91cf\u4fee\u6539\uff0c\u6709\u65f6\u8def\u5f84\u538b\u7f29\u5e76\u4e0d\u9002\u5408\u4f7f\u7528\u3002\u4f8b\u5982\uff0c\u5728\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u3001\u7ebf\u6bb5\u6811\u5206\u6cbb + \u5e76\u67e5\u96c6\u4e2d\uff0c\u4e00\u822c\u4f7f\u7528\u53ea\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u5e76\u67e5\u96c6\u3002","title":"5.1\u6309\u79e9\u5408\u5e76(\u4e86\u89e3)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_8","text":"\u5173\u4e8e\u5e76\u67e5\u96c6\u7684\u62d3\u5c55\u5634\u7ecf\u5178\u7684\u8fd8\u662f\u5c5e\u4e8e**\u79cd\u7c7b\u5e76\u67e5\u96c6**\u4ee5\u53ca**\u5e26\u6743\u5e76\u67e5\u96c6** \u5173\u4e8e\u79cd\u7c7b\u5e76\u67e5\u96c6\u4e5f\u5c31\u662f\u8981\u7ef4\u62a4\u591a\u4e2a\u5173\u7cfb\u7684\u5e76\u67e5\u96c6\uff0c\u901a\u5e38\u7684\u5e76\u67e5\u96c6\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u540c\u4e00\u7c7b\u96c6\u5408\u7684\u5173\u7cfb\uff0c\u4f46\u662f\u79cd\u7c7b\u5e76\u67e5\u96c6\u5c31\u53ef\u80fd\u7ef4\u62a4\u4e24\u79cd\u3001\u4e09\u79cd\u751a\u81f3\u66f4\u591a\u7684\u5173\u7cfb \u79cd\u7c7b\u5e76\u67e5\u96c6\u6700\u7ecf\u5178\u7684\u5c31\u662f\u98df\u7269\u94fe\u548c\u72af\u7f6a\u56e2\u4f19 \u5173\u4e8e\u5e26\u6743\u5e76\u67e5\u96c6\u5c31\u662f\u8981\u5728\u8bb0\u5f55\u8282\u70b9\u7684\u8fc7\u7a0b\u4e2d\u6bcf\u4e2a\u8282\u70b9\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u6743\u503c\uff0c\u6211\u4eec\u5728\u89e3\u9898\u8fc7\u7a0b\u4e2d\u9700\u8981\u5bf9\u8fd9\u4e2a\u6743\u503c\u505a\u4e00\u4e9b\u5904\u7406\u7136\u540e\u6765\u89e3\u51b3\u9898\u76ee\u7684\u95ee\u9898","title":"\u516d\u3001\u5e76\u67e5\u96c6\u62d3\u5c55"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_9","text":"\u9898\u76ee\u8fde\u63a5 \u9898\u76ee\u540d https://www.luogu.com.cn/problem/P1551 P1551 \u4eb2\u621a https://www.luogu.com.cn/problem/P1536 P1536 \u6751\u6751\u901a https://www.luogu.com.cn/problem/P1525 P1525 [NOIP2010 \u63d0\u9ad8\u7ec4] \u5173\u62bc\u7f6a\u72af\uff08\u79cd\u7c7b\u5e76\u67e5\u96c6\uff09 https://www.luogu.com.cn/problem/P1621 P1621 \u96c6\u5408 https://www.luogu.com.cn/problem/P1892 P1892 [BOI2003]\u56e2\u4f19 https://www.luogu.com.cn/problem/P1955 P1955 [NOI2015] \u7a0b\u5e8f\u81ea\u52a8\u5206\u6790(\u8fd9\u4e2a\u6709\u8da3) https://www.luogu.com.cn/problem/P2814 P2814 \u5bb6\u8c31(\u8fd9\u4e2a\u7b80\u5355\uff0c\u4e0d\u8fc7\u5b57\u7b26\u4e32\u5904\u7406\u4e00\u4e0b) https://vjudge.net/contest/445444 \u8fd9\u4e2a\u5e76\u67e5\u96c6\u9898\u5355\u8fd8\u662f\u633a\u6709\u8da3\u7684 http://acm.hdu.edu.cn/showproblem.php?pid=3038 How Many Answers Are Wrong\uff08\u8fd9\u662f\u4e00\u4e2a\u5e26\u6743\u5e76\u67e5\u96c6\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u8bd5\u8bd5\uff09 \u8fd9\u4e2a\u9898\u76ee\u4eba\u57477\u9898\u5427","title":"\u4e03\u3001\u7ec3\u4e60\u9898\u76ee"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/","text":"\u57fa\u7840\u6570\u8bba \u00b6 0\u3001\u524d\u8a00 \u00b6 \u540c\u4f59\u3001GCD\u3001LCM\u3001\u62d3\u5c55GCD \u00b6 \u89c6\u9891\u94fe\u63a5\uff1a https://www.bilibili.com/video/BV1XR4y1u7Bb/ \u7d20\u6570\u76f8\u5173 \u00b6 \u89c6\u9891\u94fe\u63a5: https://www.bilibili.com/video/BV1Cu411U7Ls/ \u5feb\u901f\u5e42\u548c\u77e9\u9635\u5feb\u901f\u5e42\u548c\u9006\u5143 \u00b6 \u89c6\u9891\u94fe\u63a5\uff1a https://www.bilibili.com/video/BV1j3411e7qh/ \u4e00\u3001\u540c\u4f59 \u00b6 1.1 \u7ed3\u8bba \u00b6 \\((a+b)\\mod\\ n=((a\\mod\\ n)+(b \\mod \\ n) )\\mod\\ n\\) \\((a-b)\\mod\\ n =((a\\mod\\ n) - (b \\mod \\ n) )\\mod \\ n\\) \\((a \\times b) \\mod \\ n = ((a \\mod \\ n) \\times (b \\mod \\ n) )\\mod \\ n\\) \u4e8c\u3001GCD&LCM \u00b6 2.1 GCD \u00b6 GCD\u5373\u6700\u5927\u516c\u7ea6\u6570\uff0c\u5c0f\u5b66\u7684\u65f6\u5019\u6211\u4eec\u5c31\u5b66\u4e60\u4e86\u6c42\u4e24\u6570\u7684\u6700\u5927\u516c\u7ea6\u6570\u7684\u65b9\u6cd5\u3002\u4f46\u662f\u8981\u6ce8\u610f\u5982\u679c\u6709\u4e00\u4e2a\u6570\u4e3a0\u7684\u8bdd\u90a3\u4e48\u6700\u5c0f\u516c\u7ea6\u6570\u5c31\u662f\u53e6\u4e00\u4e2a\u4e0d\u4e3a0\u7684\u6570,\u6211\u4eec\u5728\u8fd9\u91cc\u53ea\u9700\u8981\u77e5\u9053GCD\u662f\u4ec0\u4e48\u4e1c\u897f\u5c31\u884c\u4e86 2.1.1 \u66f4\u76f8\u51cf\u635f\u6cd5 \u00b6 \u4e24\u4e2a\u6b63\u6574\u6570a\u548cb\uff08a>b\uff09\uff0c\u5b83\u4eec\u7684\u6700\u5927\u516c\u7ea6\u6570\u7b49\u4e8ea-b\u7684\u5dee\u503cc\u548c\u8f83\u5c0f\u6570b\u7684\u6700\u5927\u516c\u7ea6\u6570\u3002 2.1.2\u4ee3\u7801\uff1a \u00b6 C++ int gcd_3 ( int a , int b ) { //\u66f4\u76f8\u51cf\u635f\u6cd5 \u9012\u5f52\u5199\u6cd5 if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a == b ) return a ; if ( a > b ) return gcd_3 ( a - b , b ); if ( a < b ) return gcd_3 ( b - a , a ); } int gcd_4 ( int a , int b ) { //\u66f4\u76f8\u51cf\u635f\u6cd5 \u5faa\u73af\u5199\u6cd5 if ( a == 0 ) \u3000\u3000 return b ; if ( b == 0 ) \u3000\u3000 return a ; while ( a != b ) { if ( a > b ) a -= b ; else { int t = a ; a = b - a ; b = t ; } } return a ; } 2.1.3 \u8f97\u8f6c\u76f8\u9664\u6cd5 \u00b6 \u4e24\u4e2a\u6b63\u6574\u6570a\u548cb\uff08a>b\uff09\uff0c\u5b83\u4eec\u7684\u6700\u5927\u516c\u7ea6\u6570\u7b49\u4e8ea\u9664\u4ee5b\u7684\u4f59\u6570c\u548cb\u4e4b\u95f4\u7684\u6700\u5927\u516c\u7ea6\u6570\u3002 \u5176\u5b9e\u5c31\u662f\u628a\u66f4\u76f8\u51cf\u635f\u53d8\u5f97\u66f4\u9ad8\u7ea7\u4e00\u70b9\uff08\u52a0\u51cf\u8fd0\u7b97\u53d8\u4e58\u9664\u8fd0\u7b97\uff0c\u63d0\u5347\u4e86\u4e00\u4e2a\u7ea7\u522b\uff09 \u4f46\u662f\u5927\u6574\u6570\u53d6\u6a21\u4f1a\u8ba9\u4e00\u4e9b\u9898\u6781\u4e3a\u5934\u75bc\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u8981\u614e\u91cd\u8003\u8651\u4ec0\u4e48\u65f6\u5019\u7528\u66f4\u76f8\u51cf\u635f\u4ec0\u4e48\u65f6\u5019\u7528\u8f97\u8f6c\u76f8\u9664\u3002 2.1.4 \u4ee3\u7801 \u00b6 C++ int gcd_1 ( int a , int b ){ //\u8f97\u8f6c\u76f8\u9664\u6cd5 \u5faa\u73af\u5199\u6cd5 while ( b > 0 ) { int t = a % b ; a = b ; b = t ; } return a ; } int gcd_2 ( int a , int b ) { //\u8f97\u8f6c\u76f8\u9664\u6cd5 \u9012\u5f52\u5199\u6cd5 return b ? gcd_2 ( b , a % b ) : a ; } 2.2 LCM \u00b6 LCM\u5373\u6700\u5c0f\u516c\u500d\u6570\uff0c\u5c0f\u5b66\u7684\u65f6\u5019\u4e5f\u5b66\u8fc7\uff0c\u5f53\u6211\u4eec\u6c42\u51faGCD\u7684\u65f6\u5019\uff0cLCM\u4e5f\u5c31\u51fa\u6765\u4e86\uff0c \\[LCM = \\frac{a \\times b} {GCD(a, b)}\\] 2.3 \u62d3\u5c55\u6b27\u51e0\u91cc\u5f97 \u00b6 2.3.1 \u524d\u7f6e\u77e5\u8bc6 \u00b6 \u8f97\u8f6c\u76f8\u9664\u6cd5\u3001\u8d1d\u7956\u5b9a\u7406 \u8f97\u8f6c\u76f8\u9664\u6cd5\u5c31\u662f\u4e0d\u65ad\u7684\u8ba9\u8f83\u5927\u7684\u6570\u6a21\u4e0a\u8f83\u5c0f\u7684\u6570\uff0c\u6700\u540e\u4f7f\u5f97\u5176\u4e2d\u4e00\u4e2a\u6570\u4f4d0\uff0c\u6700\u540e\u5f97\u5230\u7b54\u6848 \u8d1d\u7956\u5b9a\u7406\uff1a \\(ax+by=c,x\u2208Z*,y\u2208Z*\\) \u6210\u7acb\u7684\u5145\u8981\u6761\u4ef6\u662f \\(gcd(a,b)|c\\) \u8d1d\u7956\u5b9a\u7406\u8bc1\u660e\uff1a \u8bbe \\(s=gcd(a,b)\\) \uff0c\u663e\u7136 \\(s|a\\) \uff0c\u5e76\u4e14 \\(s|b\\) \u53c8\u56e0\u4e3a \\(x\uff0cy\u2208Z\\) \u6240\u4ee5 \\(s|ax\\) , \\(s|by\\) \u663e\u7136\u8981\u4f7f\u5f97\u4e4b\u524d\u7684\u5f0f\u5b50\u6210\u7acb\uff0c\u5219\u5fc5\u987b\u6ee1\u8db3 \\(c\\) \u662f \\(a\\) \u548c \\(b\\) \u7684\u516c\u7ea6\u6570\u7684\u500d\u6570 \u53c8\u56e0\u4e3a \\(x\\) \u548c \\(y\\) \u662f\u6b63\u6574\u6570 \u6240\u4ee5 \\(c\\) \u5fc5\u7136\u662f \\(a,b\\) \u6700\u5927\u516c\u7ea6\u6570\u7684\u500d\u6570\u3002 \u56e0\u6b64\uff0c\u8bc1\u5f97\u8be5\u5b9a\u7406\u6210\u7acb \u5f53\u7136\u6211\u8fd9\u91cc\u5199\u7684\u53ef\u80fd\u53ea\u6709\u4e24\u5143\uff0c\u4f46\u662f\u8fd9\u4e2a\u5b9a\u7406\u53ef\u4ee5\u62d3\u5c55\u5230n\u5143\uff0c\u8bf7\u5927\u5bb6\u601d\u8003\u62d3\u5c55\u5230n\u5143\u7684\u60c5\u51b5 2.3.2 \u95ee\u9898\u5f15\u51fa \u00b6 \u6c42\u5f97\u4efb\u610f\u4e00\u7ec4\u89e3\uff1a \\(ax+by=1\\) 2.3.3 \u601d\u8def \u00b6 \u5f88\u663e\u7136\uff0c\u6211\u4eec\u80fd\u77e5\u9053\u5982\u679c \\(gcd(a,b)!=1\\) \u7684\u8bdd\u662f\u65e0\u89e3\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u770b \\(gcd(a,b)=1\\) \u7684\u60c5\u51b5\uff0c\u901a\u8fc7\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u7684\u7b97\u6cd5\u6211\u4eec\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e00\u7c7b\u95ee\u9898 2.3.4 \u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u4ee3\u7801 \u00b6 C++ int ex_gcd ( int a , int b , int & x , int & y ) //\u8fd4\u56de\u7684\u503c\u8fd8\u662fGCD(a,b) { if ( b == 0 ) //\u7b49\u4e8e0\u7684\u60c5\u51b5\u76f4\u63a5\u8fd4\u56de\u4e86 { x = 1 ; y = 0 ; return a ; } int ans = ex_gcd ( b , a % b , x , y ); //\u83b7\u5f97x',y'; int temp = x ; //\u5b58\u50a8x' x = y ; //x=y' y = temp - ( a / b ) * x ; //y=x'-(a/b)*y' return ans ; } 2.3.5 \u539f\u7406\u8bc1\u660e \u00b6 \u82e5 \\(ax+by=c\\) \u6709\u89e3\uff0c\u4e14\u8bbe \\(t = gcd(a,b)\\) \uff0c\u5219 \\(c \\% t =0\\) \u2460\u8bbe \\(ax+by=t\\) \u5f53b\u7b49\u4e8e0\u65f6\uff0c \\(t=a\\) \uff0c\u56e0\u4e3a \\(gcd(a,0)=a\\) \uff0c\u5219\u4f1a\u6709 \\(a\\times x = a\\) \uff0c\u5373 \\(x=1\\) \u2461 \u5f53b\u4e0d\u7b49\u4e8e0\u65f6 \u8bbe \\(ax+by=gcd(a,b)\\) ---\u2160 \u6211\u4eec\u53ef\u4ee5\u63a8\u51fa\u4e0b\u4e00\u5c42\u7684\u72b6\u6001\uff1a \\(bx'+(a\\%b)y'=gcd(b,a\\%b)\\) --- \u2161 \u53c8\u56e0\u4e3a \\(gcd(b,a\\%b)=gcd(a,b)\\) --- \u2162 \u6240\u4ee5\u7531\u2160\u3001\u2161\u3001\u2162\u53ef\u5f97\uff1a \\(ax+by=bx'+(a\\%b)y'\\) ---\u2164 \u53c8\u56e0\u4e3a \\(a\\%b = a - \\left \\lfloor \\frac{a}{b} \\right \\rfloor \\times b\\) --- \u2165 \u6240\u4ee5\u7531\u2164\u3001\u2165\u53ef\u5f97\uff1a \\(ax + by = a*y' + b\\times (x'- \\left \\lfloor \\frac{a}{b} \\right \\rfloor \\times y')\\) \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\uff1a \\(x = y',y = x'- \\left \\lfloor \\frac{a}{b} \\right \\rfloor \\times y'\\) \u4e09\u3001\u552f\u4e00\u5206\u89e3\u5b9a\u7406 \u00b6 3.1 \u7406\u8bba \u00b6 \u6b63\u6574\u6570\u7684\u552f\u4e00\u5206\u89e3\u5b9a\u7406\uff0c\u5373\uff1a\u6bcf\u4e2a\u5927\u4e8e1\u7684\u81ea\u7136\u6570\u5747\u53ef\u5199\u4e3a \u8d28\u6570 \u7684\u79ef\uff0c\u800c\u4e14\u8fd9\u4e9b\u7d20\u56e0\u5b50\u6309\u5927\u5c0f\u6392\u5217\u4e4b\u540e\uff0c\u5199\u6cd5\u4ec5\u6709\u4e00\u79cd\u65b9\u5f0f\u3002 3.2\u4e60\u9898 \u00b6 http://120.78.128.11/Challenge.jsp#B213 \u56db\u3001\u7d20\u6570\u4e09\u5927\u7b5b \u00b6 4.1 \u6734\u7d20\u7d20\u6570\u7b5b \u00b6 4.1.1 \u539f\u7406 \u00b6 \u5730\u7403\u4eba\u90fd\u77e5\u9053\u4e00\u4e2a\u5408\u6570A\u7684\u56e0\u5b50\u80af\u5b9a\u662f\u5c0f\u4e8e\u7b49\u4e8e \\(\\sqrt{A}\\) \u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u5f97\u5230\u6734\u7d20\u7d20\u6570\u7b5b\u7684\u65b9\u6cd5\u904d\u5386\u67e5\u627e\u5230 \\(\\sqrt{A}\\) \u5373\u53ef\uff0c\u590d\u6742\u5ea6 \\(O(\\sqrt{N})\\) 4.1.2 \u4ee3\u7801 \u00b6 C++ bool is_prime ( int x ) { if ( x == 0 || x == 1 ) return false ; for ( int i = 2 ; i * i <= x ; ++ i ) { //\u8fd9\u91cc\u7528\u4e58\u6cd5\u662f\u4e3a\u4e86\u907f\u514d\u5f00\u6839\u53f7\u7684\u7cbe\u5ea6\u8bef\u5dee if ( x % i == 0 ) //\u5982\u679c\u627e\u5230\u4e86\u56e0\u5b50\uff0c\u90a3\u4e48\u8be5\u6570\u5c31\u4e0d\u662f\u8d28\u6570 return false ; } return true ; } 4.2 \u57c3\u5f0f\u7b5b \u00b6 4.2.1 \u539f\u7406 \u00b6 \u57c3\u5f0f\u7b5b\u7684\u539f\u7406\u5c31\u662f\u901a\u8fc7\u5bf9\u5df2\u77e5\u7684\u8d28\u6570\u8fdb\u884c\u52a0\u500d\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u80fd\u5f97\u5230\u8fd9\u4e2a\u8d28\u6570\u7684\u5927\u4e8e2\u7684\u6574\u6570\u500d\u6570\u90fd\u662f\u5408\u6570(\u56e0\u5b50\u5c31\u662f\u8be5\u500d\u6570)\uff0c\u8fd9\u6837\u901a\u8fc7\u7b5b\u9009N\u8303\u56f4\u4ee5\u5185\u7684\u8d28\u6570\u5c31\u80fd\u5f97\u5230\u6240\u6709\u7684\u8d28\u6570\uff0c\u603b\u4f53\u590d\u6742\u5ea6\uff1a \\(O(nloglogn)\\) 4.2.2 \u4ee3\u7801 \u00b6 C++ /* \u4f5c\u8005:Mangata \u57c3\u5f0f\u7b5b\u6a21\u677f */ //\u65f6\u95f4\u590d\u6742\u5ea6 :O(n*log(log(n))) #include <cstdio> #include <algorithm> #include <cstring> const int N = 10000005 ; bool vis [ N ] = { true , true }; //\u521d\u59cb\u5316 int main () { int n , x ; //\u79bb\u7ebf\u5904\u7406 for ( int i = 2 ; i * i <= N ; ++ i ) { if ( ! vis [ i ]) { for ( int j = i * 2 ; j <= N ; j += i ) //\u628a\u7d20\u6570\u7684\u500d\u6570\u7b5b\u6389 vis [ j ] = true ; } } while ( ~ scanf ( \"%d\" , & x )) { if ( vis [ x ]) puts ( \"No\" ); else puts ( \"Yes\" ); } return 0 ; } 4.3 \u6b27\u62c9\u7b5b \u00b6 4.3.1 \u539f\u7406 \u00b6 \u6b27\u62c9\u7b5b\u7684\u601d\u60f3\u548c\u57c3\u5f0f\u7b5b\u4e00\u6837\uff0c\u90fd\u662f\u901a\u8fc7\u5bf9\u8d28\u6570\u7684\u500d\u6570\u8fdb\u884c\u7b5b\u9009\uff0c\u4f46\u662f\u6709\u4e00\u70b9\u4e0d\u540c\u7684\u662f\u6211\u4eec\u5728\u5bf9\u8d28\u6570\u7684\u500d\u6570\u90fd\u8fdb\u884c\u6807\u8bb0\u7684\u65f6\u5019\uff0c\u8fd9\u91cc\u6211\u4eec\u5176\u5b9e\u662f\u91cd\u590d\u64cd\u4f5c\u4e86\u7684\uff0c\u800c\u6b27\u62c9\u7b5b\u5c31\u80fd\u907f\u514d\u91cd\u590d\u7b5b\u9009\uff0c\u8ba9\u6bcf\u4e2a\u5408\u6570\u53ea\u88ab\u5b83\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u7b5b\u9009\u4e00\u6b21\uff0c\u4ee5\u8fbe\u5230 \\(0(N)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u6838\u5fc3\u64cd\u4f5c\u4f53\u73b0\u5728\uff1a if (i % prime[j] == 0) break; \u524d\u7f6e\u77e5\u8bc6\uff1a \u4efb\u4f55\u5408\u6570\u90fd\u80fd\u8868\u793a\u6210\u591a\u4e2a\u7d20\u6570\u7684\u79ef\u3002\u6240\u4ee5\uff0c\u4efb\u4f55\u7684\u5408\u6570\u80af\u5b9a\u6709\u4e00\u4e2a\u6700\u5c0f\u8d28\u56e0\u5b50\u3002\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u6700\u5c0f\u8d28\u56e0\u5b50\u5c31\u53ef\u4ee5\u5224\u65ad\u4ec0\u4e48\u65f6\u5019\u4e0d\u7528\u7ee7\u7eed\u7b5b\u4e0b\u53bb\u4e86 \u7b80\u5355\u8bc1\u660e\uff1a \u5f53 \\(i\\%prime[j] == 0\\) \u65f6\uff0c\u90a3\u4e48\u5c31\u6709 \\(k \\times prime[j] = i;\\) \u8bbe \\(i\\times prime[j + 1] = X\\) (\u4e00\u4e2a\u672a\u77e5\u4efb\u610f\u5408\u6570) \u5219\uff1a \\(i \\times prime[j+1] = prime[j] \\times k \\times prime[j+1] = X\\) \u53c8\u2235$ prime[j + 1] > prime[j] $ \u2234 \\(prime[j + 1] \\times k \\ >\\ prime[j] \\times k\\) \u2234 \\(prime[j+1] \\times (k \\times prime[j]) = x = i \\times prime[j+1]\\) \u6240\u4ee5\u53ef\u5f97\uff0c \\(i \\times prime[j+1]\\) \u5fc5\u7136\u4f1a\u5728\u4ee5\u540e\u88ab \\(prime[j]\\) \u7684 \\(k \\times prime[j + 1]\\) \u500d\u6570\u5220\u6389 \u540e\u9762\u7684\u6570\u5b57\u540c\u7406 4.3.2 \u4ee3\u7801 \u00b6 C++ /* \u4f5c\u8005:Mangata \u6b27\u62c9\u7b5b\u6a21\u677f */ //\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) #include <cstdio> #include <algorithm> #include <cstring> #include <vector> const int N = 10000005 ; int prime [ N ]; bool vis [ N ]; void get_prime () { memset ( vis , true , sizeof vis ); memset ( prime , 0 , sizeof prime ); vis [ 0 ] = vis [ 1 ] = false ; for ( int i = 2 ; i <= N ; ++ i ) { if ( vis [ i ]) { prime [ ++ prime [ 0 ]] = i ; } for ( int j = 1 ; j <= prime [ 0 ] && i * prime [ j ] <= N ; ++ j ) { vis [ i * prime [ j ]] = false ; if ( i % prime [ j ] == 0 ) //\u907f\u514d\u91cd\u590d\u7b5b\u9009 break ; } } } int main () { int n ; get_prime (); while ( ~ scanf ( \"%d\" , & n )) { if ( vis [ n ]) puts ( \"Yes\" ); else puts ( \"No\" ); } return 0 ; } 4.4 \u62d3\u5c55\uff1a\u7c73\u52d2\u7f57\u5bbe \u00b6 \u5bf9\u6bd4\u8f83\u5927\u7684\u8d28\u6570\u8fdb\u884c\u4e00\u4e2a\u68c0\u6d4b\uff08\u6709\u4e00\u5b9a\u968f\u673a\u6027\uff09 \u4e94\u3001\u77e9\u9635\u8fd0\u7b97 \u00b6 5.1 \u77e9\u9635\u52a0\u51cf\u6cd5 \u00b6 \u76f4\u63a5\u5bf9\u5e94\u4f4d\u7f6e\u76f8\u52a0\u51cf\u5373\u53ef \\[\\begin{bmatrix} 4 & 3 \\\\ 9 & 9 \\end{bmatrix} + \\begin{bmatrix} 1 & 3 \\\\ 1 & 4 \\end{bmatrix}= \\begin{bmatrix} 5 & 6 \\\\ 10 & 13 \\end{bmatrix}\\] \\[\\begin{bmatrix} 4 & 3 \\\\ 9 & 9 \\end{bmatrix} -\\begin{bmatrix} 1 & 3 \\\\ 1 & 4 \\end{bmatrix} =\\begin{bmatrix} 3 & 0 \\\\ 8 & 5 \\end{bmatrix}\\] 5.2 \u77e9\u9635\u4e58\u6cd5 \u00b6 \u77e9\u9635\u4e58\u6cd5\u5c31\u662f \\(A\\) \u77e9\u9635\u7684\u7b2c \\(i\\) \u884c \u548c \\(B\\) \u77e9\u9635\u7684\u7b2c \\(j\\) \u5217 \u8fdb\u884c\u4e58\u6cd5\u8fd0\u7b97\uff0c\u5e76\u4f5c\u4e3a\u7ed3\u679c\u77e9\u9635C\u7684 \\(C[i][j]\\) \u5143\u7d20 \\[\\begin{bmatrix} 4 & 3 \\\\ 9 & 9 \\end{bmatrix} \\times \\begin{bmatrix} 1 & 3 \\\\ 1 & 4 \\end{bmatrix} =\\begin{bmatrix} 4 \\times 1 + 3\\times1 & 4 \\times 3 + 3\\times 4 \\\\ 9 \\times 1 + 9 \\times 1 & 9 \\times 3 + 9 \\times 4 \\end{bmatrix} =\\begin{bmatrix} 7 & 24 \\\\ 18 & 63 \\end{bmatrix} \\] 5.3 \u4ee3\u7801 \u00b6 C++ #include <bits/stdc++.h> using namespace std ; #define N 100 struct Matrix { int n , m ; int mp [ N ][ N ]; void init ( int n , int m ) { this -> n = n ; this -> m = m ; } }; Matrix add ( Matrix L , Matrix R ) { //\u52a0\u6cd5 if ( L . n != R . n || L . m != R . m ) return L ; Matrix M ; for ( int i = 0 ; i < L . n ; ++ i ) { for ( int j = 0 ; j < L . m ; ++ j ){ M . mp [ i ][ j ] = L . mp [ i ][ j ] + R . mp [ i ][ j ]; } } return M ; } Matrix reduce ( Matrix L , Matrix R ) { //\u51cf\u6cd5 if ( L . n != R . n || L . m != R . m ) return L ; Matrix M ; for ( int i = 0 ; i < L . n ; ++ i ) { for ( int j = 0 ; j < L . m ; ++ j ){ M . mp [ i ][ j ] = L . mp [ i ][ j ] - R . mp [ i ][ j ]; } } return M ; } Matrix mult ( Matrix L , Matrix R ) { //\u4e58\u6cd5 if ( L . n != R . m || L . m != R . n ) return L ; Matrix M ; for ( int i = 0 ; i < L . n ; ++ i ) { for ( int j = 0 ; j < R . m ; ++ j ){ for ( int k = 0 ; k < L . m ; ++ k ) { M . mp [ i ][ j ] += L . mp [ i ][ k ] * R . mp [ k ][ j ]; } } } return M ; } int main () { Matrix a , b ; a . init ( 2 , 2 ); b . init ( 2 , 2 ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) { a . mp [ i ][ j ] = i * 2 + j ; b . mp [ i ][ j ] = i * 2 + j ; } } Matrix c = mult ( a , b ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) { printf ( \"%d \" , c . mp [ i ][ j ]); } putchar ( '\\n' ); } return 0 ; } \u516d\u3001\u5feb\u901f\u5e42&\u9f9f\u901f\u4e58 \u00b6 6.1\u5feb\u901f\u5e42 \u00b6 6.1.1 \u95ee\u9898\u5f15\u51fa \u00b6 \u7ed9\u51fa\u4e09\u4e2a\u6570a\u3001b\u3001c,\u6c42 \\(a^b \\ mod \\ c\\) \u8fd0\u7528\u524d\u9762\u5b66\u5230\u7684\u540c\u4f59\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5bf9a\u8fdb\u884c\u4e58b\u6b21\u7136\u540e\u53d6\u6a21c\uff0c\u4f46\u662f\u5f53b\u5f88\u5927\u7684\u65f6\u5019\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u65f6\u5019\u5c31\u8981\u7528\u5230\u4e86\u4eca\u5929\u7684\u5185\u5bb9\uff0c \u5feb\u901f\u5e42 \uff0c\u5feb\u901f\u5e42\u4f5c\u4e3a\u4e00\u4e2a\u57fa\u7840\u7684\u77e5\u8bc6\uff0c\u5728\u5f88\u591a\u7684\u5730\u65b9\u90fd\u4f1a\u7528\u5230\u5b83\uff0c\u4f8b\u5982\u6c42\u9ad8\u5e42\u8fd0\u7b97\uff0c\u6c42\u9006\u5143\u3001\u77e9\u9635\u5feb\u901f\u5e42\u7b49 6.1.2 \u539f\u7406 \u00b6 \u5feb\u901f\u5e42\u7684\u539f\u7406\u5176\u5b9e\u7528\u5230\u4e86\u4f4d\u8fd0\u7b97\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u7684\u5173\u6ce8\u70b9\u5e94\u8be5\u662f\u8fd9\u4e2a\u5e42b\uff0c\u4e4b\u524d\u7684\u65b9\u6cd5\u662f\u76f4\u63a5\u5faa\u73af\u4e58b\u6b21\uff0c\u4f46\u662f\u5f53b\u5f88\u5927\u4f8b\u59821e9\u7684\u65f6\u5019\u5c31\u4e0d\u6ee1\u8db3\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2ab\u5148\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\uff0c\u6211\u4e3e\u4e2a\u6817\u5b50\uff1a \u4f8b\u5982b = 11\uff0c\u90a3\u4e48\u5b83\u7684\u4e8c\u8fdb\u5236\u5c31\u4e3a 1011B \uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8981\u6c42\u7684\u8fd9\u4e2a \\(a^b \\ = \\ a^1 \\times a^2 \\times a ^ 8\\) \u4e0d\u96be\u770b\u51fa\u6211\u4eec\u5c06\u8fd9\u4e2ab\u5206\u89e3\u6210\u4e86\u82e5\u5e72\u4e2a2\u7684\u5e42\u7684\u79ef\uff0c\u6211\u4eec\u901a\u8fc7\u4f4d\u8fd0\u7b97\u53ea\u9700\u8981\u901a\u8fc7\u4e0d\u65ad\u7684\u5de6\u79fb\u7ef4\u62a4\u4e00\u4e2a2\u7684\u5e42\u7684\u503c\u5373\u53ef\uff0c\u5f53\u8be5\u4f4d\u4e3a1\u90a3\u4e48\u5c31\u4e58\u4e0a\u5b83\uff0c\u8fd9\u5c31\u662f\u5feb\u901f\u5e42\u7684\u539f\u7406\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(log_b\\) 6.1.3 \u4ee3\u7801 \u00b6 C++ //\u5feb\u901f\u5e42 ll ksm ( ll x , ll n , ll mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = ( res * x ) % mod ; x = ( x * x ) % mod ; n >>= 1 ; } return res ; } 6.2\u5e7f\u4e49\u5e42 \u00b6 6.2.1\u95ee\u9898\u5f15\u51fa \u00b6 \u5df2\u77e5\u6570\u5217 \\(a_1,a_2\u2026\u2026a_n\\) \u548c \\(C\\) \u8ba1\u7b97 \\((a_1 \\times a_2 \\times \u2026\u2026\\times a_n) \\%C\\) \u7684\u7ed3\u679c 6.2.2\u539f\u7406 \u00b6 \u8bbe\uff1a\u25cb\u4e3a\u4e00\u79cd\u8fd0\u7b97\u4e14\u4e0e\u96c6\u5408V\u6784\u6210\u7fa4\uff0ca\u2208V\uff0ce\u4e3a\u25cb\u8fd0\u7b97\u7684\u5e7a\u5143\u3002 \u5373e\u6ee1\u8db3\u5bf9\u4e8e\u4efb\u610f\u7684a,\u6709 \\(e\u25cba\\ = \\ a\u25cbe\\ =\\ a\\) \u6211\u4eec\u53ef\u4ee5\u8bb0 \\(a^\u25cb=e\\) \\(a_n\\ =\\ a_{n-1}\\ \u25cb\\ a\\) \u5219\u6709\u4ee5\u4e0b\u6027\u8d28 \\(a_n\\ +\\ m\\ =\\ a_n\\ \u25cb\\ a_m\\) \u5219\u6b64\u65f6\u8ba1\u7b97a\u5173\u4e8e\u25cb\u8fd0\u7b97\u7684n\u6b21\u5e42\u7684\u5feb\u901f\u5e42\u53ef\u4ee5\u8fd9\u6837\u5199 C++ res = e ; temp = a ; while ( n ) { if ( n & 1 ) res = res \u25cb temp ; temp = temp \u25cb temp ; n >>= 1 ; } return res ; \u7136\u540e\u5c31\u50cf \\(a^b=a\\times a\\times a\\times a\\times a\u2026\\) \u662f\u5173\u4e8e\u4e58\u6cd5\u7684\u5e42\u8fd0\u7b97\uff0c\u53c8\u56e0\u4e3a \\(1\\times a\\ =\\ a \\times 1 \\ =\\ a\\) ,\u6240\u4ee5\u4e58\u6cd5\u5e7a\u5143e\u5c31\u662f1\uff0c\u5e26\u5165\u4e0a\u9762\u7684\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u5e38\u89c1\u7684\u4e58\u6cd5\u5feb\u901f\u5e42,\u4e0b\u9762\u7684\u9f9f\u901f\u4e58\u540c\u7406 6.3 \u9f9f\u901f\u4e58\u6cd5 \u00b6 6.3.1\u95ee\u9898\u5f15\u51fa \u00b6 \u5982\u679c\u6211\u4eec\u60f3\u8981\u8ba1\u7b97\u4e24\u4e2a\u5927\u6574\u6570A\u3001B(long long\u8303\u56f4\u5185)\u7684\u4e58\u6cd5\u5e76\u53d6\u6a21C\u600e\u4e48\u529e\u5462\uff1f\u624b\u52a8\u5199\u9ad8\u7cbe\u5ea6\u5417\uff1f\u663e\u7136\u4e0d\u9700\u8981\uff0c\u8fd9\u91cc\u5c31\u80fd\u7528\u5230\u6211\u4eec\u73b0\u5728\u8981\u5b66\u7684\u9f9f\u901f\u4e58\u6cd5 6.3.2\u539f\u7406 \u00b6 \u548c\u4e0a\u9762\u7684\u5feb\u901f\u4e58\u540c\u7406\uff0c\u4e0d\u96be\u770b\u51fa\u6b64\u5904\u7684\u6b64\u5904\u7684\u4e58\u6cd5\u5e7a\u5143\u5c31\u662f0\uff0c\u5982\u679c\u8fd8\u662f\u4e0d\u61c2\u8bf7\u770b\u4e0a\u9762\u7684\u5e7f\u4e49\u5e42\u7684\u539f\u7406 6.3.3 \u4ee3\u7801 \u00b6 C++ ll gsc ( ll x , ll n , ll mod ) { ll res = 0 ; x %= mod ; n %= mod ; while ( n ) { if ( n & 1 ) res = ( res + x ) % mod ; x = ( x % mod + x % mod ) % mod ; n >>= 1 ; } return res % mod ; } \u4e03\u3001\u77e9\u9635\u5feb\u901f\u5e42 \u00b6 7.1\u95ee\u9898\u5f15\u51fa \u00b6 \u6c42\u4e00\u4e2a \\(N\\times N\\) \u77e9\u9635\u7684K\u6b21\u5e42 \u6211\u4eec\u4e4b\u524d\u5b66\u8fc7\u77e9\u9635\u7684\u52a0\u51cf\u4e58\uff0c\u77e5\u9053\u4e58\u6cd5\u7684\u590d\u6742\u5ea6\u4e3a \\(O(N^3)\\) \u7684\uff0c\u5982\u679c\u6734\u7d20\u7684\u505a\u6cd5\u5c31\u662f \\(O(N^3 \\times k)\\) \u7684\uff0c\u5f53k\u5f88\u5c0f\u7684\u65f6\u5019\u6211\u4eec\u8fd9\u6837\u8ba1\u7b97\u5012\u6ca1\u95ee\u9898\uff0c\u4f46\u662f\u5f53k\u5f88\u5927\u7684\u65f6\u5019\u5462\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u5230\u8fd9\u4e00\u5c0f\u8282\u7684\u5185\u5bb9\uff0c \u77e9\u9635\u5feb\u901f\u5e42 7.2\u539f\u7406 \u00b6 \u539f\u7406\u53c2\u89c1\u4e0a\u9762\u7684\u5e7f\u4e49\u5e42\uff0c\u5b9e\u8d28\u548c\u5feb\u901f\u5e42\uff0c\u9f9f\u901f\u4e58\u7b49\u6ca1\u6709\u592a\u5927\u533a\u522b\u53ea\u4e0d\u8fc7\u5e7a\u5143\u4e0d\u540c,\u6b64\u5904\u7684\u5e7a\u5143\u53d8\u6210\u4e86\u5355\u4f4d\u77e9\u9635\uff08\u4e3b\u5bf9\u89d2\u7ebf\u5168\u4e3a1\uff0c\u5176\u4f59\u4e3a0\uff09\uff0c\u8fd0\u7b97\u65b9\u5f0f\u53d8\u6210\u4e86\u77e9\u9635\u4e58\u6cd5 7.3 \u4ee3\u7801 \u00b6 C++ #include <bits/stdc++.h> using namespace std ; #define ll long long #define mod 1000000007 #define N 200 struct Matrix { ll mp [ N ][ N ]; }; Matrix loc ; ll n , k ; Matrix operator * ( const Matrix & x , const Matrix & y ) { Matrix a ; memset ( & a , 0 , sizeof ( a )); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) for ( int k = 1 ; k <= n ; ++ k ) a . mp [ i ][ j ] = (( a . mp [ i ][ j ] + x . mp [ i ][ k ] * y . mp [ k ][ j ]) % mod ) % mod ; return a ; } void ksm ( ll k ) { Matrix ans ; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) ans . mp [ i ][ j ] = i == j ; while ( k ) { if ( k & 1 ) ans = ans * loc ; loc = loc * loc ; k >>= 1 ; } for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { printf ( \"%lld \" , ans . mp [ i ][ j ]); } putchar ( '\\n' ); } } int main () { scanf ( \"%lld%lld\" , & n , & k ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) scanf ( \"%lld\" , & loc . mp [ i ][ j ]); ksm ( k ); return 0 ; } 7.5\u77e9\u9635\u5feb\u901f\u5e42\u6c42\u89e3\u6590\u6ce2\u90a3\u5951\u95ee\u9898 \u00b6 7.5.1 \u95ee\u9898\u5f15\u51fa \u00b6 \u4f17\u6240\u5468\u77e5\u6590\u6ce2\u90a3\u5951\u95ee\u9898 \\(F_n = F_{n-1} + F_{n-2}\\) \uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u9012\u63a8\u5f0f\u6c42\u51fa\u53d6\u6a21\u60c5\u51b5\u4e0b\u7684\u7b2cN\u9879\u7684\u503c\uff0c\u4f46\u662f\u5982\u679cN\u5f88\u5927\u5462\uff08\u6bd4\u59821e18\uff09\uff0c\u8fd9\u65f6\u5019\u600e\u4e48\u529e\u5462\uff1f 7.5.2 \u601d\u8def \u00b6 \u5f88\u663e\u7136\u6211\u4eec\u80fd\u60f3\u5230\u7528\u4e00\u4e2a\u77e9\u9635\u4e58\u6cd5\u6765\u8868\u8fbe\u8fd9\u4e2a\u9012\u63a8\u8fc7\u7a0b \\[ \\begin{bmatrix} F_{n-1} & F_{n} \\end{bmatrix} =\\begin{bmatrix} F_{n-2} & F_{n-1} \\end{bmatrix} \\times \\begin{bmatrix} 0 & 1 \\\\ 1 & 1 \\end{bmatrix} \\] \u7136\u540e\u6211\u4eec\u6b64\u65f6\u5047\u8bbeP= \\(\\begin{bmatrix} 0 & 1 \\\\ 1 & 1 \\end{bmatrix}\\) \u5c31\u80fd\u5f97\u5230\u6590\u6ce2\u90a3\u5951\u7684\u77e9\u9635\u9012\u63a8\u5f0f\uff1a \\[ \\begin{bmatrix} F_n & F_{n-1} \\\\ \\end{bmatrix} =\\begin{bmatrix} F_0 & F_1 \\\\ \\end{bmatrix} \\times P^n \\] \u6211\u4eec\u5c31\u80fd\u5728 \\(log_n\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6c42\u51fa \\(F_n\\) \u4e86 7.5.3 \u6590\u6ce2\u90a3\u5951\u6570\u5217\u6027\u8d28 \u00b6 \u5361\u897f\u5c3c\u6027\u8d28\uff08Cassini's identity\uff09\uff1a \\(F_{n-1}\\times F_{n+1} - F_n^2\\ = (-1)^n\\) \u9644\u52a0\u6027\u8d28\uff1a \\(F_n+k \\ = \\ F_k F_{n+1} + F_{k-1}F_n\\) GCD \u6027\u8d28\uff1a \\((F_m,F_n) \\ = \\ F_{(m,n)}\\) \u516b\u3001\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143 \u00b6 8.1 \u8d39\u9a6c\u5c0f\u5b9a\u7406 \u00b6 \u82e5P\u4e3a\u8d28\u6570\uff0c \\(GCD(a,p) = 1\\) \uff0c\u5219 \\(a^{p-1} \u2261 1 \\ (mod \\ p)\\) \u6362\u53e5\u8bdd\u8bf4\uff1a\u5bf9\u4e8e\u4efb\u610f\u6574\u6570a\uff0c\u6709 \\(a^p = a \\ (mod \\ p)\\) 8.2 \u9006\u5143 \u00b6 8.2.1 \u7b80\u4ecb \u00b6 \u5982\u679c\u4e00\u4e2a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b \\(ax \u2261 1 \\ (mod \\ p)\\) \uff0c\u5219x\u88ab\u79f0\u4f5c\u4e3a \\(a \\ mod \\ p\\) \u7684\u9006\u5143\uff0c\u8bb0\u4f5c \\(a^{-1}\\) 8.2.2 \u5982\u4f55\u6c42 \u00b6 \u6709\u4e24\u79cd\u65b9\u6cd5 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6cd5 \u548c \u5feb\u901f\u5e42\u6cd5 \u6211\u4eec\u8fd9\u91cc\u53ea\u4ecb\u7ecd\u5feb\u901f\u5e42\u7684\u65b9\u6cd5\uff1a \u7528\u5230\u4e86\u4e0a\u9762\u7684\u524d\u7f6e\u77e5\u8bc6\uff1a \u8d39\u9a6c\u5c0f\u5b9a\u7406 \u7531\u4e0a\u9762\u53ef\u5f97\uff1aa\u7684\u4e58\u6cd5\u9006\u5143\u4e3a \\(a^{p-2}\\) \u4e5d\u3001\u8bad\u7ec3\u9898\u5355 \u00b6 http://acm.mangata.ltd/training/61d167fb9583df9f1d5e39f2","title":"\u57fa\u7840\u6570\u8bba"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#_1","text":"","title":"\u57fa\u7840\u6570\u8bba"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#0","text":"","title":"0\u3001\u524d\u8a00"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#gcdlcmgcd","text":"\u89c6\u9891\u94fe\u63a5\uff1a https://www.bilibili.com/video/BV1XR4y1u7Bb/","title":"\u540c\u4f59\u3001GCD\u3001LCM\u3001\u62d3\u5c55GCD"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#_2","text":"\u89c6\u9891\u94fe\u63a5: https://www.bilibili.com/video/BV1Cu411U7Ls/","title":"\u7d20\u6570\u76f8\u5173"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#_3","text":"\u89c6\u9891\u94fe\u63a5\uff1a https://www.bilibili.com/video/BV1j3411e7qh/","title":"\u5feb\u901f\u5e42\u548c\u77e9\u9635\u5feb\u901f\u5e42\u548c\u9006\u5143"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#_4","text":"","title":"\u4e00\u3001\u540c\u4f59"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#11","text":"\\((a+b)\\mod\\ n=((a\\mod\\ n)+(b \\mod \\ n) )\\mod\\ n\\) \\((a-b)\\mod\\ n =((a\\mod\\ n) - (b \\mod \\ n) )\\mod \\ n\\) \\((a \\times b) \\mod \\ n = ((a \\mod \\ n) \\times (b \\mod \\ n) )\\mod \\ n\\)","title":"1.1 \u7ed3\u8bba"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#gcdlcm","text":"","title":"\u4e8c\u3001GCD&amp;LCM"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#21-gcd","text":"GCD\u5373\u6700\u5927\u516c\u7ea6\u6570\uff0c\u5c0f\u5b66\u7684\u65f6\u5019\u6211\u4eec\u5c31\u5b66\u4e60\u4e86\u6c42\u4e24\u6570\u7684\u6700\u5927\u516c\u7ea6\u6570\u7684\u65b9\u6cd5\u3002\u4f46\u662f\u8981\u6ce8\u610f\u5982\u679c\u6709\u4e00\u4e2a\u6570\u4e3a0\u7684\u8bdd\u90a3\u4e48\u6700\u5c0f\u516c\u7ea6\u6570\u5c31\u662f\u53e6\u4e00\u4e2a\u4e0d\u4e3a0\u7684\u6570,\u6211\u4eec\u5728\u8fd9\u91cc\u53ea\u9700\u8981\u77e5\u9053GCD\u662f\u4ec0\u4e48\u4e1c\u897f\u5c31\u884c\u4e86","title":"2.1 GCD"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#211","text":"\u4e24\u4e2a\u6b63\u6574\u6570a\u548cb\uff08a>b\uff09\uff0c\u5b83\u4eec\u7684\u6700\u5927\u516c\u7ea6\u6570\u7b49\u4e8ea-b\u7684\u5dee\u503cc\u548c\u8f83\u5c0f\u6570b\u7684\u6700\u5927\u516c\u7ea6\u6570\u3002","title":"2.1.1 \u66f4\u76f8\u51cf\u635f\u6cd5"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#212","text":"C++ int gcd_3 ( int a , int b ) { //\u66f4\u76f8\u51cf\u635f\u6cd5 \u9012\u5f52\u5199\u6cd5 if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a == b ) return a ; if ( a > b ) return gcd_3 ( a - b , b ); if ( a < b ) return gcd_3 ( b - a , a ); } int gcd_4 ( int a , int b ) { //\u66f4\u76f8\u51cf\u635f\u6cd5 \u5faa\u73af\u5199\u6cd5 if ( a == 0 ) \u3000\u3000 return b ; if ( b == 0 ) \u3000\u3000 return a ; while ( a != b ) { if ( a > b ) a -= b ; else { int t = a ; a = b - a ; b = t ; } } return a ; }","title":"2.1.2\u4ee3\u7801\uff1a"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#213","text":"\u4e24\u4e2a\u6b63\u6574\u6570a\u548cb\uff08a>b\uff09\uff0c\u5b83\u4eec\u7684\u6700\u5927\u516c\u7ea6\u6570\u7b49\u4e8ea\u9664\u4ee5b\u7684\u4f59\u6570c\u548cb\u4e4b\u95f4\u7684\u6700\u5927\u516c\u7ea6\u6570\u3002 \u5176\u5b9e\u5c31\u662f\u628a\u66f4\u76f8\u51cf\u635f\u53d8\u5f97\u66f4\u9ad8\u7ea7\u4e00\u70b9\uff08\u52a0\u51cf\u8fd0\u7b97\u53d8\u4e58\u9664\u8fd0\u7b97\uff0c\u63d0\u5347\u4e86\u4e00\u4e2a\u7ea7\u522b\uff09 \u4f46\u662f\u5927\u6574\u6570\u53d6\u6a21\u4f1a\u8ba9\u4e00\u4e9b\u9898\u6781\u4e3a\u5934\u75bc\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u8981\u614e\u91cd\u8003\u8651\u4ec0\u4e48\u65f6\u5019\u7528\u66f4\u76f8\u51cf\u635f\u4ec0\u4e48\u65f6\u5019\u7528\u8f97\u8f6c\u76f8\u9664\u3002","title":"2.1.3 \u8f97\u8f6c\u76f8\u9664\u6cd5"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#214","text":"C++ int gcd_1 ( int a , int b ){ //\u8f97\u8f6c\u76f8\u9664\u6cd5 \u5faa\u73af\u5199\u6cd5 while ( b > 0 ) { int t = a % b ; a = b ; b = t ; } return a ; } int gcd_2 ( int a , int b ) { //\u8f97\u8f6c\u76f8\u9664\u6cd5 \u9012\u5f52\u5199\u6cd5 return b ? gcd_2 ( b , a % b ) : a ; }","title":"2.1.4 \u4ee3\u7801"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#22-lcm","text":"LCM\u5373\u6700\u5c0f\u516c\u500d\u6570\uff0c\u5c0f\u5b66\u7684\u65f6\u5019\u4e5f\u5b66\u8fc7\uff0c\u5f53\u6211\u4eec\u6c42\u51faGCD\u7684\u65f6\u5019\uff0cLCM\u4e5f\u5c31\u51fa\u6765\u4e86\uff0c \\[LCM = \\frac{a \\times b} {GCD(a, b)}\\]","title":"2.2 LCM"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#23","text":"","title":"2.3 \u62d3\u5c55\u6b27\u51e0\u91cc\u5f97"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#231","text":"\u8f97\u8f6c\u76f8\u9664\u6cd5\u3001\u8d1d\u7956\u5b9a\u7406 \u8f97\u8f6c\u76f8\u9664\u6cd5\u5c31\u662f\u4e0d\u65ad\u7684\u8ba9\u8f83\u5927\u7684\u6570\u6a21\u4e0a\u8f83\u5c0f\u7684\u6570\uff0c\u6700\u540e\u4f7f\u5f97\u5176\u4e2d\u4e00\u4e2a\u6570\u4f4d0\uff0c\u6700\u540e\u5f97\u5230\u7b54\u6848 \u8d1d\u7956\u5b9a\u7406\uff1a \\(ax+by=c,x\u2208Z*,y\u2208Z*\\) \u6210\u7acb\u7684\u5145\u8981\u6761\u4ef6\u662f \\(gcd(a,b)|c\\) \u8d1d\u7956\u5b9a\u7406\u8bc1\u660e\uff1a \u8bbe \\(s=gcd(a,b)\\) \uff0c\u663e\u7136 \\(s|a\\) \uff0c\u5e76\u4e14 \\(s|b\\) \u53c8\u56e0\u4e3a \\(x\uff0cy\u2208Z\\) \u6240\u4ee5 \\(s|ax\\) , \\(s|by\\) \u663e\u7136\u8981\u4f7f\u5f97\u4e4b\u524d\u7684\u5f0f\u5b50\u6210\u7acb\uff0c\u5219\u5fc5\u987b\u6ee1\u8db3 \\(c\\) \u662f \\(a\\) \u548c \\(b\\) \u7684\u516c\u7ea6\u6570\u7684\u500d\u6570 \u53c8\u56e0\u4e3a \\(x\\) \u548c \\(y\\) \u662f\u6b63\u6574\u6570 \u6240\u4ee5 \\(c\\) \u5fc5\u7136\u662f \\(a,b\\) \u6700\u5927\u516c\u7ea6\u6570\u7684\u500d\u6570\u3002 \u56e0\u6b64\uff0c\u8bc1\u5f97\u8be5\u5b9a\u7406\u6210\u7acb \u5f53\u7136\u6211\u8fd9\u91cc\u5199\u7684\u53ef\u80fd\u53ea\u6709\u4e24\u5143\uff0c\u4f46\u662f\u8fd9\u4e2a\u5b9a\u7406\u53ef\u4ee5\u62d3\u5c55\u5230n\u5143\uff0c\u8bf7\u5927\u5bb6\u601d\u8003\u62d3\u5c55\u5230n\u5143\u7684\u60c5\u51b5","title":"2.3.1 \u524d\u7f6e\u77e5\u8bc6"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#232","text":"\u6c42\u5f97\u4efb\u610f\u4e00\u7ec4\u89e3\uff1a \\(ax+by=1\\)","title":"2.3.2 \u95ee\u9898\u5f15\u51fa"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#233","text":"\u5f88\u663e\u7136\uff0c\u6211\u4eec\u80fd\u77e5\u9053\u5982\u679c \\(gcd(a,b)!=1\\) \u7684\u8bdd\u662f\u65e0\u89e3\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u770b \\(gcd(a,b)=1\\) \u7684\u60c5\u51b5\uff0c\u901a\u8fc7\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u7684\u7b97\u6cd5\u6211\u4eec\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e00\u7c7b\u95ee\u9898","title":"2.3.3 \u601d\u8def"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#234","text":"C++ int ex_gcd ( int a , int b , int & x , int & y ) //\u8fd4\u56de\u7684\u503c\u8fd8\u662fGCD(a,b) { if ( b == 0 ) //\u7b49\u4e8e0\u7684\u60c5\u51b5\u76f4\u63a5\u8fd4\u56de\u4e86 { x = 1 ; y = 0 ; return a ; } int ans = ex_gcd ( b , a % b , x , y ); //\u83b7\u5f97x',y'; int temp = x ; //\u5b58\u50a8x' x = y ; //x=y' y = temp - ( a / b ) * x ; //y=x'-(a/b)*y' return ans ; }","title":"2.3.4 \u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u4ee3\u7801"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#235","text":"\u82e5 \\(ax+by=c\\) \u6709\u89e3\uff0c\u4e14\u8bbe \\(t = gcd(a,b)\\) \uff0c\u5219 \\(c \\% t =0\\) \u2460\u8bbe \\(ax+by=t\\) \u5f53b\u7b49\u4e8e0\u65f6\uff0c \\(t=a\\) \uff0c\u56e0\u4e3a \\(gcd(a,0)=a\\) \uff0c\u5219\u4f1a\u6709 \\(a\\times x = a\\) \uff0c\u5373 \\(x=1\\) \u2461 \u5f53b\u4e0d\u7b49\u4e8e0\u65f6 \u8bbe \\(ax+by=gcd(a,b)\\) ---\u2160 \u6211\u4eec\u53ef\u4ee5\u63a8\u51fa\u4e0b\u4e00\u5c42\u7684\u72b6\u6001\uff1a \\(bx'+(a\\%b)y'=gcd(b,a\\%b)\\) --- \u2161 \u53c8\u56e0\u4e3a \\(gcd(b,a\\%b)=gcd(a,b)\\) --- \u2162 \u6240\u4ee5\u7531\u2160\u3001\u2161\u3001\u2162\u53ef\u5f97\uff1a \\(ax+by=bx'+(a\\%b)y'\\) ---\u2164 \u53c8\u56e0\u4e3a \\(a\\%b = a - \\left \\lfloor \\frac{a}{b} \\right \\rfloor \\times b\\) --- \u2165 \u6240\u4ee5\u7531\u2164\u3001\u2165\u53ef\u5f97\uff1a \\(ax + by = a*y' + b\\times (x'- \\left \\lfloor \\frac{a}{b} \\right \\rfloor \\times y')\\) \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\uff1a \\(x = y',y = x'- \\left \\lfloor \\frac{a}{b} \\right \\rfloor \\times y'\\)","title":"2.3.5 \u539f\u7406\u8bc1\u660e"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#_5","text":"","title":"\u4e09\u3001\u552f\u4e00\u5206\u89e3\u5b9a\u7406"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#31","text":"\u6b63\u6574\u6570\u7684\u552f\u4e00\u5206\u89e3\u5b9a\u7406\uff0c\u5373\uff1a\u6bcf\u4e2a\u5927\u4e8e1\u7684\u81ea\u7136\u6570\u5747\u53ef\u5199\u4e3a \u8d28\u6570 \u7684\u79ef\uff0c\u800c\u4e14\u8fd9\u4e9b\u7d20\u56e0\u5b50\u6309\u5927\u5c0f\u6392\u5217\u4e4b\u540e\uff0c\u5199\u6cd5\u4ec5\u6709\u4e00\u79cd\u65b9\u5f0f\u3002","title":"3.1 \u7406\u8bba"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#32","text":"http://120.78.128.11/Challenge.jsp#B213","title":"3.2\u4e60\u9898"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#_6","text":"","title":"\u56db\u3001\u7d20\u6570\u4e09\u5927\u7b5b"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#41","text":"","title":"4.1 \u6734\u7d20\u7d20\u6570\u7b5b"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#411","text":"\u5730\u7403\u4eba\u90fd\u77e5\u9053\u4e00\u4e2a\u5408\u6570A\u7684\u56e0\u5b50\u80af\u5b9a\u662f\u5c0f\u4e8e\u7b49\u4e8e \\(\\sqrt{A}\\) \u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u5f97\u5230\u6734\u7d20\u7d20\u6570\u7b5b\u7684\u65b9\u6cd5\u904d\u5386\u67e5\u627e\u5230 \\(\\sqrt{A}\\) \u5373\u53ef\uff0c\u590d\u6742\u5ea6 \\(O(\\sqrt{N})\\)","title":"4.1.1 \u539f\u7406"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#412","text":"C++ bool is_prime ( int x ) { if ( x == 0 || x == 1 ) return false ; for ( int i = 2 ; i * i <= x ; ++ i ) { //\u8fd9\u91cc\u7528\u4e58\u6cd5\u662f\u4e3a\u4e86\u907f\u514d\u5f00\u6839\u53f7\u7684\u7cbe\u5ea6\u8bef\u5dee if ( x % i == 0 ) //\u5982\u679c\u627e\u5230\u4e86\u56e0\u5b50\uff0c\u90a3\u4e48\u8be5\u6570\u5c31\u4e0d\u662f\u8d28\u6570 return false ; } return true ; }","title":"4.1.2 \u4ee3\u7801"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#42","text":"","title":"4.2 \u57c3\u5f0f\u7b5b"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#421","text":"\u57c3\u5f0f\u7b5b\u7684\u539f\u7406\u5c31\u662f\u901a\u8fc7\u5bf9\u5df2\u77e5\u7684\u8d28\u6570\u8fdb\u884c\u52a0\u500d\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u80fd\u5f97\u5230\u8fd9\u4e2a\u8d28\u6570\u7684\u5927\u4e8e2\u7684\u6574\u6570\u500d\u6570\u90fd\u662f\u5408\u6570(\u56e0\u5b50\u5c31\u662f\u8be5\u500d\u6570)\uff0c\u8fd9\u6837\u901a\u8fc7\u7b5b\u9009N\u8303\u56f4\u4ee5\u5185\u7684\u8d28\u6570\u5c31\u80fd\u5f97\u5230\u6240\u6709\u7684\u8d28\u6570\uff0c\u603b\u4f53\u590d\u6742\u5ea6\uff1a \\(O(nloglogn)\\)","title":"4.2.1 \u539f\u7406"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#422","text":"C++ /* \u4f5c\u8005:Mangata \u57c3\u5f0f\u7b5b\u6a21\u677f */ //\u65f6\u95f4\u590d\u6742\u5ea6 :O(n*log(log(n))) #include <cstdio> #include <algorithm> #include <cstring> const int N = 10000005 ; bool vis [ N ] = { true , true }; //\u521d\u59cb\u5316 int main () { int n , x ; //\u79bb\u7ebf\u5904\u7406 for ( int i = 2 ; i * i <= N ; ++ i ) { if ( ! vis [ i ]) { for ( int j = i * 2 ; j <= N ; j += i ) //\u628a\u7d20\u6570\u7684\u500d\u6570\u7b5b\u6389 vis [ j ] = true ; } } while ( ~ scanf ( \"%d\" , & x )) { if ( vis [ x ]) puts ( \"No\" ); else puts ( \"Yes\" ); } return 0 ; }","title":"4.2.2 \u4ee3\u7801"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#43","text":"","title":"4.3 \u6b27\u62c9\u7b5b"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#431","text":"\u6b27\u62c9\u7b5b\u7684\u601d\u60f3\u548c\u57c3\u5f0f\u7b5b\u4e00\u6837\uff0c\u90fd\u662f\u901a\u8fc7\u5bf9\u8d28\u6570\u7684\u500d\u6570\u8fdb\u884c\u7b5b\u9009\uff0c\u4f46\u662f\u6709\u4e00\u70b9\u4e0d\u540c\u7684\u662f\u6211\u4eec\u5728\u5bf9\u8d28\u6570\u7684\u500d\u6570\u90fd\u8fdb\u884c\u6807\u8bb0\u7684\u65f6\u5019\uff0c\u8fd9\u91cc\u6211\u4eec\u5176\u5b9e\u662f\u91cd\u590d\u64cd\u4f5c\u4e86\u7684\uff0c\u800c\u6b27\u62c9\u7b5b\u5c31\u80fd\u907f\u514d\u91cd\u590d\u7b5b\u9009\uff0c\u8ba9\u6bcf\u4e2a\u5408\u6570\u53ea\u88ab\u5b83\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u7b5b\u9009\u4e00\u6b21\uff0c\u4ee5\u8fbe\u5230 \\(0(N)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u6838\u5fc3\u64cd\u4f5c\u4f53\u73b0\u5728\uff1a if (i % prime[j] == 0) break; \u524d\u7f6e\u77e5\u8bc6\uff1a \u4efb\u4f55\u5408\u6570\u90fd\u80fd\u8868\u793a\u6210\u591a\u4e2a\u7d20\u6570\u7684\u79ef\u3002\u6240\u4ee5\uff0c\u4efb\u4f55\u7684\u5408\u6570\u80af\u5b9a\u6709\u4e00\u4e2a\u6700\u5c0f\u8d28\u56e0\u5b50\u3002\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u6700\u5c0f\u8d28\u56e0\u5b50\u5c31\u53ef\u4ee5\u5224\u65ad\u4ec0\u4e48\u65f6\u5019\u4e0d\u7528\u7ee7\u7eed\u7b5b\u4e0b\u53bb\u4e86 \u7b80\u5355\u8bc1\u660e\uff1a \u5f53 \\(i\\%prime[j] == 0\\) \u65f6\uff0c\u90a3\u4e48\u5c31\u6709 \\(k \\times prime[j] = i;\\) \u8bbe \\(i\\times prime[j + 1] = X\\) (\u4e00\u4e2a\u672a\u77e5\u4efb\u610f\u5408\u6570) \u5219\uff1a \\(i \\times prime[j+1] = prime[j] \\times k \\times prime[j+1] = X\\) \u53c8\u2235$ prime[j + 1] > prime[j] $ \u2234 \\(prime[j + 1] \\times k \\ >\\ prime[j] \\times k\\) \u2234 \\(prime[j+1] \\times (k \\times prime[j]) = x = i \\times prime[j+1]\\) \u6240\u4ee5\u53ef\u5f97\uff0c \\(i \\times prime[j+1]\\) \u5fc5\u7136\u4f1a\u5728\u4ee5\u540e\u88ab \\(prime[j]\\) \u7684 \\(k \\times prime[j + 1]\\) \u500d\u6570\u5220\u6389 \u540e\u9762\u7684\u6570\u5b57\u540c\u7406","title":"4.3.1 \u539f\u7406"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#432","text":"C++ /* \u4f5c\u8005:Mangata \u6b27\u62c9\u7b5b\u6a21\u677f */ //\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) #include <cstdio> #include <algorithm> #include <cstring> #include <vector> const int N = 10000005 ; int prime [ N ]; bool vis [ N ]; void get_prime () { memset ( vis , true , sizeof vis ); memset ( prime , 0 , sizeof prime ); vis [ 0 ] = vis [ 1 ] = false ; for ( int i = 2 ; i <= N ; ++ i ) { if ( vis [ i ]) { prime [ ++ prime [ 0 ]] = i ; } for ( int j = 1 ; j <= prime [ 0 ] && i * prime [ j ] <= N ; ++ j ) { vis [ i * prime [ j ]] = false ; if ( i % prime [ j ] == 0 ) //\u907f\u514d\u91cd\u590d\u7b5b\u9009 break ; } } } int main () { int n ; get_prime (); while ( ~ scanf ( \"%d\" , & n )) { if ( vis [ n ]) puts ( \"Yes\" ); else puts ( \"No\" ); } return 0 ; }","title":"4.3.2 \u4ee3\u7801"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#44","text":"\u5bf9\u6bd4\u8f83\u5927\u7684\u8d28\u6570\u8fdb\u884c\u4e00\u4e2a\u68c0\u6d4b\uff08\u6709\u4e00\u5b9a\u968f\u673a\u6027\uff09","title":"4.4 \u62d3\u5c55\uff1a\u7c73\u52d2\u7f57\u5bbe"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#_7","text":"","title":"\u4e94\u3001\u77e9\u9635\u8fd0\u7b97"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#51","text":"\u76f4\u63a5\u5bf9\u5e94\u4f4d\u7f6e\u76f8\u52a0\u51cf\u5373\u53ef \\[\\begin{bmatrix} 4 & 3 \\\\ 9 & 9 \\end{bmatrix} + \\begin{bmatrix} 1 & 3 \\\\ 1 & 4 \\end{bmatrix}= \\begin{bmatrix} 5 & 6 \\\\ 10 & 13 \\end{bmatrix}\\] \\[\\begin{bmatrix} 4 & 3 \\\\ 9 & 9 \\end{bmatrix} -\\begin{bmatrix} 1 & 3 \\\\ 1 & 4 \\end{bmatrix} =\\begin{bmatrix} 3 & 0 \\\\ 8 & 5 \\end{bmatrix}\\]","title":"5.1 \u77e9\u9635\u52a0\u51cf\u6cd5"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#52","text":"\u77e9\u9635\u4e58\u6cd5\u5c31\u662f \\(A\\) \u77e9\u9635\u7684\u7b2c \\(i\\) \u884c \u548c \\(B\\) \u77e9\u9635\u7684\u7b2c \\(j\\) \u5217 \u8fdb\u884c\u4e58\u6cd5\u8fd0\u7b97\uff0c\u5e76\u4f5c\u4e3a\u7ed3\u679c\u77e9\u9635C\u7684 \\(C[i][j]\\) \u5143\u7d20 \\[\\begin{bmatrix} 4 & 3 \\\\ 9 & 9 \\end{bmatrix} \\times \\begin{bmatrix} 1 & 3 \\\\ 1 & 4 \\end{bmatrix} =\\begin{bmatrix} 4 \\times 1 + 3\\times1 & 4 \\times 3 + 3\\times 4 \\\\ 9 \\times 1 + 9 \\times 1 & 9 \\times 3 + 9 \\times 4 \\end{bmatrix} =\\begin{bmatrix} 7 & 24 \\\\ 18 & 63 \\end{bmatrix} \\]","title":"5.2 \u77e9\u9635\u4e58\u6cd5"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#53","text":"C++ #include <bits/stdc++.h> using namespace std ; #define N 100 struct Matrix { int n , m ; int mp [ N ][ N ]; void init ( int n , int m ) { this -> n = n ; this -> m = m ; } }; Matrix add ( Matrix L , Matrix R ) { //\u52a0\u6cd5 if ( L . n != R . n || L . m != R . m ) return L ; Matrix M ; for ( int i = 0 ; i < L . n ; ++ i ) { for ( int j = 0 ; j < L . m ; ++ j ){ M . mp [ i ][ j ] = L . mp [ i ][ j ] + R . mp [ i ][ j ]; } } return M ; } Matrix reduce ( Matrix L , Matrix R ) { //\u51cf\u6cd5 if ( L . n != R . n || L . m != R . m ) return L ; Matrix M ; for ( int i = 0 ; i < L . n ; ++ i ) { for ( int j = 0 ; j < L . m ; ++ j ){ M . mp [ i ][ j ] = L . mp [ i ][ j ] - R . mp [ i ][ j ]; } } return M ; } Matrix mult ( Matrix L , Matrix R ) { //\u4e58\u6cd5 if ( L . n != R . m || L . m != R . n ) return L ; Matrix M ; for ( int i = 0 ; i < L . n ; ++ i ) { for ( int j = 0 ; j < R . m ; ++ j ){ for ( int k = 0 ; k < L . m ; ++ k ) { M . mp [ i ][ j ] += L . mp [ i ][ k ] * R . mp [ k ][ j ]; } } } return M ; } int main () { Matrix a , b ; a . init ( 2 , 2 ); b . init ( 2 , 2 ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) { a . mp [ i ][ j ] = i * 2 + j ; b . mp [ i ][ j ] = i * 2 + j ; } } Matrix c = mult ( a , b ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) { printf ( \"%d \" , c . mp [ i ][ j ]); } putchar ( '\\n' ); } return 0 ; }","title":"5.3 \u4ee3\u7801"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#_8","text":"","title":"\u516d\u3001\u5feb\u901f\u5e42&amp;\u9f9f\u901f\u4e58"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#61","text":"","title":"6.1\u5feb\u901f\u5e42"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#611","text":"\u7ed9\u51fa\u4e09\u4e2a\u6570a\u3001b\u3001c,\u6c42 \\(a^b \\ mod \\ c\\) \u8fd0\u7528\u524d\u9762\u5b66\u5230\u7684\u540c\u4f59\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5bf9a\u8fdb\u884c\u4e58b\u6b21\u7136\u540e\u53d6\u6a21c\uff0c\u4f46\u662f\u5f53b\u5f88\u5927\u7684\u65f6\u5019\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u65f6\u5019\u5c31\u8981\u7528\u5230\u4e86\u4eca\u5929\u7684\u5185\u5bb9\uff0c \u5feb\u901f\u5e42 \uff0c\u5feb\u901f\u5e42\u4f5c\u4e3a\u4e00\u4e2a\u57fa\u7840\u7684\u77e5\u8bc6\uff0c\u5728\u5f88\u591a\u7684\u5730\u65b9\u90fd\u4f1a\u7528\u5230\u5b83\uff0c\u4f8b\u5982\u6c42\u9ad8\u5e42\u8fd0\u7b97\uff0c\u6c42\u9006\u5143\u3001\u77e9\u9635\u5feb\u901f\u5e42\u7b49","title":"6.1.1 \u95ee\u9898\u5f15\u51fa"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#612","text":"\u5feb\u901f\u5e42\u7684\u539f\u7406\u5176\u5b9e\u7528\u5230\u4e86\u4f4d\u8fd0\u7b97\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u7684\u5173\u6ce8\u70b9\u5e94\u8be5\u662f\u8fd9\u4e2a\u5e42b\uff0c\u4e4b\u524d\u7684\u65b9\u6cd5\u662f\u76f4\u63a5\u5faa\u73af\u4e58b\u6b21\uff0c\u4f46\u662f\u5f53b\u5f88\u5927\u4f8b\u59821e9\u7684\u65f6\u5019\u5c31\u4e0d\u6ee1\u8db3\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2ab\u5148\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\uff0c\u6211\u4e3e\u4e2a\u6817\u5b50\uff1a \u4f8b\u5982b = 11\uff0c\u90a3\u4e48\u5b83\u7684\u4e8c\u8fdb\u5236\u5c31\u4e3a 1011B \uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8981\u6c42\u7684\u8fd9\u4e2a \\(a^b \\ = \\ a^1 \\times a^2 \\times a ^ 8\\) \u4e0d\u96be\u770b\u51fa\u6211\u4eec\u5c06\u8fd9\u4e2ab\u5206\u89e3\u6210\u4e86\u82e5\u5e72\u4e2a2\u7684\u5e42\u7684\u79ef\uff0c\u6211\u4eec\u901a\u8fc7\u4f4d\u8fd0\u7b97\u53ea\u9700\u8981\u901a\u8fc7\u4e0d\u65ad\u7684\u5de6\u79fb\u7ef4\u62a4\u4e00\u4e2a2\u7684\u5e42\u7684\u503c\u5373\u53ef\uff0c\u5f53\u8be5\u4f4d\u4e3a1\u90a3\u4e48\u5c31\u4e58\u4e0a\u5b83\uff0c\u8fd9\u5c31\u662f\u5feb\u901f\u5e42\u7684\u539f\u7406\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(log_b\\)","title":"6.1.2 \u539f\u7406"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#613","text":"C++ //\u5feb\u901f\u5e42 ll ksm ( ll x , ll n , ll mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = ( res * x ) % mod ; x = ( x * x ) % mod ; n >>= 1 ; } return res ; }","title":"6.1.3 \u4ee3\u7801"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#62","text":"","title":"6.2\u5e7f\u4e49\u5e42"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#621","text":"\u5df2\u77e5\u6570\u5217 \\(a_1,a_2\u2026\u2026a_n\\) \u548c \\(C\\) \u8ba1\u7b97 \\((a_1 \\times a_2 \\times \u2026\u2026\\times a_n) \\%C\\) \u7684\u7ed3\u679c","title":"6.2.1\u95ee\u9898\u5f15\u51fa"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#622","text":"\u8bbe\uff1a\u25cb\u4e3a\u4e00\u79cd\u8fd0\u7b97\u4e14\u4e0e\u96c6\u5408V\u6784\u6210\u7fa4\uff0ca\u2208V\uff0ce\u4e3a\u25cb\u8fd0\u7b97\u7684\u5e7a\u5143\u3002 \u5373e\u6ee1\u8db3\u5bf9\u4e8e\u4efb\u610f\u7684a,\u6709 \\(e\u25cba\\ = \\ a\u25cbe\\ =\\ a\\) \u6211\u4eec\u53ef\u4ee5\u8bb0 \\(a^\u25cb=e\\) \\(a_n\\ =\\ a_{n-1}\\ \u25cb\\ a\\) \u5219\u6709\u4ee5\u4e0b\u6027\u8d28 \\(a_n\\ +\\ m\\ =\\ a_n\\ \u25cb\\ a_m\\) \u5219\u6b64\u65f6\u8ba1\u7b97a\u5173\u4e8e\u25cb\u8fd0\u7b97\u7684n\u6b21\u5e42\u7684\u5feb\u901f\u5e42\u53ef\u4ee5\u8fd9\u6837\u5199 C++ res = e ; temp = a ; while ( n ) { if ( n & 1 ) res = res \u25cb temp ; temp = temp \u25cb temp ; n >>= 1 ; } return res ; \u7136\u540e\u5c31\u50cf \\(a^b=a\\times a\\times a\\times a\\times a\u2026\\) \u662f\u5173\u4e8e\u4e58\u6cd5\u7684\u5e42\u8fd0\u7b97\uff0c\u53c8\u56e0\u4e3a \\(1\\times a\\ =\\ a \\times 1 \\ =\\ a\\) ,\u6240\u4ee5\u4e58\u6cd5\u5e7a\u5143e\u5c31\u662f1\uff0c\u5e26\u5165\u4e0a\u9762\u7684\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u5e38\u89c1\u7684\u4e58\u6cd5\u5feb\u901f\u5e42,\u4e0b\u9762\u7684\u9f9f\u901f\u4e58\u540c\u7406","title":"6.2.2\u539f\u7406"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#63","text":"","title":"6.3 \u9f9f\u901f\u4e58\u6cd5"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#631","text":"\u5982\u679c\u6211\u4eec\u60f3\u8981\u8ba1\u7b97\u4e24\u4e2a\u5927\u6574\u6570A\u3001B(long long\u8303\u56f4\u5185)\u7684\u4e58\u6cd5\u5e76\u53d6\u6a21C\u600e\u4e48\u529e\u5462\uff1f\u624b\u52a8\u5199\u9ad8\u7cbe\u5ea6\u5417\uff1f\u663e\u7136\u4e0d\u9700\u8981\uff0c\u8fd9\u91cc\u5c31\u80fd\u7528\u5230\u6211\u4eec\u73b0\u5728\u8981\u5b66\u7684\u9f9f\u901f\u4e58\u6cd5","title":"6.3.1\u95ee\u9898\u5f15\u51fa"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#632","text":"\u548c\u4e0a\u9762\u7684\u5feb\u901f\u4e58\u540c\u7406\uff0c\u4e0d\u96be\u770b\u51fa\u6b64\u5904\u7684\u6b64\u5904\u7684\u4e58\u6cd5\u5e7a\u5143\u5c31\u662f0\uff0c\u5982\u679c\u8fd8\u662f\u4e0d\u61c2\u8bf7\u770b\u4e0a\u9762\u7684\u5e7f\u4e49\u5e42\u7684\u539f\u7406","title":"6.3.2\u539f\u7406"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#633","text":"C++ ll gsc ( ll x , ll n , ll mod ) { ll res = 0 ; x %= mod ; n %= mod ; while ( n ) { if ( n & 1 ) res = ( res + x ) % mod ; x = ( x % mod + x % mod ) % mod ; n >>= 1 ; } return res % mod ; }","title":"6.3.3 \u4ee3\u7801"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#_9","text":"","title":"\u4e03\u3001\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#71","text":"\u6c42\u4e00\u4e2a \\(N\\times N\\) \u77e9\u9635\u7684K\u6b21\u5e42 \u6211\u4eec\u4e4b\u524d\u5b66\u8fc7\u77e9\u9635\u7684\u52a0\u51cf\u4e58\uff0c\u77e5\u9053\u4e58\u6cd5\u7684\u590d\u6742\u5ea6\u4e3a \\(O(N^3)\\) \u7684\uff0c\u5982\u679c\u6734\u7d20\u7684\u505a\u6cd5\u5c31\u662f \\(O(N^3 \\times k)\\) \u7684\uff0c\u5f53k\u5f88\u5c0f\u7684\u65f6\u5019\u6211\u4eec\u8fd9\u6837\u8ba1\u7b97\u5012\u6ca1\u95ee\u9898\uff0c\u4f46\u662f\u5f53k\u5f88\u5927\u7684\u65f6\u5019\u5462\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u5230\u8fd9\u4e00\u5c0f\u8282\u7684\u5185\u5bb9\uff0c \u77e9\u9635\u5feb\u901f\u5e42","title":"7.1\u95ee\u9898\u5f15\u51fa"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#72","text":"\u539f\u7406\u53c2\u89c1\u4e0a\u9762\u7684\u5e7f\u4e49\u5e42\uff0c\u5b9e\u8d28\u548c\u5feb\u901f\u5e42\uff0c\u9f9f\u901f\u4e58\u7b49\u6ca1\u6709\u592a\u5927\u533a\u522b\u53ea\u4e0d\u8fc7\u5e7a\u5143\u4e0d\u540c,\u6b64\u5904\u7684\u5e7a\u5143\u53d8\u6210\u4e86\u5355\u4f4d\u77e9\u9635\uff08\u4e3b\u5bf9\u89d2\u7ebf\u5168\u4e3a1\uff0c\u5176\u4f59\u4e3a0\uff09\uff0c\u8fd0\u7b97\u65b9\u5f0f\u53d8\u6210\u4e86\u77e9\u9635\u4e58\u6cd5","title":"7.2\u539f\u7406"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#73","text":"C++ #include <bits/stdc++.h> using namespace std ; #define ll long long #define mod 1000000007 #define N 200 struct Matrix { ll mp [ N ][ N ]; }; Matrix loc ; ll n , k ; Matrix operator * ( const Matrix & x , const Matrix & y ) { Matrix a ; memset ( & a , 0 , sizeof ( a )); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) for ( int k = 1 ; k <= n ; ++ k ) a . mp [ i ][ j ] = (( a . mp [ i ][ j ] + x . mp [ i ][ k ] * y . mp [ k ][ j ]) % mod ) % mod ; return a ; } void ksm ( ll k ) { Matrix ans ; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) ans . mp [ i ][ j ] = i == j ; while ( k ) { if ( k & 1 ) ans = ans * loc ; loc = loc * loc ; k >>= 1 ; } for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { printf ( \"%lld \" , ans . mp [ i ][ j ]); } putchar ( '\\n' ); } } int main () { scanf ( \"%lld%lld\" , & n , & k ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) scanf ( \"%lld\" , & loc . mp [ i ][ j ]); ksm ( k ); return 0 ; }","title":"7.3 \u4ee3\u7801"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#75","text":"","title":"7.5\u77e9\u9635\u5feb\u901f\u5e42\u6c42\u89e3\u6590\u6ce2\u90a3\u5951\u95ee\u9898"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#751","text":"\u4f17\u6240\u5468\u77e5\u6590\u6ce2\u90a3\u5951\u95ee\u9898 \\(F_n = F_{n-1} + F_{n-2}\\) \uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u9012\u63a8\u5f0f\u6c42\u51fa\u53d6\u6a21\u60c5\u51b5\u4e0b\u7684\u7b2cN\u9879\u7684\u503c\uff0c\u4f46\u662f\u5982\u679cN\u5f88\u5927\u5462\uff08\u6bd4\u59821e18\uff09\uff0c\u8fd9\u65f6\u5019\u600e\u4e48\u529e\u5462\uff1f","title":"7.5.1 \u95ee\u9898\u5f15\u51fa"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#752","text":"\u5f88\u663e\u7136\u6211\u4eec\u80fd\u60f3\u5230\u7528\u4e00\u4e2a\u77e9\u9635\u4e58\u6cd5\u6765\u8868\u8fbe\u8fd9\u4e2a\u9012\u63a8\u8fc7\u7a0b \\[ \\begin{bmatrix} F_{n-1} & F_{n} \\end{bmatrix} =\\begin{bmatrix} F_{n-2} & F_{n-1} \\end{bmatrix} \\times \\begin{bmatrix} 0 & 1 \\\\ 1 & 1 \\end{bmatrix} \\] \u7136\u540e\u6211\u4eec\u6b64\u65f6\u5047\u8bbeP= \\(\\begin{bmatrix} 0 & 1 \\\\ 1 & 1 \\end{bmatrix}\\) \u5c31\u80fd\u5f97\u5230\u6590\u6ce2\u90a3\u5951\u7684\u77e9\u9635\u9012\u63a8\u5f0f\uff1a \\[ \\begin{bmatrix} F_n & F_{n-1} \\\\ \\end{bmatrix} =\\begin{bmatrix} F_0 & F_1 \\\\ \\end{bmatrix} \\times P^n \\] \u6211\u4eec\u5c31\u80fd\u5728 \\(log_n\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6c42\u51fa \\(F_n\\) \u4e86","title":"7.5.2 \u601d\u8def"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#753","text":"\u5361\u897f\u5c3c\u6027\u8d28\uff08Cassini's identity\uff09\uff1a \\(F_{n-1}\\times F_{n+1} - F_n^2\\ = (-1)^n\\) \u9644\u52a0\u6027\u8d28\uff1a \\(F_n+k \\ = \\ F_k F_{n+1} + F_{k-1}F_n\\) GCD \u6027\u8d28\uff1a \\((F_m,F_n) \\ = \\ F_{(m,n)}\\)","title":"7.5.3 \u6590\u6ce2\u90a3\u5951\u6570\u5217\u6027\u8d28"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#_10","text":"","title":"\u516b\u3001\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#81","text":"\u82e5P\u4e3a\u8d28\u6570\uff0c \\(GCD(a,p) = 1\\) \uff0c\u5219 \\(a^{p-1} \u2261 1 \\ (mod \\ p)\\) \u6362\u53e5\u8bdd\u8bf4\uff1a\u5bf9\u4e8e\u4efb\u610f\u6574\u6570a\uff0c\u6709 \\(a^p = a \\ (mod \\ p)\\)","title":"8.1 \u8d39\u9a6c\u5c0f\u5b9a\u7406"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#82","text":"","title":"8.2 \u9006\u5143"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#821","text":"\u5982\u679c\u4e00\u4e2a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b \\(ax \u2261 1 \\ (mod \\ p)\\) \uff0c\u5219x\u88ab\u79f0\u4f5c\u4e3a \\(a \\ mod \\ p\\) \u7684\u9006\u5143\uff0c\u8bb0\u4f5c \\(a^{-1}\\)","title":"8.2.1 \u7b80\u4ecb"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#822","text":"\u6709\u4e24\u79cd\u65b9\u6cd5 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6cd5 \u548c \u5feb\u901f\u5e42\u6cd5 \u6211\u4eec\u8fd9\u91cc\u53ea\u4ecb\u7ecd\u5feb\u901f\u5e42\u7684\u65b9\u6cd5\uff1a \u7528\u5230\u4e86\u4e0a\u9762\u7684\u524d\u7f6e\u77e5\u8bc6\uff1a \u8d39\u9a6c\u5c0f\u5b9a\u7406 \u7531\u4e0a\u9762\u53ef\u5f97\uff1aa\u7684\u4e58\u6cd5\u9006\u5143\u4e3a \\(a^{p-2}\\)","title":"8.2.2 \u5982\u4f55\u6c42"},{"location":"%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/#_11","text":"http://acm.mangata.ltd/training/61d167fb9583df9f1d5e39f2","title":"\u4e5d\u3001\u8bad\u7ec3\u9898\u5355"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/","text":"STL\u548cAlgorithm \u00b6 \u524d\u8a00 \u00b6 \u914d\u5957\u89c6\u9891\uff1a \u84dd\u6865\u676f\u96c6\u8bad\u4e4bAlgorithm\u5e93\u51fd\u6570: https://www.bilibili.com/video/BV1ia411B7U2 \u84dd\u6865\u676f\u96c6\u8bad\u4e4bSTL\u6f14\u793a\uff1a https://www.bilibili.com/video/BV1Z3411v72U \u84dd\u6865\u676f\u96c6\u8bad\u4e4bAlgorithm\u5e93\u51fd\u6570\uff1a https://www.bilibili.com/video/BV1Y34y1z7uX \u4e00\u3001 STL\u90e8\u5206 \u00b6 1.1 queue \uff08FIFO\uff09 \u00b6 1.1.1 \u5934\u6587\u4ef6 \u00b6 \u4f7f\u7528\u8be5\u5bb9\u5668\u9700\u8981 #include<queue> \u5934\u6587\u4ef6 1.1.2 \u5b9a\u4e49 \u00b6 queue<int> que; //\u8fd9\u4e2aint\u53ef\u4ee5\u66f4\u6362\u6210\u81ea\u5df1\u60f3\u8981\u7684\u6570\u636e 1.1.3 \u57fa\u672c\u64cd\u4f5c \u00b6 1.que.size() \u8fd4\u56de\u961f\u5217\u5143\u7d20\u6570\u91cf 2.que.empty() \u8fd4\u56de\u961f\u5217\u662f\u5426\u4e3a\u7a7a(\u7a7a\u8fd4\u56detrue,\u53cd\u4e4bfalse) 3.que.push() \u52a0\u5165\u961f\u5217 4.que.pop() \u51fa\u961f 5.que.front() \u8fd4\u56de\u961f\u9996 6.que.back() \u8fd4\u56de\u961f\u5c3e 1.1.4 \u5e94\u7528 \u00b6 \u961f\u5217\u5e7f\u6cdb\u5f15\u7528\u5728\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff08BFS\uff09\u91cc\u3001\u7ea6\u745f\u592b\u73af\u95ee\u9898\u7b49 1.2 stack \uff08FILO\uff09 \u00b6 1.2.1 \u5934\u6587\u4ef6 \u00b6 \u4f7f\u7528\u8be5\u5bb9\u5668\u9700\u8981 #include<stack> \u5934\u6587\u4ef6 1.2.2 \u5b9a\u4e49 \u00b6 stack<int> S; 1.2.3 \u57fa\u672c\u64cd\u4f5c \u00b6 1. S.size() \u8fd4\u56de\u6808\u91cc\u5143\u7d20\u4e2a\u6570 2. S.empty() \u8fd4\u56de\u6808\u662f\u5426\u4e3a\u7a7a(\u7a7a\u8fd4\u56detrue,\u53cd\u4e4bfalse) 3. S.push() \u538b\u5165\u4e00\u4e2a\u5143\u7d20\u8fdb\u6808 4. S.pop() \u4ece\u6808\u5f39\u51fa\u4e00\u4e2a\u5143\u7d20 5. S.top() \u8fd4\u56de\u6808\u9876 1.2.4 \u5e94\u7528 \u00b6 \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u7b49 1.3 priority_queue \u00b6 1.3.1 \u5934\u6587\u4ef6 \u00b6 \u4f7f\u7528\u8be5\u5bb9\u5668\u9700\u8981 #include<priority_queue> \u5934\u6587\u4ef6 1.3.2 \u5b9a\u4e49 \u00b6 priority_queue<int> que; \u9ed8\u8ba4\u5927\u9876\u5806\uff0c\u901a\u8fc7\u6dfb\u52a0 greater<int> \u5c31\u80fd\u83b7\u5f97\u5c0f\u9876\u5806 \u4f46\u662f\u8981\u6ce8\u610f\u8fd9\u91cc\u5982\u679c\u60f3\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u7ed3\u6784\u7684\u8bdd\uff0c\u9700\u8981\u624b\u5199\u6392\u5e8f\u89c4\u5219\uff1a eg\uff1a C++ struct Node //\u8fd0\u7b97\u7b26\u91cd\u8f7d { int a , b ; int val ; bool friend operator < ( node x , node y ) //\u6bd4\u8f83\u7684\u662fval { return x . val > y . val ; } }; priority_queue < Node > que ; 1.3.3 \u57fa\u672c\u64cd\u4f5c \u00b6 1.que.size() \u8fd4\u56de\u961f\u5217\u5143\u7d20\u6570\u91cf 2.que.empty() \u8fd4\u56de\u961f\u5217\u662f\u5426\u4e3a\u7a7a(\u7a7a\u8fd4\u56detrue,\u53cd\u4e4bfalse) 3.que.push() \u52a0\u5165\u961f\u5217 4.que.pop() \u51fa\u961f 5.que.top() \u8fd4\u56de\u961f\u9996 1.3.4 \u5e94\u7528 \u00b6 \u5e94\u7528\u5728\u4e00\u4e9b\u8d2a\u5fc3\u7684\u7b97\u6cd5\u4e0a\u9762\uff0c\u4f18\u5316dijkstra\u590d\u6742\u5ea6\u7b49 1.3.5 \u91cd\u8f7d\u4ee3\u7801 \u00b6 C++ pq . push ( item ) : \u6dfb\u52a0\u5143\u7d20 O ( logn ) pq . pop () : \u4f7f\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u51fa\u961fO ( logn ) pq . top () : \u83b7\u53d6\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u5143\u7d20O ( 1 ) pq . size () : \u83b7\u53d6\u5143\u7d20\u4e2a\u6570O ( 1 ) pq . empty () : \u662f\u5426\u4e3a\u7a7aO ( 1 ) \u4f18\u5148\u961f\u5217\u7684\u5b9a\u4e49 \uff1a priority_queue < int > q1 ; //\u9ed8\u8ba4\u4ece\u5927\u5230\u5c0f\uff0c\u5927\u9876\u5806 priority_queue < int , vector < int > , less < int > > q2 ; //\u964d\u5e8f\u961f\u5217\uff0c\u5927\u9876\u5806 priority_queue < int , vector < int > , greater < int > > q3 ; //\u5347\u5e8f\u961f\u5217\uff0c\u5c0f\u9876\u5806 \u5bf9\u4e8e\u7ed3\u6784\u4f53\u5b9a\u4e49 \uff1a struct T1 { //\u6cd5\u4e00 \u5f3a\u70c8\u63a8\u8350 int x , y ; friend bool operator < ( T1 a , T1 b ){ return a . x < b . x ; } }; priority_queue < T1 > q1 ; struct T1 { //\u6cd5\u4e8c int x , y ; bool operator < ( const T1 & a ) const { return x < a . x ; //\u5927\u9876\u5806 } }; priority_queue < T1 > q1 ; struct T2 { int x , y ;}; //\u6cd5\u4e09 bool operator < ( T2 a , T2 b ){ return a . x > b . x ; } priority_queue < T2 > q2 ; struct T3 { int x , y ;}; //\u6cd5\u56db struct tmp { //\u91cd\u5199\u4eff\u51fd\u6570 bool operator () ( T3 a , T3 b ){ return a . x < b . x ; //\u5927\u9876\u5806 } }; priority_queue < T3 , vector < T3 > , tmp > q3 1.4 vector \u00b6 1.4.1 \u5934\u6587\u4ef6 \u00b6 \u4f7f\u7528\u8be5\u5bb9\u5668\u9700\u8981 #include<vector> \u5934\u6587\u4ef6 1.4.2 \u5b9a\u4e49\u548c\u7279\u70b9 \u00b6 vector<int> V; \u53ef\u4ee5\u7406\u89e3\u4e3a\u53d8\u957f\u6570\u7ec4\uff0c\u5bf9\u5143\u7d20\u7684\u8bbf\u95ee\u4ee5\u53ca\u4f7f\u7528\u7b49\u975e\u5e38\u65b9\u4fbf\uff0c\u4f46\u662f\u5f53\u5143\u7d20\u5b58\u50a8\u8fc7\u591a\u4f1a\u9020\u6210\u5e38\u6570\u8fc7\u5927 1.4.3 \u57fa\u672c\u64cd\u4f5c \u00b6 v.push_back(item): \u5411v\u540e\u52a0\u4e00\u4e2a\u5143\u7d20O(1) v.pop_back(); \u5220\u9664v\u6700\u540e\u4e00\u4e2a\u5143\u7d20O(1) v.size(); \u83b7\u53d6v\u4e2d\u5143\u7d20\u4e2a\u6570O(1) v.resize(n); \u628av\u7684\u957f\u5ea6\u91cd\u65b0\u8bbe\u5b9a\u4e3an\u4e2a\u5143\u7d20O(|n-size|) v.empty() \u5224\u65adv\u662f\u5426\u4e3a\u7a7aO(1) v.clear(); \u6e05\u7a7av\u4e2d\u7684\u5143\u7d20O(size) v[index]; \u83b7\u53d6v\u4e2d\u4e0b\u6807\u4e3aindex\u7684\u5143\u7d20O(1) v.begin(); \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 v.end(); \u8fd4\u56de\u6307\u5411vector\u672b\u5c3e(\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u7684\u90a3\u4e2a\u4f4d\u7f6e)\u7684\u8fed\u4ee3\u5668 v.front(); \u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20 v.back(); \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20 v.erase(iterator loc); \u5220\u9664loc\u6240\u6307\u5143\u7d20\u5e76\u8fd4\u56de\u4e0b\u4e00\u5143\u7d20\u8fed\u4ee3\u5668 v.erase(iterator start, iterator end); \u5220\u9664[start, end)\u4e4b\u95f4\u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u88ab\u5220\u9664\u5143\u7d20\u7684\u4e0b\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 vt.erase(unique(vt.begin(), vt.end()), vt.end()); \u53bb\u91cd\u64cd\u4f5c v.insert(v.begin()+4,3); \u5728\u7b2c\u4e94\u4e2a\u5143\u7d20\u524d\u63d2\u5165\u4e00\u4e2a\u5143\u7d20 1.4.4 \u5e94\u7528 \u00b6 \u5e94\u7528\u5341\u5206\u5e7f\u6cdb 1.5 set \u00b6 1.5.1 \u5934\u6587\u4ef6 \u00b6 \u4f7f\u7528\u8be5\u5bb9\u5668\u9700\u8981 #incluide<set> \u5934\u6587\u4ef6 1.5.2 \u5b9a\u4e49 \u00b6 set<int> S set\u5c31\u76f8\u5f53\u4e8e\u662f\u6570\u5b66\u7684\u96c6\u5408\uff0c\u4f1a\u5bf9\u76f8\u540c\u7684\u5143\u7d20\u8fdb\u884c\u53bb\u91cd\u5904\u7406\u5e76\u9ed8\u8ba4\u6392\u5e8f\uff0c\u548c\u4f18\u5148\u961f\u5217\u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u60f3\u81ea\u5b9a\u4e49\u6570\u636e\u7ed3\u6784\uff0c\u90a3\u4e48\u9700\u8981\u5199\u91cd\u8f7d\u51fd\u6570 1.5.3 \u57fa\u672c\u64cd\u4f5c \u00b6 s.insert(item); \u63d2\u5165\u5143\u7d20O(logn) s.size(); \u83b7\u53d6\u5143\u7d20\u7684\u4e2a\u6570O(1) s.empty(); \u5224\u65ad\u662f\u5426\u4e3a\u7a7aO(1) s.clear(); \u6e05\u7a7as O(n) s.find(item); \u5728s\u4e2d\u67e5\u627eitem\u5e76\u8fd4\u56de\u5176iterator(\u8fed\u4ee3\u5668)\uff0c\u627e\u4e0d\u5230\u7684\u8bdd\u8fd4\u56des.end()O(logn) s.count(item); \u8fd4\u56des\u4e2ditem\u7684\u6570\u91cf\uff0c\u56e0\u4e3a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u4e0d\u80fd\u91cd\u590d\uff0c\u56e0\u6b64\u53ea\u80fd\u8fd4\u56de0\u62161 O(logn) s.erase(it): \u5220\u9664s\u4e2dit\u6307\u5411\u4f4d\u7f6e\u7684\u5143\u7d20 s.erase(item); \u5220\u9664s\u4e2d\u503c\u4e3aitem\u7684\u5143\u7d20 s.earse(it1,it2); \u5220\u9664[it1,it2) \u8fd9\u4e2a\u533a\u95f4\uff08\u8fed\u4ee3\u5668\uff09\u5bf9\u5e94\u4f4d\u7f6e\u7684\u5143\u7d20 iterator lower_bound( const key_type &key ); \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u952e\u503c >= key\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 iterator upper_bound( const key_type &key ); \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u952e\u503c > key\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 1.5.4 \u91cd\u8f7d\u4ee3\u7801 \u00b6 C++ struct T1 { int key , value ; bool operator < ( const T1 & a ) const { return key < a . key ; //\u6309\u7167\u5347\u5e8f\u6392\u5217 } }; struct T2 { int key , value ; }; struct T2cmp { bool operator () ( const int & a , const int & b ){ if ( abs ( a - b ) <= k ) return false ; return a < b ; } }; int main (){ int i , j ; set < T1 > s1 ; set < T2 , T2cmp > s2 ; set < string > ss1 ; //\u7b49\u4e8eset<string,less<int> > ss1;\u4ece\u5c0f\u5230\u5927 set < string , greater < string > > ss2 ; //\u4ece\u5927\u5230\u5c0f set < string , greater < string > > :: iterator itsey ; //set\u7684\u904d\u5386 set < string > :: iterator it ; for ( it = ss1 . begin (); it != ss1 . end (); it ++ ){ cout <<* it << endl ; } return 0 ; } 1.6 unordered_set \u00b6 \u8fd9\u4e2a\u5176\u5b9e\u5c31\u662f\u4e0d\u9700\u8981\u6392\u5e8f\u7684set\uff0c\u5c31\u4e0d\u7528\u5199\u91cd\u8f7d\u51fd\u6570\u4e86\uff0c\u5176\u4f59\u64cd\u4f5c\u548cset\u76f8\u540c 1.7 map \u00b6 1.5.1 \u5934\u6587\u4ef6 \u00b6 \u4f7f\u7528\u8be5\u5bb9\u5668\u9700\u8981 #include<map> \u5934\u6587\u4ef6 1.5.2 \u5b9a\u4e49 \u00b6 map<int,int> mp; \u6ce8\u610f\u7684\u662fmap\u662f\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u662f\u4e00\u4e2a\u6620\u5c04\u5173\u7cfb\uff0c\u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\u5e2e\u4f60\u5c01\u88c5\u597d\u4e86\u7684hash\u8868\uff0c\u901a\u8fc7\u952e\u8bbf\u95ee\u4f60\u7684\u503c 1.5.3 \u57fa\u672c\u64cd\u4f5c \u00b6 mp.size(); \u83b7\u53d6\u5143\u7d20\u4e2a\u6570O(1) mp.empty(); \u5224\u65ad\u662f\u5426\u4e3a\u7a7aO(1) mp.clear(); \u6e05\u7a7amp O(1) mp.find(key); \u5728map\u4e2d\u67e5\u627ekey\u5e76\u8fd4\u56de\u5176iterator,\u627e\u4e0d\u5230\u7684\u8bdd\u8fd4\u56demp.end() O(logn) mp.count(key); \u5728map\u4e2d\u627ekey\u7684\u6570\u91cf\uff0c\u7531\u4e8e\u6bcf\u4e2akey\u90fd\u662f\u552f\u4e00\u7684\uff0c\u53ea\u4f1a\u8fd4\u56de0\u62161 mp[key] \u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5230\u952e\u503c\u961fkey---value\u4e2d\u7684value\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u952e\u503c\u5bf9\uff0c\u90a3\u4e48mp[key]\u8fd4\u56de\u7684\u662fvalue\u7c7b\u578b\u9ed8\u8ba4\u6784\u9020\u5668\u6240\u6784\u9020\u7684\u503c\uff0c\u5e76\u5c06\u8be5\u952e\u503c\u5bf9\u63d2\u5165\u5230map\u4e2d mp[key]=tmp; \u53ef\u4ee5\u628a\u952e\u503c\u5bf9key---value\u4e2d\u7684value\u8d4b\u503c\u4e3atmp,\u5982\u679c\u6ca1\u6709\u5bf9\u5e94\u7684\u952e\u503c\u5bf9,\u5219\u5c06\u8be5\u952e\u503c\u5bf9\u63d2\u5165\u5230map\u4e2d\u590d\u6742\u5ea6\uff1a O(logn) mp.insert(make_pair(key,value)); \u5728mp\u4e2d\u63d2\u5165\u952e\u503c\u5bf9key----value\u3002\u4e00\u822c\u4e0d\u8fd9\u6837\u7528\uff0c\u60f3\u8981\u63d2\u5165\u952e\u503c\u5bf9\u7684\u8bdd\u76f4\u63a5\u4f7f\u7528mp[key]=value\u5373\u53ef\uff0cmap\u5df2\u7ecf\u5bf9[]\u8fd0\u7b97\u7b26\u91cd\u8f7d\u8fc7\u4e86. 1.5.4 \u5e94\u7528 \u00b6 \u5e94\u7528\u5728\u4e00\u4e9b\u9700\u8981\u952e\u503c\u5bf9\u5e94\u7684\u5730\u65b9 1.8 unordered_map \u00b6 1.8.1 \u5934\u6587\u4ef6 \u00b6 #include<unordered_map> 1.8.2 \u548cmap\u533a\u522b \u00b6 \u548c\u4e0a\u9762\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5185\u90e8\u53d8\u4e3a\u65e0\u5e8f\uff0c\u67e5\u627e\u6548\u7387\u8981\u7a0d\u5fae\u6bd4map\u9ad8\u4e00\u70b9\u70b9\uff08\u5185\u90e8\u662f\u54c8\u5e0c\u8868\u5b9e\u73b0\uff0c\u800cmap\u662f\u7ea2\u9ed1\u6811\uff09 1.9 pair \u00b6 1.9.1 \u5934\u6587\u4ef6 \u00b6 #include <utility> 1.9.2 \u5b9a\u4e49 \u00b6 pair<int,int> P; \u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u53ea\u6709\u4e24\u4e2a\u5143\u7d20\u7684\u7ed3\u6784\u4f53 1.9.3 \u57fa\u672c\u4f7f\u7528 \u00b6 pair<T1, T2> p1; //\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684pair\u5bf9\u8c61\uff08\u4f7f\u7528\u9ed8\u8ba4\u6784\u9020\uff09\uff0c\u5b83\u7684\u4e24\u4e2a\u5143\u7d20\u5206\u522b\u662fT1\u548cT2\u7c7b\u578b\uff0c\u91c7\u7528\u503c\u521d\u59cb\u5316\u3002 pair<T1, T2> p1(v1, v2); //\u521b\u5efa\u4e00\u4e2apair\u5bf9\u8c61\uff0c\u5b83\u7684\u4e24\u4e2a\u5143\u7d20\u5206\u522b\u662fT1\u548cT2\u7c7b\u578b\uff0c\u5176\u4e2dfirst\u6210\u5458\u521d\u59cb\u5316\u4e3av1\uff0csecond\u6210\u5458\u521d\u59cb\u5316\u4e3av2\u3002 make_pair(v1, v2); // \u4ee5v1\u548cv2\u7684\u503c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684pair\u5bf9\u8c61\uff0c\u5176\u5143\u7d20\u7c7b\u578b\u5206\u522b\u662fv1\u548cv2\u7684\u7c7b\u578b\u3002 p1 < p2; // \u4e24\u4e2apair\u5bf9\u8c61\u95f4\u7684\u5c0f\u4e8e\u8fd0\u7b97\uff0c\u5176\u5b9a\u4e49\u9075\u5faa\u5b57\u5178\u6b21\u5e8f\uff1a\u5982 p1.first < p2.first \u6216\u8005 !(p2.first < p1.first) && (p1.second < p2.second) \u5219\u8fd4\u56detrue\u3002 p1 == p2 // \u5982\u679c\u4e24\u4e2a\u5bf9\u8c61\u7684first\u548csecond\u4f9d\u6b21\u76f8\u7b49\uff0c\u5219\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u76f8\u7b49\uff1b\u8be5\u8fd0\u7b97\u4f7f\u7528\u5143\u7d20\u7684==\u64cd\u4f5c\u7b26\u3002 p1.first; // \u8fd4\u56de\u5bf9\u8c61p1\u4e2d\u540d\u4e3afirst\u7684\u516c\u6709\u6570\u636e\u6210\u5458\u3002 p1.second; // \u8fd4\u56de\u5bf9\u8c61p1\u4e2d\u540d\u4e3asecond\u7684\u516c\u6709\u6570\u636e\u6210\u5458\u3002 1.9.4 \u5e94\u7528\u573a\u666f \u00b6 \u5e94\u7528\u5230\u5750\u6807\u70b9\u7684\u8868\u793a\u7b49 1.10\u8fed\u4ee3\u5668 iterator \u00b6 1.10.1\u5b9a\u4e49\u65b9\u6cd5 \u00b6 \u5bb9\u5668\u7c7b\u540d::iterator \u8fed\u4ee3\u5668\u540d; 1.10.2 \u4f7f\u7528 \u00b6 \u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u6307\u9488\uff0c\u652f\u6301\u81ea\u589e\u548c\u81ea\u51cf\uff0c\u4f46\u662f\u4e0d\u652f\u6301\u591a\u4f4d\u79fb\u52a8 1.10.3 \u8be6\u7ec6\u5b66\u4e60\u8d44\u6599 \u00b6 http://c.biancheng.net/view/338.html 1.10 string \u00b6 \u4e8c\u3001Algorithm\u90e8\u5206 \u00b6 2.1 sort \u00b6 \u6392\u5e8f\u51fd\u6570\uff0c\u8fd9\u91cc\u5982\u679c\u60f3\u5b9a\u5236\u5316\u7684\u8bdd\u5219\u9700\u8981\u624b\u5199cmp\u51fd\u6570\uff0c\u548c\u6211\u4eec\u4e0a\u9762\u770b\u7684\u91cd\u8f7d\u6bd4\u8f83\u51fd\u6570\u7c7b\u4f3c\uff1a \u5b66\u4e60\u8fde\u63a5\uff1a https://blog.csdn.net/m0_46201544/article/details/116321894 2.2 __gcd \u00b6 \u6c42\u89e3\u6700\u5927\u516c\u56e0\u6570\u7684\u5185\u7f6e\u51fd\u6570\uff1a int c = __gcd(a,b); 2.3 max \u00b6 \u53c2\u6570\u662f\u4e24\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u6570\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u503c 2.4 min \u00b6 \u53c2\u6570\u662f\u4e24\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u6570\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u6700\u5c0f\u503c 2.5 abs \u00b6 \u8fd4\u56de\u8be5\u6570\u7684\u7edd\u5bf9\u503c 2.6 swap \u00b6 \u4ea4\u6362\u4e24\u6570 2.7 reverse \u00b6 \u53cd\u8f6c\u5bb9\u5668\u6216\u8005\u6570\u7ec4\uff0c\u5bb9\u5668\u7684\u8bdd\u9700\u8981\u6dfb\u52a0\u8fed\u4ee3\u5668\uff0c\u6570\u7ec4\u76f4\u63a5\u653e\u5730\u5740 eg: C++ vector < int > V ; V . push_back ( 1 ); V . push_back ( 2 ); int a [ 3 ] = { 0 , 1 , 2 }; reverse ( a , a + 3 ); for ( int i = 0 ; i < 3 ; ++ i ) printf ( \"%d \\n \" , a [ i ]); reverse ( V . begin (), V . end ()) 2.8 next_permutation \u00b6 \u8fd9\u4e2a\u662f\u4e00\u4e2a\u5168\u6392\u5217\u51fd\u6570\uff1a C++ do { xxx } while ( next_permutation ( a , a + n )); 2.9 lower_bound \u00b6 lower_bound (\u8d77\u59cb\u5730\u5740\uff0c\u7ed3\u675f\u5730\u5740\uff0c\u8981\u67e5\u627e\u7684\u6570\u503c) \u8fd4\u56de\u7684\u662f>=x\u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u5730\u5740\u3002 \u5728\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\uff1a lower_bound( begin,end,num) \uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 lower_bound( begin,end,num,greater()) :\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 2.10 upper_bound \u00b6 upper_bound (\u8d77\u59cb\u5730\u5740\uff0c\u7ed3\u675f\u5730\u5740\uff0c\u8981\u67e5\u627e\u7684\u6570\u503c) \u8fd4\u56de\u7684\u662f>x\u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u5730\u5740 \u5728\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\uff1a upper_bound( begin,end,num) \uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 \u5728\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\uff0c\u91cd\u8f7d lower_bound() \u548c`upper_bound() upper_bound( begin,end,num,greater()) :\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807 \u6ce8\u610f\u4e00\u70b9\u8fd9\u4e2a lower_bound \u548c upper_bound \u53ea\u80fd\u7528\u4e8e\u975e\u964d\u5e8f\u5217\uff0c\u5982\u679c\u8981\u7528\u4e8e\u975e\u5347\u5e8f\u5217\u7684\u90a3\u8981\u52a0\u4e00\u4e2a greater <int> () \u4e09\u3001\u8bad\u7ec3\u9898\u5355 \u00b6 http://acm.mangata.ltd/training/61cff0d9aa36161f3c11f143 \u76ee\u524d\u6709\u5927\u7ea630\u9898","title":"STL\u548cAlgorithm"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#stlalgorithm","text":"","title":"STL\u548cAlgorithm"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#_1","text":"\u914d\u5957\u89c6\u9891\uff1a \u84dd\u6865\u676f\u96c6\u8bad\u4e4bAlgorithm\u5e93\u51fd\u6570: https://www.bilibili.com/video/BV1ia411B7U2 \u84dd\u6865\u676f\u96c6\u8bad\u4e4bSTL\u6f14\u793a\uff1a https://www.bilibili.com/video/BV1Z3411v72U \u84dd\u6865\u676f\u96c6\u8bad\u4e4bAlgorithm\u5e93\u51fd\u6570\uff1a https://www.bilibili.com/video/BV1Y34y1z7uX","title":"\u524d\u8a00"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#stl","text":"","title":"\u4e00\u3001 STL\u90e8\u5206"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#11-queue-fifo","text":"","title":"1.1 queue  \uff08FIFO\uff09"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#111","text":"\u4f7f\u7528\u8be5\u5bb9\u5668\u9700\u8981 #include<queue> \u5934\u6587\u4ef6","title":"1.1.1 \u5934\u6587\u4ef6"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#112","text":"queue<int> que; //\u8fd9\u4e2aint\u53ef\u4ee5\u66f4\u6362\u6210\u81ea\u5df1\u60f3\u8981\u7684\u6570\u636e","title":"1.1.2 \u5b9a\u4e49"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#113","text":"1.que.size() \u8fd4\u56de\u961f\u5217\u5143\u7d20\u6570\u91cf 2.que.empty() \u8fd4\u56de\u961f\u5217\u662f\u5426\u4e3a\u7a7a(\u7a7a\u8fd4\u56detrue,\u53cd\u4e4bfalse) 3.que.push() \u52a0\u5165\u961f\u5217 4.que.pop() \u51fa\u961f 5.que.front() \u8fd4\u56de\u961f\u9996 6.que.back() \u8fd4\u56de\u961f\u5c3e","title":"1.1.3 \u57fa\u672c\u64cd\u4f5c"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#114","text":"\u961f\u5217\u5e7f\u6cdb\u5f15\u7528\u5728\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff08BFS\uff09\u91cc\u3001\u7ea6\u745f\u592b\u73af\u95ee\u9898\u7b49","title":"1.1.4 \u5e94\u7528"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#12-stack-filo","text":"","title":"1.2 stack \uff08FILO\uff09"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#121","text":"\u4f7f\u7528\u8be5\u5bb9\u5668\u9700\u8981 #include<stack> \u5934\u6587\u4ef6","title":"1.2.1 \u5934\u6587\u4ef6"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#122","text":"stack<int> S;","title":"1.2.2 \u5b9a\u4e49"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#123","text":"1. S.size() \u8fd4\u56de\u6808\u91cc\u5143\u7d20\u4e2a\u6570 2. S.empty() \u8fd4\u56de\u6808\u662f\u5426\u4e3a\u7a7a(\u7a7a\u8fd4\u56detrue,\u53cd\u4e4bfalse) 3. S.push() \u538b\u5165\u4e00\u4e2a\u5143\u7d20\u8fdb\u6808 4. S.pop() \u4ece\u6808\u5f39\u51fa\u4e00\u4e2a\u5143\u7d20 5. S.top() \u8fd4\u56de\u6808\u9876","title":"1.2.3 \u57fa\u672c\u64cd\u4f5c"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#124","text":"\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u7b49","title":"1.2.4 \u5e94\u7528"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#13-priority_queue","text":"","title":"1.3 priority_queue"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#131","text":"\u4f7f\u7528\u8be5\u5bb9\u5668\u9700\u8981 #include<priority_queue> \u5934\u6587\u4ef6","title":"1.3.1 \u5934\u6587\u4ef6"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#132","text":"priority_queue<int> que; \u9ed8\u8ba4\u5927\u9876\u5806\uff0c\u901a\u8fc7\u6dfb\u52a0 greater<int> \u5c31\u80fd\u83b7\u5f97\u5c0f\u9876\u5806 \u4f46\u662f\u8981\u6ce8\u610f\u8fd9\u91cc\u5982\u679c\u60f3\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u7ed3\u6784\u7684\u8bdd\uff0c\u9700\u8981\u624b\u5199\u6392\u5e8f\u89c4\u5219\uff1a eg\uff1a C++ struct Node //\u8fd0\u7b97\u7b26\u91cd\u8f7d { int a , b ; int val ; bool friend operator < ( node x , node y ) //\u6bd4\u8f83\u7684\u662fval { return x . val > y . val ; } }; priority_queue < Node > que ;","title":"1.3.2 \u5b9a\u4e49"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#133","text":"1.que.size() \u8fd4\u56de\u961f\u5217\u5143\u7d20\u6570\u91cf 2.que.empty() \u8fd4\u56de\u961f\u5217\u662f\u5426\u4e3a\u7a7a(\u7a7a\u8fd4\u56detrue,\u53cd\u4e4bfalse) 3.que.push() \u52a0\u5165\u961f\u5217 4.que.pop() \u51fa\u961f 5.que.top() \u8fd4\u56de\u961f\u9996","title":"1.3.3 \u57fa\u672c\u64cd\u4f5c"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#134","text":"\u5e94\u7528\u5728\u4e00\u4e9b\u8d2a\u5fc3\u7684\u7b97\u6cd5\u4e0a\u9762\uff0c\u4f18\u5316dijkstra\u590d\u6742\u5ea6\u7b49","title":"1.3.4 \u5e94\u7528"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#135","text":"C++ pq . push ( item ) : \u6dfb\u52a0\u5143\u7d20 O ( logn ) pq . pop () : \u4f7f\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u51fa\u961fO ( logn ) pq . top () : \u83b7\u53d6\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u5143\u7d20O ( 1 ) pq . size () : \u83b7\u53d6\u5143\u7d20\u4e2a\u6570O ( 1 ) pq . empty () : \u662f\u5426\u4e3a\u7a7aO ( 1 ) \u4f18\u5148\u961f\u5217\u7684\u5b9a\u4e49 \uff1a priority_queue < int > q1 ; //\u9ed8\u8ba4\u4ece\u5927\u5230\u5c0f\uff0c\u5927\u9876\u5806 priority_queue < int , vector < int > , less < int > > q2 ; //\u964d\u5e8f\u961f\u5217\uff0c\u5927\u9876\u5806 priority_queue < int , vector < int > , greater < int > > q3 ; //\u5347\u5e8f\u961f\u5217\uff0c\u5c0f\u9876\u5806 \u5bf9\u4e8e\u7ed3\u6784\u4f53\u5b9a\u4e49 \uff1a struct T1 { //\u6cd5\u4e00 \u5f3a\u70c8\u63a8\u8350 int x , y ; friend bool operator < ( T1 a , T1 b ){ return a . x < b . x ; } }; priority_queue < T1 > q1 ; struct T1 { //\u6cd5\u4e8c int x , y ; bool operator < ( const T1 & a ) const { return x < a . x ; //\u5927\u9876\u5806 } }; priority_queue < T1 > q1 ; struct T2 { int x , y ;}; //\u6cd5\u4e09 bool operator < ( T2 a , T2 b ){ return a . x > b . x ; } priority_queue < T2 > q2 ; struct T3 { int x , y ;}; //\u6cd5\u56db struct tmp { //\u91cd\u5199\u4eff\u51fd\u6570 bool operator () ( T3 a , T3 b ){ return a . x < b . x ; //\u5927\u9876\u5806 } }; priority_queue < T3 , vector < T3 > , tmp > q3","title":"1.3.5 \u91cd\u8f7d\u4ee3\u7801"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#14-vector","text":"","title":"1.4 vector"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#141","text":"\u4f7f\u7528\u8be5\u5bb9\u5668\u9700\u8981 #include<vector> \u5934\u6587\u4ef6","title":"1.4.1 \u5934\u6587\u4ef6"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#142","text":"vector<int> V; \u53ef\u4ee5\u7406\u89e3\u4e3a\u53d8\u957f\u6570\u7ec4\uff0c\u5bf9\u5143\u7d20\u7684\u8bbf\u95ee\u4ee5\u53ca\u4f7f\u7528\u7b49\u975e\u5e38\u65b9\u4fbf\uff0c\u4f46\u662f\u5f53\u5143\u7d20\u5b58\u50a8\u8fc7\u591a\u4f1a\u9020\u6210\u5e38\u6570\u8fc7\u5927","title":"1.4.2 \u5b9a\u4e49\u548c\u7279\u70b9"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#143","text":"v.push_back(item): \u5411v\u540e\u52a0\u4e00\u4e2a\u5143\u7d20O(1) v.pop_back(); \u5220\u9664v\u6700\u540e\u4e00\u4e2a\u5143\u7d20O(1) v.size(); \u83b7\u53d6v\u4e2d\u5143\u7d20\u4e2a\u6570O(1) v.resize(n); \u628av\u7684\u957f\u5ea6\u91cd\u65b0\u8bbe\u5b9a\u4e3an\u4e2a\u5143\u7d20O(|n-size|) v.empty() \u5224\u65adv\u662f\u5426\u4e3a\u7a7aO(1) v.clear(); \u6e05\u7a7av\u4e2d\u7684\u5143\u7d20O(size) v[index]; \u83b7\u53d6v\u4e2d\u4e0b\u6807\u4e3aindex\u7684\u5143\u7d20O(1) v.begin(); \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 v.end(); \u8fd4\u56de\u6307\u5411vector\u672b\u5c3e(\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u7684\u90a3\u4e2a\u4f4d\u7f6e)\u7684\u8fed\u4ee3\u5668 v.front(); \u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20 v.back(); \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20 v.erase(iterator loc); \u5220\u9664loc\u6240\u6307\u5143\u7d20\u5e76\u8fd4\u56de\u4e0b\u4e00\u5143\u7d20\u8fed\u4ee3\u5668 v.erase(iterator start, iterator end); \u5220\u9664[start, end)\u4e4b\u95f4\u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u88ab\u5220\u9664\u5143\u7d20\u7684\u4e0b\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 vt.erase(unique(vt.begin(), vt.end()), vt.end()); \u53bb\u91cd\u64cd\u4f5c v.insert(v.begin()+4,3); \u5728\u7b2c\u4e94\u4e2a\u5143\u7d20\u524d\u63d2\u5165\u4e00\u4e2a\u5143\u7d20","title":"1.4.3 \u57fa\u672c\u64cd\u4f5c"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#144","text":"\u5e94\u7528\u5341\u5206\u5e7f\u6cdb","title":"1.4.4 \u5e94\u7528"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#15-set","text":"","title":"1.5 set"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#151","text":"\u4f7f\u7528\u8be5\u5bb9\u5668\u9700\u8981 #incluide<set> \u5934\u6587\u4ef6","title":"1.5.1 \u5934\u6587\u4ef6"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#152","text":"set<int> S set\u5c31\u76f8\u5f53\u4e8e\u662f\u6570\u5b66\u7684\u96c6\u5408\uff0c\u4f1a\u5bf9\u76f8\u540c\u7684\u5143\u7d20\u8fdb\u884c\u53bb\u91cd\u5904\u7406\u5e76\u9ed8\u8ba4\u6392\u5e8f\uff0c\u548c\u4f18\u5148\u961f\u5217\u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u60f3\u81ea\u5b9a\u4e49\u6570\u636e\u7ed3\u6784\uff0c\u90a3\u4e48\u9700\u8981\u5199\u91cd\u8f7d\u51fd\u6570","title":"1.5.2 \u5b9a\u4e49"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#153","text":"s.insert(item); \u63d2\u5165\u5143\u7d20O(logn) s.size(); \u83b7\u53d6\u5143\u7d20\u7684\u4e2a\u6570O(1) s.empty(); \u5224\u65ad\u662f\u5426\u4e3a\u7a7aO(1) s.clear(); \u6e05\u7a7as O(n) s.find(item); \u5728s\u4e2d\u67e5\u627eitem\u5e76\u8fd4\u56de\u5176iterator(\u8fed\u4ee3\u5668)\uff0c\u627e\u4e0d\u5230\u7684\u8bdd\u8fd4\u56des.end()O(logn) s.count(item); \u8fd4\u56des\u4e2ditem\u7684\u6570\u91cf\uff0c\u56e0\u4e3a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u4e0d\u80fd\u91cd\u590d\uff0c\u56e0\u6b64\u53ea\u80fd\u8fd4\u56de0\u62161 O(logn) s.erase(it): \u5220\u9664s\u4e2dit\u6307\u5411\u4f4d\u7f6e\u7684\u5143\u7d20 s.erase(item); \u5220\u9664s\u4e2d\u503c\u4e3aitem\u7684\u5143\u7d20 s.earse(it1,it2); \u5220\u9664[it1,it2) \u8fd9\u4e2a\u533a\u95f4\uff08\u8fed\u4ee3\u5668\uff09\u5bf9\u5e94\u4f4d\u7f6e\u7684\u5143\u7d20 iterator lower_bound( const key_type &key ); \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u952e\u503c >= key\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 iterator upper_bound( const key_type &key ); \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u952e\u503c > key\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002","title":"1.5.3 \u57fa\u672c\u64cd\u4f5c"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#154","text":"C++ struct T1 { int key , value ; bool operator < ( const T1 & a ) const { return key < a . key ; //\u6309\u7167\u5347\u5e8f\u6392\u5217 } }; struct T2 { int key , value ; }; struct T2cmp { bool operator () ( const int & a , const int & b ){ if ( abs ( a - b ) <= k ) return false ; return a < b ; } }; int main (){ int i , j ; set < T1 > s1 ; set < T2 , T2cmp > s2 ; set < string > ss1 ; //\u7b49\u4e8eset<string,less<int> > ss1;\u4ece\u5c0f\u5230\u5927 set < string , greater < string > > ss2 ; //\u4ece\u5927\u5230\u5c0f set < string , greater < string > > :: iterator itsey ; //set\u7684\u904d\u5386 set < string > :: iterator it ; for ( it = ss1 . begin (); it != ss1 . end (); it ++ ){ cout <<* it << endl ; } return 0 ; }","title":"1.5.4 \u91cd\u8f7d\u4ee3\u7801"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#16-unordered_set","text":"\u8fd9\u4e2a\u5176\u5b9e\u5c31\u662f\u4e0d\u9700\u8981\u6392\u5e8f\u7684set\uff0c\u5c31\u4e0d\u7528\u5199\u91cd\u8f7d\u51fd\u6570\u4e86\uff0c\u5176\u4f59\u64cd\u4f5c\u548cset\u76f8\u540c","title":"1.6 unordered_set"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#17-map","text":"","title":"1.7 map"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#151_1","text":"\u4f7f\u7528\u8be5\u5bb9\u5668\u9700\u8981 #include<map> \u5934\u6587\u4ef6","title":"1.5.1 \u5934\u6587\u4ef6"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#152_1","text":"map<int,int> mp; \u6ce8\u610f\u7684\u662fmap\u662f\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u662f\u4e00\u4e2a\u6620\u5c04\u5173\u7cfb\uff0c\u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\u5e2e\u4f60\u5c01\u88c5\u597d\u4e86\u7684hash\u8868\uff0c\u901a\u8fc7\u952e\u8bbf\u95ee\u4f60\u7684\u503c","title":"1.5.2 \u5b9a\u4e49"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#153_1","text":"mp.size(); \u83b7\u53d6\u5143\u7d20\u4e2a\u6570O(1) mp.empty(); \u5224\u65ad\u662f\u5426\u4e3a\u7a7aO(1) mp.clear(); \u6e05\u7a7amp O(1) mp.find(key); \u5728map\u4e2d\u67e5\u627ekey\u5e76\u8fd4\u56de\u5176iterator,\u627e\u4e0d\u5230\u7684\u8bdd\u8fd4\u56demp.end() O(logn) mp.count(key); \u5728map\u4e2d\u627ekey\u7684\u6570\u91cf\uff0c\u7531\u4e8e\u6bcf\u4e2akey\u90fd\u662f\u552f\u4e00\u7684\uff0c\u53ea\u4f1a\u8fd4\u56de0\u62161 mp[key] \u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5230\u952e\u503c\u961fkey---value\u4e2d\u7684value\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u952e\u503c\u5bf9\uff0c\u90a3\u4e48mp[key]\u8fd4\u56de\u7684\u662fvalue\u7c7b\u578b\u9ed8\u8ba4\u6784\u9020\u5668\u6240\u6784\u9020\u7684\u503c\uff0c\u5e76\u5c06\u8be5\u952e\u503c\u5bf9\u63d2\u5165\u5230map\u4e2d mp[key]=tmp; \u53ef\u4ee5\u628a\u952e\u503c\u5bf9key---value\u4e2d\u7684value\u8d4b\u503c\u4e3atmp,\u5982\u679c\u6ca1\u6709\u5bf9\u5e94\u7684\u952e\u503c\u5bf9,\u5219\u5c06\u8be5\u952e\u503c\u5bf9\u63d2\u5165\u5230map\u4e2d\u590d\u6742\u5ea6\uff1a O(logn) mp.insert(make_pair(key,value)); \u5728mp\u4e2d\u63d2\u5165\u952e\u503c\u5bf9key----value\u3002\u4e00\u822c\u4e0d\u8fd9\u6837\u7528\uff0c\u60f3\u8981\u63d2\u5165\u952e\u503c\u5bf9\u7684\u8bdd\u76f4\u63a5\u4f7f\u7528mp[key]=value\u5373\u53ef\uff0cmap\u5df2\u7ecf\u5bf9[]\u8fd0\u7b97\u7b26\u91cd\u8f7d\u8fc7\u4e86.","title":"1.5.3 \u57fa\u672c\u64cd\u4f5c"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#154_1","text":"\u5e94\u7528\u5728\u4e00\u4e9b\u9700\u8981\u952e\u503c\u5bf9\u5e94\u7684\u5730\u65b9","title":"1.5.4 \u5e94\u7528"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#18-unordered_map","text":"","title":"1.8 unordered_map"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#181","text":"#include<unordered_map>","title":"1.8.1 \u5934\u6587\u4ef6"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#182-map","text":"\u548c\u4e0a\u9762\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5185\u90e8\u53d8\u4e3a\u65e0\u5e8f\uff0c\u67e5\u627e\u6548\u7387\u8981\u7a0d\u5fae\u6bd4map\u9ad8\u4e00\u70b9\u70b9\uff08\u5185\u90e8\u662f\u54c8\u5e0c\u8868\u5b9e\u73b0\uff0c\u800cmap\u662f\u7ea2\u9ed1\u6811\uff09","title":"1.8.2 \u548cmap\u533a\u522b"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#19-pair","text":"","title":"1.9 pair"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#191","text":"#include <utility>","title":"1.9.1 \u5934\u6587\u4ef6"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#192","text":"pair<int,int> P; \u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u53ea\u6709\u4e24\u4e2a\u5143\u7d20\u7684\u7ed3\u6784\u4f53","title":"1.9.2 \u5b9a\u4e49"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#193","text":"pair<T1, T2> p1; //\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684pair\u5bf9\u8c61\uff08\u4f7f\u7528\u9ed8\u8ba4\u6784\u9020\uff09\uff0c\u5b83\u7684\u4e24\u4e2a\u5143\u7d20\u5206\u522b\u662fT1\u548cT2\u7c7b\u578b\uff0c\u91c7\u7528\u503c\u521d\u59cb\u5316\u3002 pair<T1, T2> p1(v1, v2); //\u521b\u5efa\u4e00\u4e2apair\u5bf9\u8c61\uff0c\u5b83\u7684\u4e24\u4e2a\u5143\u7d20\u5206\u522b\u662fT1\u548cT2\u7c7b\u578b\uff0c\u5176\u4e2dfirst\u6210\u5458\u521d\u59cb\u5316\u4e3av1\uff0csecond\u6210\u5458\u521d\u59cb\u5316\u4e3av2\u3002 make_pair(v1, v2); // \u4ee5v1\u548cv2\u7684\u503c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684pair\u5bf9\u8c61\uff0c\u5176\u5143\u7d20\u7c7b\u578b\u5206\u522b\u662fv1\u548cv2\u7684\u7c7b\u578b\u3002 p1 < p2; // \u4e24\u4e2apair\u5bf9\u8c61\u95f4\u7684\u5c0f\u4e8e\u8fd0\u7b97\uff0c\u5176\u5b9a\u4e49\u9075\u5faa\u5b57\u5178\u6b21\u5e8f\uff1a\u5982 p1.first < p2.first \u6216\u8005 !(p2.first < p1.first) && (p1.second < p2.second) \u5219\u8fd4\u56detrue\u3002 p1 == p2 // \u5982\u679c\u4e24\u4e2a\u5bf9\u8c61\u7684first\u548csecond\u4f9d\u6b21\u76f8\u7b49\uff0c\u5219\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u76f8\u7b49\uff1b\u8be5\u8fd0\u7b97\u4f7f\u7528\u5143\u7d20\u7684==\u64cd\u4f5c\u7b26\u3002 p1.first; // \u8fd4\u56de\u5bf9\u8c61p1\u4e2d\u540d\u4e3afirst\u7684\u516c\u6709\u6570\u636e\u6210\u5458\u3002 p1.second; // \u8fd4\u56de\u5bf9\u8c61p1\u4e2d\u540d\u4e3asecond\u7684\u516c\u6709\u6570\u636e\u6210\u5458\u3002","title":"1.9.3 \u57fa\u672c\u4f7f\u7528"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#194","text":"\u5e94\u7528\u5230\u5750\u6807\u70b9\u7684\u8868\u793a\u7b49","title":"1.9.4 \u5e94\u7528\u573a\u666f"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#110iterator","text":"","title":"1.10\u8fed\u4ee3\u5668iterator"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#1101","text":"\u5bb9\u5668\u7c7b\u540d::iterator \u8fed\u4ee3\u5668\u540d;","title":"1.10.1\u5b9a\u4e49\u65b9\u6cd5"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#1102","text":"\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u6307\u9488\uff0c\u652f\u6301\u81ea\u589e\u548c\u81ea\u51cf\uff0c\u4f46\u662f\u4e0d\u652f\u6301\u591a\u4f4d\u79fb\u52a8","title":"1.10.2 \u4f7f\u7528"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#1103","text":"http://c.biancheng.net/view/338.html","title":"1.10.3 \u8be6\u7ec6\u5b66\u4e60\u8d44\u6599"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#110-string","text":"","title":"1.10 string"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#algorithm","text":"","title":"\u4e8c\u3001Algorithm\u90e8\u5206"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#21-sort","text":"\u6392\u5e8f\u51fd\u6570\uff0c\u8fd9\u91cc\u5982\u679c\u60f3\u5b9a\u5236\u5316\u7684\u8bdd\u5219\u9700\u8981\u624b\u5199cmp\u51fd\u6570\uff0c\u548c\u6211\u4eec\u4e0a\u9762\u770b\u7684\u91cd\u8f7d\u6bd4\u8f83\u51fd\u6570\u7c7b\u4f3c\uff1a \u5b66\u4e60\u8fde\u63a5\uff1a https://blog.csdn.net/m0_46201544/article/details/116321894","title":"2.1 sort"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#22-__gcd","text":"\u6c42\u89e3\u6700\u5927\u516c\u56e0\u6570\u7684\u5185\u7f6e\u51fd\u6570\uff1a int c = __gcd(a,b);","title":"2.2 __gcd"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#23-max","text":"\u53c2\u6570\u662f\u4e24\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u6570\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u503c","title":"2.3 max"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#24-min","text":"\u53c2\u6570\u662f\u4e24\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u6570\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u6700\u5c0f\u503c","title":"2.4 min"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#25-abs","text":"\u8fd4\u56de\u8be5\u6570\u7684\u7edd\u5bf9\u503c","title":"2.5 abs"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#26-swap","text":"\u4ea4\u6362\u4e24\u6570","title":"2.6 swap"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#27-reverse","text":"\u53cd\u8f6c\u5bb9\u5668\u6216\u8005\u6570\u7ec4\uff0c\u5bb9\u5668\u7684\u8bdd\u9700\u8981\u6dfb\u52a0\u8fed\u4ee3\u5668\uff0c\u6570\u7ec4\u76f4\u63a5\u653e\u5730\u5740 eg: C++ vector < int > V ; V . push_back ( 1 ); V . push_back ( 2 ); int a [ 3 ] = { 0 , 1 , 2 }; reverse ( a , a + 3 ); for ( int i = 0 ; i < 3 ; ++ i ) printf ( \"%d \\n \" , a [ i ]); reverse ( V . begin (), V . end ())","title":"2.7 reverse"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#28-next_permutation","text":"\u8fd9\u4e2a\u662f\u4e00\u4e2a\u5168\u6392\u5217\u51fd\u6570\uff1a C++ do { xxx } while ( next_permutation ( a , a + n ));","title":"2.8 next_permutation"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#29-lower_bound","text":"lower_bound (\u8d77\u59cb\u5730\u5740\uff0c\u7ed3\u675f\u5730\u5740\uff0c\u8981\u67e5\u627e\u7684\u6570\u503c) \u8fd4\u56de\u7684\u662f>=x\u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u5730\u5740\u3002 \u5728\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\uff1a lower_bound( begin,end,num) \uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 lower_bound( begin,end,num,greater()) :\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002","title":"2.9 lower_bound"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#210-upper_bound","text":"upper_bound (\u8d77\u59cb\u5730\u5740\uff0c\u7ed3\u675f\u5730\u5740\uff0c\u8981\u67e5\u627e\u7684\u6570\u503c) \u8fd4\u56de\u7684\u662f>x\u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u5730\u5740 \u5728\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\uff1a upper_bound( begin,end,num) \uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 \u5728\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\uff0c\u91cd\u8f7d lower_bound() \u548c`upper_bound() upper_bound( begin,end,num,greater()) :\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807 \u6ce8\u610f\u4e00\u70b9\u8fd9\u4e2a lower_bound \u548c upper_bound \u53ea\u80fd\u7528\u4e8e\u975e\u964d\u5e8f\u5217\uff0c\u5982\u679c\u8981\u7528\u4e8e\u975e\u5347\u5e8f\u5217\u7684\u90a3\u8981\u52a0\u4e00\u4e2a greater <int> ()","title":"2.10 upper_bound"},{"location":"%E6%9D%82%E9%A1%B9/STL%E5%92%8CAlgorithm/#_2","text":"http://acm.mangata.ltd/training/61cff0d9aa36161f3c11f143 \u76ee\u524d\u6709\u5927\u7ea630\u9898","title":"\u4e09\u3001\u8bad\u7ec3\u9898\u5355"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/","text":"\u4f4d\u8fd0\u7b97 \u00b6 \u672c\u7247\u662f\u5206\u4eab\u5173\u4e8e\u4f4d\u8fd0\u7b97\u7684\u7b14\u8bb0 \u4e00\u3001\u524d\u8a00 \u00b6 1.1\u914d\u5957\u89c6\u9891\u94fe\u63a5 \u00b6 https://www.bilibili.com/video/BV1gL411c7eG 1.2\u539f\u7801\u3001\u53cd\u7801\u3001\u8865\u7801 \u00b6 https://blog.csdn.net/m0_46201544/article/details/121818968?spm=1001.2014.3001.5501 \u8ba1\u7ec4\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53bb\u641c\u4e00\u4e0b\u5148\u4e86\u89e3 \u4e8c\u3001\u4f4d\u8fd0\u7b97 \u00b6 2.1 &\u6309\u4f4d\u4e0e \u00b6 2.1.1 \u5b9a\u4e49 \u00b6 \u5982\u679c\u4e24\u4e2a\u76f8\u5e94\u7684 \u4e8c\u8fdb\u5236\u4f4d \u90fd\u4e3a1\uff0c\u5219\u8be5\u4f4d\u7684\u7ed3\u679c\u503c\u4e3a1\uff0c\u5426\u5219\u4e3a0 2.1.2 \u4e3e\u4f8b \u00b6 \u5bf9\u4e8e\u8fd9\u6837\u4e24\u4e2a\u6570\uff1a3\u30015\uff0c\u6211\u4eec\u5148\u5c06\u5176\u8f6c\u5316\u4e3a\u4e3a\u4e8c\u8fdb\u5236\uff1a \\(3=(0011)_2\\) \\(5=(0101)_2\\) \u90a3\u4e48\u6211\u4eec\u5bf9\u5176\u8fdb\u884c\u6309\u7167\u4f4d\u4e0e\u64cd\u4f5c\u53ef\u5f97\uff1a \\((0001)_2\\) \u4e5f\u5c31\u662f1 \u4ee3\u7801\u5b9e\u73b0\uff1a C++ #include <stdio.h> int main () { int a = 3 , b = 5 ; printf ( \"a&b = %d \\n \" , a & b ); return 0 ; } 2.2 | \u6309\u4f4d\u6216 \u00b6 2.2.1\u5b9a\u4e49 \u00b6 \u4e24\u4e2a\u76f8\u5e94\u7684 \u4e8c\u8fdb\u5236\u4f4d \u4e2d\u53ea\u8981\u6709\u4e00\u4e2a\u4e3a1\uff0c\u8be5\u4f4d\u7684\u7ed3\u679c\u503c\u4e3a1 2.2.2\u4e3e\u4f8b \u00b6 \u5bf9\u4e8e\u8fd9\u6837\u4e24\u4e2a\u6570\uff1a3\u30015\uff0c\u6211\u4eec\u5148\u5c06\u5176\u8f6c\u5316\u4e3a\u4e3a\u4e8c\u8fdb\u5236\uff1a \\(3=(0011)_2\\) \\(5=(0101)_2\\) \u90a3\u4e48\u6211\u4eec\u5bf9\u5176\u8fdb\u884c\u6309\u7167\u4f4d\u6216\u64cd\u4f5c\u53ef\u5f97\uff1a \\((0111)_2\\) \u4e5f\u5c31\u662f7 \u4ee3\u7801\u5b9e\u73b0\uff1a C++ #include <stdio.h> int main () { int a = 3 , b = 5 ; printf ( \"a|b = %d \\n \" , a | b ); return 0 ; } 2.3 ^ \u6309\u4f4d\u5f02\u6216 \u00b6 2.3.1 \u5b9a\u4e49 \u00b6 \u82e5\u53c2\u52a0\u8fd0\u7b97\u7684\u4e24\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u503c\u76f8\u540c\u5219\u4e3a0\uff0c\u5426\u5219\u4e3a1 2.3.2 \u4e3e\u4f8b \u00b6 \u5bf9\u4e8e\u8fd9\u6837\u4e24\u4e2a\u6570\uff1a3\u30015\uff0c\u6211\u4eec\u5148\u5c06\u5176\u8f6c\u5316\u4e3a\u4e3a\u4e8c\u8fdb\u5236\uff1a \\(3=(0011)_2\\) \\(5=(0101)_2\\) \u90a3\u4e48\u6211\u4eec\u5bf9\u5176\u8fdb\u884c\u6309\u7167\u4f4d\u6216\u64cd\u4f5c\u53ef\u5f97\uff1a \\((0110)_2\\) \u4e5f\u5c31\u662f6 \u4ee3\u7801\u5b9e\u73b0\uff1a C++ #include <stdio.h> int main () { int a = 3 , b = 5 ; printf ( \"a^b = %d \\n \" , a ^ b ); return 0 ; } 2.4 ~ \u53d6\u53cd \u00b6 2.4.1 \u5b9a\u4e49 \u00b6 ~\u662f\u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u7528\u4e8e\u6c42\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8865\u7801\uff0c\u5373\u5206\u522b\u5c06\u64cd\u4f5c\u6570\u5404\u4e8c\u8fdb\u5236\u4f4d\u4e0a\u76841\u53d8\u4e3a0\uff0c0\u53d8\u4e3a1\u3002 2.4.2 \u4e3e\u4f8b \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u6570\u5b571\uff0c\u6211\u4eec\u5148\u5bf9\u5176\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u5e76\u8f6c\u5316\u4e3a\u8865\u7801\uff1a \\((00000001)_H\\) \u7136\u540e\u53d6\u53cd\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\uff1a \\((FFFFFFFE)_H\\) ,\u7136\u540e\u6211\u4eec\u518d\u6c42\u8be5\u6570\u7684\u539f\u7801\u5219\u5f97\uff1a -2 \u4ee3\u7801\u5b9e\u73b0\uff1a C++ #include <stdio.h> int main () { int a = 1 ; printf ( \"~a = %d\" , ~ a ); return 0 ; } 2.5 << \u5de6\u79fb \u00b6 2.5.1 \u5b9a\u4e49 \u00b6 \u7528\u6765\u5c06\u4e00\u4e2a\u6570\u7684\u5404\u4e8c\u8fdb\u5236\u4f4d\u5168\u90e8\u5de6\u79fbN\u4f4d\uff0c\u53f3\u88650 \u6548\u679c\u7b49\u4ef7\u5c06\u8be5\u6570\u4e58\u4e8c 2.6 \u4e3e\u4f8b \u00b6 C++ #include <stdio.h> int main () { int a = 1 ; printf ( \"a<<2 = %d\" , a << 2 ); return 0 ; } 2.7 >> \u53f3\u79fb \u00b6 2.7.1 \u5b9a\u4e49 \u00b6 \u5c06\u4e00\u4e2a\u6570\u7684\u5404\u4e8c\u8fdb\u5236\u4f4d\u53f3\u79fbN\u4f4d\uff0c\u79fb\u5230\u53f3\u7aef\u7684\u4f4e\u4f4d\u88ab\u820d\u5f03\uff0c\u5bf9\u4e8e\u65e0\u7b26\u53f7\u6570\uff0c\u9ad8\u4f4d\u88650 \u6548\u679c\u7b49\u4ef7\u5c06\u8be5\u6570\u9664\u4e8c 2.7.2 \u4e3e\u4f8b \u00b6 C++ #include <stdio.h> int main () { int a = 7 ; printf ( \"a>>2 = %d\" , a >> 1 ); return 0 ; } 2.8 \u4e00\u4e9b\u5e94\u7528 \u00b6 \u4f8b\u5982\uff1a 2.8.1 \u5c06\u8be5\u6570\u7684\u67d0\u4e00\u4f4d\u8bbe\u7f6e\u4e3a1 \u00b6 \u6211\u4eec\u901a\u8fc7\u5de6\u79fb\u548c\u6216\u4f4d\u8fd0\u7b97\u5373\u53ef\u5c06\u8be5\u6570\u7684\u67d0\u4e00\u4f4d\u8bbe\u7f6e\u4e3a1\uff0c\u6216\u8005\u662f\u5224\u65ad\u662f\u5426\u4e3a1 eg\uff1a x|(1<<10) :\u5c06\u4ece\u53f3\u5f80\u5de6\u7b2c\u5341\u4e2a\u4f4d\u7f6e\u8bbe\u4e3a1 2.8.2 \u4e24\u4e2a\u76f8\u540c\u7684\u5f02\u6216\u503c\u4e3a0 \u00b6 \u5982\u6807\u9898\uff0c\u53ef\u4ee5\u548c\u6211\u4eec\u4e0a\u6b21\u5b66\u7684\u524d\u7f00\u548c\u7ed3\u5408\u8d77\u6765\uff0c\u5e76\u4e14\u6839\u636e\u8fd9\u4e2a\u6027\u8d28\u6211\u4eec\u80fd\u5199\u51fa\u4e0d\u9700\u8981\u96f6\u65f6\u53d8\u91cf\u6570\u7684SWAP\u51fd\u6570 2.8.3 \u901a\u8fc7&\u8fd0\u7b97\u5224\u65ad\u6570n\u662f\u5426\u4e3a\u5947\u6570 \u00b6 \u6211\u4eec\u5c06n\u548c1\u8fdb\u884c\u4f4d\u4e0e\u64cd\u4f5c\u5c31\u80fd\u5224\u65ad\uff0c\u56e0\u4e3a\u5947\u6570\u548c\u5076\u6570\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\u6700\u540e\u4e00\u4f4d\u662f\u5426\u4e3a1\u5373\u53ef C++ if ( n & 1 ){ puts ( \"\u5947\u6570\" ); } else { puts ( \"\u5076\u6570\" ); } 2.8.4 \u53d6int\u578b\u53d8\u91cfa\u7684\u7b2ck\u4f4d \u00b6 \\((k=0,1,2\u2026\u2026sizeof(int))\\) Text Only a>>k&1 \u66f4\u591a\u6280\u5de7\u8bf7\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\uff1a https://zhuanlan.zhihu.com/p/54946559 \u4e09\u3001\u4f4d\u8fd0\u7b97\u76f8\u5173\u51fd\u6570 \u00b6 3.1 __builtin_popcount(unsigned int n) \u00b6 \u8be5\u51fd\u6570\u65f6\u5224\u65adn\u7684\u4e8c\u8fdb\u5236\u4e2d\u6709\u591a\u5c11\u4e2a1 eg: C++ int n = 15 ; //\u4e8c\u8fdb\u5236\u4e3a1111 cout << __builtin_popcount ( n ) << endl ; //\u8f93\u51fa4 3.2 __builtin_parity(unsigned int n) \u00b6 \u8be5\u51fd\u6570\u662f\u5224\u65adn\u7684\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570\u7684\u5947\u5076\u6027 eg: C++ int n = 15 ; //\u4e8c\u8fdb\u5236\u4e3a1111 int m = 7 ; //111 cout << __builtin_parity ( n ) << endl ; //\u5076\u6570\u4e2a\uff0c\u8f93\u51fa0 cout << __builtin_parity ( m ) << endl ; //\u5947\u6570\u4e2a\uff0c\u8f93\u51fa1 3.3 __builtin_ffs(unsigned int n) \u00b6 \u8be5\u51fd\u6570\u5224\u65adn\u7684\u4e8c\u8fdb\u5236\u672b\u5c3e\u6700\u540e\u4e00\u4e2a1\u7684\u4f4d\u7f6e\uff0c\u4ece\u4e00\u5f00\u59cb eg: C++ int n = 1 ; //1 int m = 8 ; //1000 cout << __builtin_ffs ( n ) << endl ; //\u8f93\u51fa1 cout << __builtin_ffs ( m ) << endl ; //\u8f93\u51fa4 3.4 __builtin_ctz(unsigned int n) \u00b6 \u8be5\u51fd\u6570\u5224\u65adn\u7684\u4e8c\u8fdb\u5236\u672b\u5c3e\u540e\u97620\u7684\u4e2a\u6570\uff0c\u5f53n\u4e3a0\u65f6\uff0c\u548cn\u7684\u7c7b\u578b\u6709\u5173 eg: C++ int n = 1 ; //1 int m = 8 ; //1000 cout << __builtin_ctzll ( n ) << endl ; //\u8f93\u51fa0 cout << __builtin_ctz ( m ) << endl ; //\u8f93\u51fa3 3.5 __builtin_clz (unsigned int x) \u00b6 \u8be5\u51fd\u6570\u5224\u65adn\u7684\u4e8c\u8fdb\u5236\u524d\u5bfc\u76840\u7684\u4e2a\u6570\u3002 eg: C++ #include <stdio.h> int main () { int a = 1 << 30 ; printf ( \"%d \\n \" , __builtin_clz ( a )); //\u8f93\u51fa1 return 0 ; }","title":"\u4f4d\u8fd0\u7b97"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#_1","text":"\u672c\u7247\u662f\u5206\u4eab\u5173\u4e8e\u4f4d\u8fd0\u7b97\u7684\u7b14\u8bb0","title":"\u4f4d\u8fd0\u7b97"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#_2","text":"","title":"\u4e00\u3001\u524d\u8a00"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#11","text":"https://www.bilibili.com/video/BV1gL411c7eG","title":"1.1\u914d\u5957\u89c6\u9891\u94fe\u63a5"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#12","text":"https://blog.csdn.net/m0_46201544/article/details/121818968?spm=1001.2014.3001.5501 \u8ba1\u7ec4\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53bb\u641c\u4e00\u4e0b\u5148\u4e86\u89e3","title":"1.2\u539f\u7801\u3001\u53cd\u7801\u3001\u8865\u7801"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#_3","text":"","title":"\u4e8c\u3001\u4f4d\u8fd0\u7b97"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#21","text":"","title":"2.1 &amp;\u6309\u4f4d\u4e0e"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#211","text":"\u5982\u679c\u4e24\u4e2a\u76f8\u5e94\u7684 \u4e8c\u8fdb\u5236\u4f4d \u90fd\u4e3a1\uff0c\u5219\u8be5\u4f4d\u7684\u7ed3\u679c\u503c\u4e3a1\uff0c\u5426\u5219\u4e3a0","title":"2.1.1 \u5b9a\u4e49"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#212","text":"\u5bf9\u4e8e\u8fd9\u6837\u4e24\u4e2a\u6570\uff1a3\u30015\uff0c\u6211\u4eec\u5148\u5c06\u5176\u8f6c\u5316\u4e3a\u4e3a\u4e8c\u8fdb\u5236\uff1a \\(3=(0011)_2\\) \\(5=(0101)_2\\) \u90a3\u4e48\u6211\u4eec\u5bf9\u5176\u8fdb\u884c\u6309\u7167\u4f4d\u4e0e\u64cd\u4f5c\u53ef\u5f97\uff1a \\((0001)_2\\) \u4e5f\u5c31\u662f1 \u4ee3\u7801\u5b9e\u73b0\uff1a C++ #include <stdio.h> int main () { int a = 3 , b = 5 ; printf ( \"a&b = %d \\n \" , a & b ); return 0 ; }","title":"2.1.2 \u4e3e\u4f8b"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#22","text":"","title":"2.2 | \u6309\u4f4d\u6216"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#221","text":"\u4e24\u4e2a\u76f8\u5e94\u7684 \u4e8c\u8fdb\u5236\u4f4d \u4e2d\u53ea\u8981\u6709\u4e00\u4e2a\u4e3a1\uff0c\u8be5\u4f4d\u7684\u7ed3\u679c\u503c\u4e3a1","title":"2.2.1\u5b9a\u4e49"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#222","text":"\u5bf9\u4e8e\u8fd9\u6837\u4e24\u4e2a\u6570\uff1a3\u30015\uff0c\u6211\u4eec\u5148\u5c06\u5176\u8f6c\u5316\u4e3a\u4e3a\u4e8c\u8fdb\u5236\uff1a \\(3=(0011)_2\\) \\(5=(0101)_2\\) \u90a3\u4e48\u6211\u4eec\u5bf9\u5176\u8fdb\u884c\u6309\u7167\u4f4d\u6216\u64cd\u4f5c\u53ef\u5f97\uff1a \\((0111)_2\\) \u4e5f\u5c31\u662f7 \u4ee3\u7801\u5b9e\u73b0\uff1a C++ #include <stdio.h> int main () { int a = 3 , b = 5 ; printf ( \"a|b = %d \\n \" , a | b ); return 0 ; }","title":"2.2.2\u4e3e\u4f8b"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#23","text":"","title":"2.3 ^ \u6309\u4f4d\u5f02\u6216"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#231","text":"\u82e5\u53c2\u52a0\u8fd0\u7b97\u7684\u4e24\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u503c\u76f8\u540c\u5219\u4e3a0\uff0c\u5426\u5219\u4e3a1","title":"2.3.1 \u5b9a\u4e49"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#232","text":"\u5bf9\u4e8e\u8fd9\u6837\u4e24\u4e2a\u6570\uff1a3\u30015\uff0c\u6211\u4eec\u5148\u5c06\u5176\u8f6c\u5316\u4e3a\u4e3a\u4e8c\u8fdb\u5236\uff1a \\(3=(0011)_2\\) \\(5=(0101)_2\\) \u90a3\u4e48\u6211\u4eec\u5bf9\u5176\u8fdb\u884c\u6309\u7167\u4f4d\u6216\u64cd\u4f5c\u53ef\u5f97\uff1a \\((0110)_2\\) \u4e5f\u5c31\u662f6 \u4ee3\u7801\u5b9e\u73b0\uff1a C++ #include <stdio.h> int main () { int a = 3 , b = 5 ; printf ( \"a^b = %d \\n \" , a ^ b ); return 0 ; }","title":"2.3.2 \u4e3e\u4f8b"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#24","text":"","title":"2.4 ~ \u53d6\u53cd"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#241","text":"~\u662f\u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u7528\u4e8e\u6c42\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8865\u7801\uff0c\u5373\u5206\u522b\u5c06\u64cd\u4f5c\u6570\u5404\u4e8c\u8fdb\u5236\u4f4d\u4e0a\u76841\u53d8\u4e3a0\uff0c0\u53d8\u4e3a1\u3002","title":"2.4.1 \u5b9a\u4e49"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#242","text":"\u5bf9\u4e8e\u4e00\u4e2a\u6570\u5b571\uff0c\u6211\u4eec\u5148\u5bf9\u5176\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u5e76\u8f6c\u5316\u4e3a\u8865\u7801\uff1a \\((00000001)_H\\) \u7136\u540e\u53d6\u53cd\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\uff1a \\((FFFFFFFE)_H\\) ,\u7136\u540e\u6211\u4eec\u518d\u6c42\u8be5\u6570\u7684\u539f\u7801\u5219\u5f97\uff1a -2 \u4ee3\u7801\u5b9e\u73b0\uff1a C++ #include <stdio.h> int main () { int a = 1 ; printf ( \"~a = %d\" , ~ a ); return 0 ; }","title":"2.4.2 \u4e3e\u4f8b"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#25","text":"","title":"2.5 &lt;&lt; \u5de6\u79fb"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#251","text":"\u7528\u6765\u5c06\u4e00\u4e2a\u6570\u7684\u5404\u4e8c\u8fdb\u5236\u4f4d\u5168\u90e8\u5de6\u79fbN\u4f4d\uff0c\u53f3\u88650 \u6548\u679c\u7b49\u4ef7\u5c06\u8be5\u6570\u4e58\u4e8c","title":"2.5.1 \u5b9a\u4e49"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#26","text":"C++ #include <stdio.h> int main () { int a = 1 ; printf ( \"a<<2 = %d\" , a << 2 ); return 0 ; }","title":"2.6 \u4e3e\u4f8b"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#27","text":"","title":"2.7 >&gt; \u53f3\u79fb"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#271","text":"\u5c06\u4e00\u4e2a\u6570\u7684\u5404\u4e8c\u8fdb\u5236\u4f4d\u53f3\u79fbN\u4f4d\uff0c\u79fb\u5230\u53f3\u7aef\u7684\u4f4e\u4f4d\u88ab\u820d\u5f03\uff0c\u5bf9\u4e8e\u65e0\u7b26\u53f7\u6570\uff0c\u9ad8\u4f4d\u88650 \u6548\u679c\u7b49\u4ef7\u5c06\u8be5\u6570\u9664\u4e8c","title":"2.7.1 \u5b9a\u4e49"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#272","text":"C++ #include <stdio.h> int main () { int a = 7 ; printf ( \"a>>2 = %d\" , a >> 1 ); return 0 ; }","title":"2.7.2 \u4e3e\u4f8b"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#28","text":"\u4f8b\u5982\uff1a","title":"2.8 \u4e00\u4e9b\u5e94\u7528"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#281-1","text":"\u6211\u4eec\u901a\u8fc7\u5de6\u79fb\u548c\u6216\u4f4d\u8fd0\u7b97\u5373\u53ef\u5c06\u8be5\u6570\u7684\u67d0\u4e00\u4f4d\u8bbe\u7f6e\u4e3a1\uff0c\u6216\u8005\u662f\u5224\u65ad\u662f\u5426\u4e3a1 eg\uff1a x|(1<<10) :\u5c06\u4ece\u53f3\u5f80\u5de6\u7b2c\u5341\u4e2a\u4f4d\u7f6e\u8bbe\u4e3a1","title":"2.8.1 \u5c06\u8be5\u6570\u7684\u67d0\u4e00\u4f4d\u8bbe\u7f6e\u4e3a1"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#282-0","text":"\u5982\u6807\u9898\uff0c\u53ef\u4ee5\u548c\u6211\u4eec\u4e0a\u6b21\u5b66\u7684\u524d\u7f00\u548c\u7ed3\u5408\u8d77\u6765\uff0c\u5e76\u4e14\u6839\u636e\u8fd9\u4e2a\u6027\u8d28\u6211\u4eec\u80fd\u5199\u51fa\u4e0d\u9700\u8981\u96f6\u65f6\u53d8\u91cf\u6570\u7684SWAP\u51fd\u6570","title":"2.8.2 \u4e24\u4e2a\u76f8\u540c\u7684\u5f02\u6216\u503c\u4e3a0"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#283-n","text":"\u6211\u4eec\u5c06n\u548c1\u8fdb\u884c\u4f4d\u4e0e\u64cd\u4f5c\u5c31\u80fd\u5224\u65ad\uff0c\u56e0\u4e3a\u5947\u6570\u548c\u5076\u6570\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\u6700\u540e\u4e00\u4f4d\u662f\u5426\u4e3a1\u5373\u53ef C++ if ( n & 1 ){ puts ( \"\u5947\u6570\" ); } else { puts ( \"\u5076\u6570\" ); }","title":"2.8.3 \u901a\u8fc7&amp;\u8fd0\u7b97\u5224\u65ad\u6570n\u662f\u5426\u4e3a\u5947\u6570"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#284-intak","text":"\\((k=0,1,2\u2026\u2026sizeof(int))\\) Text Only a>>k&1 \u66f4\u591a\u6280\u5de7\u8bf7\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\uff1a https://zhuanlan.zhihu.com/p/54946559","title":"2.8.4 \u53d6int\u578b\u53d8\u91cfa\u7684\u7b2ck\u4f4d"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#_4","text":"","title":"\u4e09\u3001\u4f4d\u8fd0\u7b97\u76f8\u5173\u51fd\u6570"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#31-__builtin_popcountunsigned-int-n","text":"\u8be5\u51fd\u6570\u65f6\u5224\u65adn\u7684\u4e8c\u8fdb\u5236\u4e2d\u6709\u591a\u5c11\u4e2a1 eg: C++ int n = 15 ; //\u4e8c\u8fdb\u5236\u4e3a1111 cout << __builtin_popcount ( n ) << endl ; //\u8f93\u51fa4","title":"3.1 __builtin_popcount(unsigned int n)"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#32-__builtin_parityunsigned-int-n","text":"\u8be5\u51fd\u6570\u662f\u5224\u65adn\u7684\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570\u7684\u5947\u5076\u6027 eg: C++ int n = 15 ; //\u4e8c\u8fdb\u5236\u4e3a1111 int m = 7 ; //111 cout << __builtin_parity ( n ) << endl ; //\u5076\u6570\u4e2a\uff0c\u8f93\u51fa0 cout << __builtin_parity ( m ) << endl ; //\u5947\u6570\u4e2a\uff0c\u8f93\u51fa1","title":"3.2 __builtin_parity(unsigned int n)"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#33-__builtin_ffsunsigned-int-n","text":"\u8be5\u51fd\u6570\u5224\u65adn\u7684\u4e8c\u8fdb\u5236\u672b\u5c3e\u6700\u540e\u4e00\u4e2a1\u7684\u4f4d\u7f6e\uff0c\u4ece\u4e00\u5f00\u59cb eg: C++ int n = 1 ; //1 int m = 8 ; //1000 cout << __builtin_ffs ( n ) << endl ; //\u8f93\u51fa1 cout << __builtin_ffs ( m ) << endl ; //\u8f93\u51fa4","title":"3.3 __builtin_ffs(unsigned int n)"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#34-__builtin_ctzunsigned-int-n","text":"\u8be5\u51fd\u6570\u5224\u65adn\u7684\u4e8c\u8fdb\u5236\u672b\u5c3e\u540e\u97620\u7684\u4e2a\u6570\uff0c\u5f53n\u4e3a0\u65f6\uff0c\u548cn\u7684\u7c7b\u578b\u6709\u5173 eg: C++ int n = 1 ; //1 int m = 8 ; //1000 cout << __builtin_ctzll ( n ) << endl ; //\u8f93\u51fa0 cout << __builtin_ctz ( m ) << endl ; //\u8f93\u51fa3","title":"3.4 __builtin_ctz(unsigned int n)"},{"location":"%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#35-__builtin_clz-unsigned-int-x","text":"\u8be5\u51fd\u6570\u5224\u65adn\u7684\u4e8c\u8fdb\u5236\u524d\u5bfc\u76840\u7684\u4e2a\u6570\u3002 eg: C++ #include <stdio.h> int main () { int a = 1 << 30 ; printf ( \"%d \\n \" , __builtin_clz ( a )); //\u8f93\u51fa1 return 0 ; }","title":"3.5 __builtin_clz (unsigned int x)"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/","text":"0\u57fa\u7840\u901f\u901aC\u8bed\u8a00 \u00b6 \u914d\u5957\u89c6\u9891\uff1a https://www.bilibili.com/video/BV1W34y1U7eK?spm_id_from=333.999.0.0 \u4e00\u3001\u5173\u4e8eC\u8bed\u8a00 \u00b6 C \u8bed\u8a00\u662f\u4e00\u79cd\u901a\u7528\u7684\u9ad8\u7ea7\u8bed\u8a00\uff0c\u6700\u521d\u662f\u7531\u4e39\u5c3c\u65af\u00b7\u91cc\u5947\u5728\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u4e3a\u5f00\u53d1 UNIX \u64cd\u4f5c\u7cfb\u7edf\u800c\u8bbe\u8ba1\u7684\u3002C \u8bed\u8a00\u6700\u5f00\u59cb\u662f\u4e8e 1972 \u5e74\u5728 DEC PDP-11 \u8ba1\u7b97\u673a\u4e0a\u88ab\u9996\u6b21\u5b9e\u73b0\u3002 \u5728 1978 \u5e74\uff0c\u5e03\u83b1\u6069\u00b7\u67ef\u6797\u6c49\uff08Brian Kernighan\uff09\u548c\u4e39\u5c3c\u65af\u00b7\u91cc\u5947\uff08Dennis Ritchie\uff09\u5236\u4f5c\u4e86 C \u7684\u7b2c\u4e00\u4e2a\u516c\u5f00\u53ef\u7528\u7684\u63cf\u8ff0\uff0c\u73b0\u5728\u88ab\u79f0\u4e3a K&R \u6807\u51c6\u3002 UNIX \u64cd\u4f5c\u7cfb\u7edf\uff0cC\u7f16\u8bd1\u5668\uff0c\u548c\u51e0\u4e4e\u6240\u6709\u7684 UNIX \u5e94\u7528\u7a0b\u5e8f\u90fd\u662f\u7528 C \u8bed\u8a00\u7f16\u5199\u7684\u3002\u7531\u4e8e\u5404\u79cd\u539f\u56e0\uff0cC \u8bed\u8a00\u73b0\u5728\u5df2\u7ecf\u6210\u4e3a\u4e00\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e13\u4e1a\u8bed\u8a00\u3002 1.1 \u4f18\u70b9 \u00b6 \u6613\u4e8e\u5b66\u4e60\u3002 \u7ed3\u6784\u5316\u8bed\u8a00\u3002 \u5b83\u4ea7\u751f\u9ad8\u6548\u7387\u7684\u7a0b\u5e8f\u3002 \u5b83\u53ef\u4ee5\u5904\u7406\u5e95\u5c42\u7684\u6d3b\u52a8\u3002 \u5b83\u53ef\u4ee5\u5728\u591a\u79cd\u8ba1\u7b97\u673a\u5e73\u53f0\u4e0a\u7f16\u8bd1\u3002 1.2 \u7f3a\u70b9 \u00b6 \u56e0\u4e3aC\u8bed\u8a00\u7ed9\u7f16\u5199\u8005\u592a\u5927\u6743\u9650\uff0c\u4f60\u53ef\u80fd\u628a\u63e1\u4e0d\u4f4f \u4e8c\u3001\u4e3a\u4ec0\u4e48\u8981\u5b66\u4e60C\u8bed\u8a00 \u00b6 C \u8bed\u8a00\u6700\u521d\u662f\u7528\u4e8e\u7cfb\u7edf\u5f00\u53d1\u5de5\u4f5c\uff0c\u7279\u522b\u662f\u7ec4\u6210\u64cd\u4f5c\u7cfb\u7edf\u7684\u7a0b\u5e8f\u3002\u7531\u4e8e C \u8bed\u8a00\u6240\u4ea7\u751f\u7684\u4ee3\u7801\u8fd0\u884c\u901f\u5ea6\u4e0e\u6c47\u7f16\u8bed\u8a00\u7f16\u5199\u7684\u4ee3\u7801\u8fd0\u884c\u901f\u5ea6\u51e0\u4e4e\u4e00\u6837\uff0c\u6240\u4ee5\u91c7\u7528 C \u8bed\u8a00\u4f5c\u4e3a\u7cfb\u7edf\u5f00\u53d1\u8bed\u8a00\u3002\u5e76\u4e14C\u8bed\u8a00\u4fbf\u4e8e\u7406\u89e3\uff0c\u4e5f\u662f\u5f88\u591a\u5176\u4ed6\u8bed\u8a00\u7684\u6bcd\u8bed\u8a00\uff0c\u901a\u8fc7\u5b66\u4e60C\u8bed\u8a00\uff0c\u6211\u4eec\u80fd\u591f\u5feb\u901f\u7684\u5bf9\u7f16\u7a0b\u8fdb\u884c\u4e00\u4e2a\u4e86\u89e3\uff0c\u5e76\u4e14\u540e\u7eed\u5728\u5b66\u4e60\u5176\u4ed6\u8bed\u8a00\u7684\u65f6\u5019(\u8bed\u6cd5)\u4f1a\u66f4\u52a0\u5bb9\u6613\uff0c\u6240\u4ee5C\u8bed\u8a00\u7684\u5b66\u4e60\u662f\u6709\u5fc5\u8981\u7684 \u4e09\u3001C\u8bed\u8a00\u7684IDE \u00b6 3.1 \u5173\u4e8eIDE\uff1a \u00b6 IDE\u5c31\u662f\u4e00\u7cfb\u5217\u5f00\u53d1\u5de5\u5177\u7684\u7ec4\u5408\u5957\u88c5.\u8fd9\u5c31\u597d\u6bd4\u53f0\u5f0f\u673a\uff0c\u4e00\u4e2a\u53f0\u5f0f\u673a\u7684\u6838\u5fc3\u90e8\u4ef6\u662f\u4e3b\u673a\uff0c\u6709\u4e86\u4e3b\u673a\u5c31\u80fd\u72ec\u7acb\u5de5\u4f5c\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u5728\u8d2d\u4e70\u53f0\u5f0f\u673a\u65f6\uff0c\u5f80\u5f80\u8fd8\u8981\u9644\u5e26\u4e0a\u663e\u793a\u5668\u3001\u952e\u76d8\u3001\u9f20\u6807\u3001U\u76d8\u3001\u6444\u50cf\u5934\u7b49\u5916\u56f4\u8bbe\u5907\uff0c\u56e0\u4e3a\u53ea\u6709\u4e3b\u673a\u592a\u4e0d\u65b9\u4fbf\u4e86\uff0c\u5fc5\u987b\u6709\u5916\u8bbe\u624d\u80fd\u73a9\u7684\u723d\u3002 \u96c6\u6210\u5f00\u53d1\u73af\u5883\u4e5f\u662f\u8fd9\u4e2a\u9053\u7406\uff0c\u53ea\u6709\u7f16\u8bd1\u5668\u4e0d\u65b9\u4fbf\uff0c\u6240\u4ee5\u8fd8\u8981\u589e\u52a0\u5176\u4ed6\u7684\u8f85\u52a9\u5de5\u5177\u3002\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u6211\u4e00\u822c\u4e5f\u662f\u4f7f\u7528\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff0c\u800c\u4e0d\u662f\u5355\u72ec\u5730\u4f7f\u7528\u7f16\u8bd1\u5668\u3002 3.1.1 \u901a\u4fd7\u7684\u79f0\u547c \u00b6 \u6709\u65f6\u5019\u4e3a\u4e86\u79f0\u547c\u65b9\u4fbf\uff0c\u6216\u8005\u521d\u5b66\u8005\u6ca1\u6709\u4e25\u683c\u533a\u5206\u6982\u5ff5\uff0c\u4e5f\u4f1a\u5c06C\u8bed\u8a00\u96c6\u6210\u5f00\u53d1\u73af\u5883\u79f0\u4f5c\u201cC\u8bed\u8a00\u7f16\u8bd1\u5668\u201d\u6216\u8005\u201cC\u8bed\u8a00\u7f16\u7a0b\u8f6f\u4ef6\u201d\u3002\u8fd9\u91cc\u5927\u5bb6\u4e0d\u8981\u8ba4\u4e3a\u662f\u4e00\u79cd\u9519\u8bef\uff0c\u5c31\u628a\u5b83\u5f53\u505a\u201c\u4e61\u95f4\u4fd7\u8bed\u201d\u5427\u3002 (\u672c\u6559\u7a0b\u5efa\u7acb\u5728Windows\u5e73\u53f0) \u521d\u5b66\u8005\u7684\u8bdd\u4f7f\u7528IDE\u6211\u63a8\u8350 Devcpp \uff0c\u8fd9\u4e2aIDE\u975e\u5e38\u8f7b\u4fbf\u597d\u7528 \u5982\u679c\u4f60\u60f3\u6709\u4e00\u4e2a\u597d\u770b\u7684\u7f16\u8f91\u754c\u9762\uff0c\u90a3\u4e48\u6211\u5efa\u8bae\u4f60\u7528 VScode \u6216\u8005 Visual Studio \u5f53\u7136\u6211\u8fd8\u662f\u63a8\u8350\u4f7f\u7528 CLion \u56db\u3001\u7a0b\u5e8f\u7ed3\u6784 \u00b6 \u4e00\u4e2aC\u7a0b\u5e8f\u5305\u542b\u4ee5\u4e0b\u90e8\u5206 \u9884\u5904\u7406\u6307\u4ee4 \u51fd\u6570 \u53d8\u91cf \u903b\u8f91\u4ee3\u7801 \u6ce8\u91ca \u4e3e\u4e2a\u6817\u5b50\uff1a C++ #include <stdio.h> //\u4e0a\u9762\u662f\u5934\u6587\u4ef6\uff0c\u4e0b\u9762\u662f\u51fd\u6570 int main () { printf ( \"Hello Mangata!\" ); return 0 ; } \u6211\u4eec\u5148\u6765\u5256\u6790\u4e00\u4e0b\u8fd9\u4e2aC\u7a0b\u5e8f \u7b2c\u4e00\u884c\u5c31\u662f\u4e00\u4e2a\u9884\u5904\u7406\u6307\u4ee4\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u540e\u9762\u8bb2\u7684\u5934\u6587\u4ef6 \u7b2c\u4e8c\u884c\u5c31\u662f\u4e00\u4e2a\u884c\u6ce8\u91ca\uff0c\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7 /* */ \u6765\u8fbe\u5230\u533a\u95f4\u5757\u6ce8\u91ca\u7684\u6548\u679c \u7b2c\u4e09\u884c\u5f00\u59cb\u5230\u7b2c\u4e03\u884c\u5c31\u662f\u4e00\u4e2a\u6807\u51c6\u7684\u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u540e\u9762\u8bb2\u7684\u4e3b\u51fd\u6570\uff0c\u8981\u8bb0\u4f4f\u4e00\u4e2aC\u7a0b\u5e8f\u4e00\u5b9a\u6709\u4e14\u53ea\u6709\u4e00\u4e2amain\u51fd\u6570 \u7b2c\u4e94\u884c\u662f\u4e00\u4e2a\u8f93\u51fa\u8bed\u53e5\uff0c\u8c03\u7528\u4e86 printf \u5e93\u51fd\u6570 \u4e94\u3001\u57fa\u672c\u8bed\u6cd5 \u00b6 5.1 \u5934\u6587\u4ef6 \u00b6 5.1.1 \u4e3a\u4ec0\u4e48\u8981\u7528\u5934\u6587\u4ef6\u5462 \u00b6 \u56e0\u4e3a\u5934\u6587\u4ef6\u91cc\u9762\u6709\u6211\u4eec\u9700\u8981\u7684\u4e00\u4e9b\u57fa\u672c\u51fd\u6570\uff0c\u6bd4\u5982\u8f93\u5165\u7684 scanf \u8f93\u51fa\u7684 printf \uff0c\u8fd9\u4e9b\u51fd\u6570\u524d\u4eba\u4eec\u5df2\u7ecf\u5e2e\u6211\u4eec\u5199\u597d\u4e86\uff0c\u4e0d\u5fc5\u6211\u4eec\u4ece\u5934\u5f00\u59cb\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5f15\u5165\u5934\u6587\u4ef6\u6765\u4f7f\u7528\u5e93\u51fd\u6570\uff0c\u53ef\u4ee5\u65b9\u4fbf\u6211\u4eec\u7684\u7a0b\u5e8f\u7f16\u5199 5.1.2 \u600e\u4e48\u5f15\u5165\u5462 \u00b6 \u6211\u4eec\u901a\u8fc7 #include \u7684\u4e00\u79cd\u201c\u6307\u4ee4\u201d \uff0c\u5934\u6587\u4ef6\u7684\u5f15\u5165\u662f\u9884\u5904\u7406\u8bed\u53e5 #include \u53eb\u505a\u6587\u4ef6\u5305\u542b\u547d\u4ee4\uff0c\u7528\u6765\u5f15\u5165\u5bf9\u5e94\u7684\u5934\u6587\u4ef6\uff08 .h \u6587\u4ef6\uff09\u3002#include \u4e5f\u662fC\u8bed\u8a00\u9884\u5904\u7406\u547d\u4ee4\u7684\u4e00\u79cd\u3002 5.1.3 include\u683c\u5f0f \u00b6 C++ #include <xxx.h> #include \"xxx.h\" \u8fd9\u5c31\u662fC\u8bed\u8a00\u7684\u4e24\u79cd\u5f15\u5165\u5934\u6587\u4ef6\u7684\u683c\u5f0f\uff0c\u4e2d\u95f4\u7684\u7a7a\u683c\u4e0d\u662f\u5fc5\u987b\u7684(\ud83d\ude00)\uff0cxxx\u5c31\u662f\u4f60\u60f3\u7528\u7684\u5e93 5.1.4 \u5e38\u7528\u7684\u5934\u6587\u4ef6 \u00b6 \u5934\u6587\u4ef6 \u63cf\u8ff0 #include<stdio.h> \u8fd9\u662f\u4e00\u4e2a\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u7684\u5934\u6587\u4ef6 #include<math.h> \u8fd9\u662f\u6570\u5b66\u51fd\u6570\u7684\u5934\u6587\u4ef6 #include<string.h> \u8fd9\u662f\u5b57\u7b26\u4e32\u51fd\u6570\u7684\u5934\u6587\u4ef6 #include<time.h> \u8fd9\u662f\u65f6\u95f4\u51fd\u6570\u7684\u5934\u6587\u4ef6 #include<stdlib.h> \u5b9e\u7528\u5de5\u5177\u51fd\u6570\u7684\u5934\u6587\u4ef6 \u8fd9\u4e9b\u5927\u6982\u5c31\u662f\u5e73\u5e38\u4f7f\u7528\u8f83\u591a\u7684\u5934\u6587\u4ef6\u4e86\uff0c\u5173\u4e8e\u5934\u6587\u4ef6\u5177\u4f53\u7684\u54ea\u4e9b\u51fd\u6570\uff0c\u6211\u540e\u9762\u4f1a\u8bb2\u4e00\u4e9b\uff0c\u4f46\u662f\u4e5f\u53ea\u662f\u5e38\u7528\u7684\uff0c\u6240\u4ee5\u66f4\u591a\u7684\u4e1c\u897f\u8fd8\u9700\u8981\u540c\u5b66\u4eec\u81ea\u5df1\u53bb\u7f51\u4e0a\u62d3\u5c55 \u6211\u8fd9\u91cc\u653e\u4e00\u4e2a\u8fd9\u4e9b\u5934\u6587\u4ef6\u7684\u5e38\u7528\u51fd\u6570\u8fde\u63a5\uff1a https://blog.csdn.net/acm_Mercyking/article/details/50119289 \u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53bb\u81ea\u5df1\u62d3\u5c55\u4e00\u4e0b\u5662 5.2 \u6807\u51c6\u8f93\u5165\u8f93\u51fa\u51fd\u6570 \u00b6 5.2.1 scanf \u00b6 \u8fd9\u4e2a\u662f\u6807\u51c6\u8f93\u5165\u51fd\u6570\uff0c\u56e0\u4e3a\u8f93\u5165\u5bf9\u683c\u5f0f\u8981\u6c42\u5f88\u4e25\uff0c\u4e0d\u8fc7\u901f\u5ea6\u662f\u975e\u5e38\u5feb\u7684\uff0c\u4e0b\u9762\u662f scanf \u7684\u58f0\u660e C++ int scanf ( const char * format , ...) scanf \u524d\u9762\u90a3\u4e2aint\u662f\u8fd4\u56de\u7c7b\u578b\uff0c\u53ef\u4ee5\u4e0d\u7528\u7ba1\uff0c\u5982\u679c\u4f60\u771f\u60f3\u77e5\u9053\u7684\u8bdd\uff0c\u5176\u5b9e\u4e5f\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u6210\u529f\u8f93\u5165\u8d4b\u503c\u7684\u4e2a\u6570 \u5173\u4e8e\u62ec\u53f7\u91cc\u9762\uff0c\u81ea\u7136\u5c31\u662f\u4f20\u7684\u53c2\u6570\u54af\uff0c\u6211\u4eec\u4e00\u4e00\u6765\u770b\u62ec\u53f7\u91cc\u9762\u7684\u4e1c\u897f\uff0c\u91cc\u9762\u7684\u7ed3\u6784\u662f\u957f\u4e0b\u9762\u8fd9\u6837\u7684\uff1a C++ scanf ( \"<\u683c\u5f0f\u5316\u5b57\u7b26\u4e32>\" , < \u53c2\u91cf\u8868 > ); scanf ( \"%d\" , & a ); \u8fd9\u91cc\u7684\u4f8b\u5b50\u6211\u4eec\u7528\u7684\u662f\u4e00\u4e2a%d\uff0c\u8fd9\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u8fd9\u5c31\u8868\u793a\u6211\u4eec\u8f93\u5165\u7684\u6570\u636e\u7684\u7c7b\u578b\u662f\u4e00\u4e2aint\u6574\u5f62\u7684\uff0c\u9664\u4e86 %d \u6211\u4eec\u8fd8\u6709 %c \u3001 %lf \u3001 %lld \u7b49\u7b49\u4e00\u7cfb\u5217\u7684\u6807\u51c6\u5316\u8f93\u5165\u7684\u683c\u5f0f\uff0c\u5177\u4f53\u54ea\u79cd\u7c7b\u578b\u4f7f\u7528\u54ea\u79cd\u7b26\u53f7\uff0c\u90a3\u5c31\u8981\u6839\u636e\u4f7f\u7528\u60c5\u51b5\u770b\u5566\uff0c\u4e5f\u5c31\u662f\u4e0b\u9762\u6211\u4eec\u63d0\u5230\u7684\u6570\u636e\u7c7b\u578b\u3002 5.2.2 printf \u00b6 \u6807\u51c6\u8f93\u51fa\u5176\u5b9e\u9053\u7406\u548c\u6807\u51c6\u8f93\u5165\u662f\u540c\u7406\u7684\uff0c\u6211\u4eec\u5148\u6765\u770b\u770b\u8fd9\u4e2a\u6807\u6ce8\u8f93\u51fa\u58f0\u660e C++ int printf ( const char * format , ...) \u540c\u7406\u51fd\u6570\u524d\u9762\u6709\u4e00\u4e2aint\u7684\u8fd4\u56de\u503c\uff0c\u5982\u679c\u51fd\u6570\u6210\u529f\u6267\u884c\uff0c\u90a3\u4e48\u5c31\u4f1a\u8fd4\u56de\u8f93\u51fa\u7684\u5b57\u7b26\u6570\uff0c\u5426\u5219\u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a\u8d1f\u6570 \u6211\u4eec\u518d\u6765\u770b\u8fd9\u4e2a printf \u7684\u4e00\u4e2a\u7ed3\u6784 C++ printf ( \"<\u683c\u5f0f\u5316\u5b57\u7b26\u4e32>\" , < \u53c2\u91cf\u8868 > ); printf ( \"%d \\n \" , a ); \u5176\u5b9e\u548c scanf \u6807\u51c6\u8f93\u5165\u7684\u7ed3\u6784\u662f\u5927\u540c\u5c0f\u5f02\u7684\uff0c \" \" \u4e2d\u95f4\u653e\u7684\u5c31\u662f\u683c\u5f0f\u5b57\u7b26\u5f62\u5f0f\uff0c\u53c2\u91cf\u8868\u5c31\u662f\u4f60\u60f3\u8f93\u51fa\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u662f\u4e00\u4e2a\u4e5f\u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u6ca1\u6709\uff0c\u6211\u4eec\u76f4\u63a5\u8f93\u51fa\u5b57\u7b26\u7c7b\u578b\u7684\u4e1c\u897f\u5c31\u4e0d\u9700\u8981\u53d8\u91cf\uff0c\u4f46\u662f\u8bf7\u6ce8\u610f\u5b58\u5728\u8f6c\u4e49\u7684\u60c5\u51b5\uff0c\u6bd4\u5982 '\\' \uff0c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53bb\u767e\u5ea6\u4e00\u4e0b 5.3 \u5173\u4e8e'\u683c\u5f0f\u5316' \u00b6 \u4e3a\u4ec0\u4e48\u6211\u8981\u5355\u72ec\u5199\u4e00\u4e2a\u5173\u4e8e\u683c\u5f0f\u5316\u7684\u5355\u70b9\u5462\uff0c\u56e0\u4e3a\u8fd9\u624d\u662f\u683c\u5f0f\u5316\u8f93\u5165\u8f93\u51fa\u7684\u4e00\u4e2a**\u7279\u70b9**\u6216\u8005\u8bf4\u662f\u5c0f\u6280\u5de7 \u6211\u4eec\u6765\u770b scanf \u8fd9\u4e2a\u6807\u51c6\u8f93\u5165\uff0c\u5728\u62ec\u53f7\u91cc\u9762\u7684\u53cc\u5f15\u53f7\u91cc\u9762\u7684\u662f\u6211\u4eec\u683c\u5f0f\u5316\u8f93\u5165\u7684\u4e1c\u897f\uff0c\u6211\u4e3e\u4e2a\u6817\u5b50\uff1a \u5982\u679c\u6709\u4e00\u4e2a\u9898\u76ee\u662f\u8fd9\u6837\u7684\uff0c\u8981\u6c42\u4f60\u8f93\u5165\u4e00\u4e2a Mangata+(\u6570\u5b57)\uff0c\u7136\u540e\u628a\u6570\u5b57\u8f93\u51fa\u51fa\u6765\uff0c\u5982\u679c\u5b66\u8fc7\u5b57\u7b26\u4e32\u5904\u7406\u7684\u540c\u5b66\uff0c\u5e94\u8be5\u5c31\u4f1a\u89c9\u5f97\u90a3\u76f4\u63a5\u4e00\u4e2a\u6b63\u5219\uff0c\u6216\u8005\u628aMangata\u53bb\u6389\uff0c\u7136\u540e\u8f93\u51fa \u8fd9\u6837\u90fd\u53ef\u4ee5\uff0c\u751a\u81f3\u6765\u8bf4\u7b2c\u4e8c\u79cd\u66f4\u52a0\u597d\uff0c\u4f46\u662f\u5982\u679c\u8fd9\u4e2a\u6570\u5b57\u4e0d\u5927\uff0c\u5e76\u4e14\u8981\u6c42\u4f60\u5bf9\u8fd9\u4e2a\u6570\u5b57\u505a\u4e00\u4e9b\u8ba1\u7b97\u4e0a\u7684\u64cd\u4f5c\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u5c31\u80fd\u7528\u5230 scanf \u7684\u683c\u5f0f\u5316\u8f93\u5165\u4e86\uff1a C++ #include <stdio.h> int main () { int a ; scanf ( \"Mangata%d\" , & a ); printf ( \"%d \\n \" , a ); return 0 ; } \u518d\u6bd4\u5982\u8bf4\u5982\u679c\u6211\u4eec\u9700\u8981\u8f93\u51fa\u4e00\u4e2a\u65f6\u95f4\u4f8b\u5982\u8fd9\u683708:01\uff0c\u6709\u8fd9\u79cd\u524d\u7f6e\u96f6\uff0c\u901a\u8fc7\u5b57\u7b26\u4e32\u7684\u8f93\u51fa\u8981\u9ebb\u70e6\u5f97\u591a\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u683c\u5f0f\u5316\u8f93\u51fa: C++ #include <stdio.h> int main () { printf ( \"%02d:%02d\" , 8 , 1 ); return 0 ; } \u7531\u4e8e\u672c\u4e66\u53ea\u662f\u901f\u901a\u6559\u7a0b\uff0c\u6240\u4ee5\u6211\u4e0d\u5728\u505a\u8fc7\u591a\u7684\u5217\u4e3e\uff0c\u66f4\u591a\u7684\u4e1c\u897f\u8fd8\u662f\u8981\u9760\u540c\u5b66\u4eec\u81ea\u5df1\u5b66\u4e60\u5566 5.4 \u6570\u636e\u7c7b\u578b \u00b6 5.4.1 \u6574\u6570\u7c7b\u578b \u00b6 \u7c7b\u578b \u5b58\u50a8\u5927\u5c0f \u503c\u7684\u8303\u56f4 char (\u9ed8\u8ba4\u5c31\u662f signed ) 1\u5b57\u8282 -128~127\u6216\u80050 ~ 255 unsigned char 1 \u5b57\u8282 0 ~ 255 signed char 1 \u5b57\u8282 -128~127 int 2 \u6216 4 \u5b57\u8282 -32768 \u5230 32767 \u6216 -2147483648 \u5230 2147483647 unsigned int 2 \u6216 4 \u5b57\u8282 0 ~ 65535 \u6216 0 ~ 4294967295 short 2 \u5b57\u8282 -32768 ~ 32767 unsigned short 2 \u5b57\u8282 0 ~ 65535 long 4 \u5b57\u8282 -2147483648 ~ 2147483647 unsigned long 4 \u5b57\u8282 0 ~ 4294967295 long long 8\u5b57\u8282 -9223372036854775808~9223372036854775807 5.4.2 \u6d6e\u70b9\u7c7b\u578b \u00b6 \u7c7b\u578b \u5b58\u50a8\u5927\u5c0f \u503c\u8303\u56f4 \u7cbe\u5ea6 float 4 \u5b57\u8282 1.2E-38 ~ 3.4E+38 6 \u4f4d\u6709\u6548\u4f4d double 8 \u5b57\u8282 2.3E-308 ~ 1.7E+308 15 \u4f4d\u6709\u6548\u4f4d long double 16 \u5b57\u8282 3.4E-4932 ~ 1.1E+4932 19 \u4f4d\u6709\u6548\u4f4d \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a**\u5173\u952e\u5b57** sizeof \u6765\u83b7\u5f97\u4e00\u4e2a\u7c7b\u578b\u6216\u8005\u8bf4\u540e\u9762\u7684\u53d8\u91cf\u7b49\u7b49\u7684\u5927\u5c0f \u4e3e\u4e2a\u6817\u5b50: C++ #include <stdio.h> int main () { printf ( \"%d \\n \" , sizeof ( char )); printf ( \"%d \\n \" , sizeof ( int )); printf ( \"%d \\n \" , sizeof ( long )); printf ( \"%d \\n \" , sizeof ( double )); return 0 ; } /* \u8f93\u51fa\u7ed3\u679c 1 4 4 8 */ \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 printf \u5e93\u51fd\u6570\u548c sizeof \u5173\u952e\u5b57 \uff0c\u524d\u8005\u662f\u6253\u5370\u51fd\u6570\uff0c\u540e\u8005\u662f\u8ba1\u7b97\u5bf9\u8c61\u5185\u5b58\u5927\u5c0f\u7684\u5173\u952e\u5b57 \u6211\u8fd9\u91cc\u5217\u4e3e\u4e00\u4e0b\u5e38\u7528\u7684\u51e0\u4e2a\u683c\u5f0f\u5316\u7b26\u53f7\uff1a \u7c7b\u578b \u8f93\u5165\u683c\u5f0f\u5316 \u8f93\u51fa\u683c\u5f0f\u5316 int %d %d char %c %c float %f %f double %lf %lf \u6216\u8005 %f long long %lld %lld \u5b57\u7b26\u4e32 %s %s 5.4.3 void \u7c7b\u578b \u00b6 void\u7c7b\u578b\u53ef\u4ee5\u62ff\u6765\u4fee\u9970\u51fd\u6570\uff0c\u51fd\u6570\u4e5f\u5c31\u4e0d\u9700\u8981\u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u6211\u4eec\u4e4b\u540e\u5728\u8bb2 void\u7c7b\u578b\u53ef\u4ee5\u62ff\u6765\u4fee\u9970\u6307\u9488\uff0c\u8fd9\u79cd\u6307\u9488\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f3a\u5236\u8f6c\u6362\u6765\u5b9e\u73b0\u8f6c\u6362\u5230\u4efb\u610f\u6570\u636e\u7c7b\u578b \u6211\u8fd9\u91cc\u653e\u4e00\u5f20C\u8bed\u8a00\u5305\u542b\u7684\u6570\u636e\u7c7b\u578b\u7684\u56fe\uff0c\u4fbf\u4e8e\u5927\u5bb6\u7406\u89e3\u8bb0\u5fc6: \u5173\u4e8e\u5176\u4ed6\u6ca1\u8bb2\u7684\u7c7b\u578b\u5728\u4e0b\u9762\u6211\u4f1a\u4e00\u4e00\u8bb2\u89e3\u7684\uff0c\u4e0d\u7528\u62c5\u5fc3\u5566\uff01 5.5 \u53d8\u91cf \u00b6 5.5.1 \u547d\u540d\u89c4\u5219 \u00b6 \u53d8\u91cf\u540d\u7684\u5f00\u5934\u5fc5\u987b\u662f\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf\uff0c\u4e0d\u80fd\u662f\u6570\u5b57\u3002\u5b9e\u9645\u7f16\u7a0b\u4e2d\u6700\u5e38\u7528\u7684\u662f\u4ee5\u5b57\u6bcd\u5f00\u5934\uff0c\u800c\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u53d8\u91cf\u540d\u662f\u7cfb\u7edf\u4e13\u7528\u7684\u3002 \u53d8\u91cf\u540d\u4e2d\u7684\u5b57\u6bcd\u662f\u533a\u5206\u5927\u5c0f\u5199\u7684\u3002\u6bd4\u5982 a \u548c A \u662f\u4e0d\u540c\u7684\u53d8\u91cf\u540d\uff0cnum \u548c Num \u4e5f\u662f\u4e0d\u540c\u7684\u53d8\u91cf\u540d\u3002 \u53d8\u91cf\u540d\u7edd\u5bf9\u4e0d\u53ef\u4ee5\u662fC\u8bed\u8a00\u5173\u952e\u5b57\uff0c\u8fd9\u4e00\u70b9\u4e00\u5b9a\u8981\u8bb0\u4f4f\uff01(\u5173\u4e8e\u5173\u952e\u5b57\u53ef\u4ee5\u770b\u4e0b\u9762\u7684\u5173\u952e\u5b57\u8868\u683c\uff0c\u8bb0\u4f4f\u5e38\u7528\u7684\u5c31\u884c\u4e86) \u53d8\u91cf\u540d\u4e2d\u4e0d\u80fd\u6709\u7a7a\u683c\u3002\u8fd9\u4e2a\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u56e0\u4e3a\u4e0a\u9762\u6211\u4eec\u8bf4\u8fc7\uff0c\u53d8\u91cf\u540d\u662f\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u7684\u7ec4\u5408\uff0c\u6ca1\u6709\u7a7a\u683c\u8fd9\u4e00\u9879\u3002 \u5173\u4e8e\u7f16\u7a0b\u547d\u540d\u89c4\u8303\u60a8\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a\u535a\u5ba2: https://www.cnblogs.com/wfwenchao/p/5209197.html \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u7528 ~\u62fc\u97f3 ~ \u4e3e\u4e2a\u4f8b\u5b50: C++ int temp ; //\u5b9a\u4e49\u4e86\u4e00\u4e2aint\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u540d\u53ebtemp char str ; //\u5b9a\u4e49\u4e86\u4e00\u4e2achar\u6570\u636e\u7c7b\u578b\u7684\u6570\u636e\u53d8\u91cf\uff0c\u540d\u53ebstr double num ; //\u5b9a\u4e49\u4e86\u4e00\u4e2adouble\u6570\u636e\u7c7b\u578b\u7684\u6570\u636e\u53d8\u91cf\uff0c\u540d\u53ebnum \u53d8\u91cf\u5b9a\u4e49\u5c31\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\u5728\u4f55\u5904\u521b\u5efa\u53d8\u91cf\u7684\u5b58\u50a8\uff0c\u4ee5\u53ca\u5982\u4f55\u521b\u5efa\u53d8\u91cf\u7684\u5b58\u50a8\u3002\u53d8\u91cf\u5b9a\u4e49\u6307\u5b9a\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\uff0c\u5e76\u5305\u542b\u4e86\u8be5\u7c7b\u578b\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\u7684\u5217\u8868 \u6bd4\u5982\u4f60\u8981\u5b9a\u4e49\u56db\u4e2a\u53d8\u91cf\uff0c\u8fd9\u56db\u4e2a\u53d8\u91cf\u90fd\u662fint\u7c7b\u578b\u7684\uff0c\u4f60\u5c31\u53ef\u4ee5\u5c06\u4ed6\u4eec\u5199\u5728\u4e00\u8d77\uff0c\u4ed6\u4eec\u4e4b\u95f4\u7528,\u9694\u5f00\u672b\u5c3e\u4ee5;\u7ed3\u675f C++ int a , b , c , d ; int e = 10 ; \u4e0a\u8ff0\u7684\u4f8b\u5b50\u90fd\u662f\u5b9a\u4e49\uff0c\u90a3\u4e48\u4ec0\u4e48\u662f\u58f0\u660e\u5462\uff1f\uff0c\u6211\u4eec\u6765\u770b\u4e24\u4e2a\u4f8b\u5b50 \u4f7f\u7528\u5173\u952e\u5b57\u4fee\u9970 C++ extern int a ; //\u8868\u793a\u7684\u5176\u4ed6\u6587\u4ef6\u4ee5\u53ca\u5b9a\u4e49\u8fc7a\u8fd9\u4e2a\u53d8\u91cf\uff0c\u6211\u4eec\u8fd9\u91cc\u76f4\u63a5\u62ff\u6765\u4f7f\u7528 \u51fd\u6570\u58f0\u660e C++ void f ( int a ); //\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\u7684\u51fd\u6570\u58f0\u660e \u58f0\u660e\u548c\u5b9a\u4e49\u6700\u91cd\u8981\u7684\u533a\u522b\u5c31\u662f\uff1a \u5b9a\u4e49\u521b\u5efa\u4e86\u5bf9\u8c61\u5e76\u4e3a\u6b64\u5bf9\u8c61\u5206\u914d\u4e86\u5185\u5b58\uff0c\u800c\u58f0\u660e\u5e76\u672a\u5206\u914d\u5185\u5b58 5.6 \u5f3a\u5236\u8f6c\u6362 \u00b6 \u8fd9\u4e2a\u4e1c\u897f\u4e0d\u96be\uff0c\u8bb2\u8d77\u6765\u4e5f\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u8fd8\u7b97\u6bd4\u8f83\u91cd\u8981\u6240\u4ee5\u5355\u72ec\u8bb2\u4e00\u4e0b\uff1a \u5176\u5b9e\u5728\u7a0b\u5e8f\u4e2d\u5b57\u8282\u957f\u5ea6\u8f83\u9ad8\u7684\u53d8\u91cf\u5bf9\u5b57\u8282\u957f\u5ea6\u8f83\u4f4e\u7684\u53d8\u91cf\u6709**\u4e00\u5b9a**\u7684\u517c\u5bb9\u6027\u7684\uff0c\u4f46\u662f\u4f4e\u7684\u5bf9\u9ad8\u7684\u53ef\u4e0d\u662f\u4e86\uff0c\u56e0\u4e3a\u5f88\u53ef\u80fd\u9020\u6210\u6570\u636e\u7684\u6ea2\u51fa\uff0c\u6216\u8005\u662f\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u4e4b\u95f4float\u548cint\uff0c\u6211\u4eec\u5f97\u5230\u7684\u662f\u4e00\u4e2afloat\u503c\uff0c\u4f46\u662f\u6211\u4eec\u60f3\u4fdd\u5b58\u4e00\u4e2aint\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u7528\u5230**\u5f3a\u5236\u8f6c\u6362**\uff0c\u6211\u4e3e\u4e2a\u6817\u5b50\uff1a C #include <stdio.h> int main () { float a = 1.234 ; int b = ( int ) a ; printf ( \"a = %f \\t b = %d \\n \" , a , b ); return 0 ; } \u8fd9\u4e2a\u6817\u5b50\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u4e0b\u9762\u5230\u5185\u5b58\u63a7\u5236\u7684\u65f6\u5019\u4f7f\u7528 malloc \u4e5f\u662f\u9700\u8981\u5f3a\u5236\u8f6c\u6362\u7684\u3002 5.7 \u5de6\u503c\u53f3\u503c \u00b6 **\u5de6\u503c\uff08 lvalue \uff09\uff1a**\u6307\u5411\u5185\u5b58\u4f4d\u7f6e\u7684\u8868\u8fbe\u5f0f\u88ab\u79f0\u4e3a\u5de6\u503c\uff08 lvalue \uff09\u8868\u8fbe\u5f0f\u3002\u5de6\u503c\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u5de6\u8fb9\u6216\u53f3\u8fb9\u3002 **\u53f3\u503c\uff08 rvalue \uff09\uff1a**\u672f\u8bed\u53f3\u503c\uff08 rvalue \uff09\u6307\u7684\u662f\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u67d0\u4e9b\u5730\u5740\u7684\u6570\u503c\u3002\u53f3\u503c\u662f\u4e0d\u80fd\u5bf9\u5176\u8fdb\u884c\u8d4b\u503c\u7684\u8868\u8fbe\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53f3\u503c\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u53f3\u8fb9\uff0c\u4f46\u4e0d\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u5de6\u8fb9\u3002 \u53d8\u91cf\u662f\u5de6\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u5de6\u8fb9\u3002\u6570\u503c\u578b\u7684\u5b57\u9762\u503c\u662f\u53f3\u503c\uff0c\u56e0\u6b64\u4e0d\u80fd\u88ab\u8d4b\u503c\uff0c\u4e0d\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u5de6\u8fb9\u3002 \u4e3e\u4e2a\u6817\u5b50\uff1a C++ int a = 20 ; \u5728\u8fd9\u4e2a\u8bed\u53e5\u4e2da\u5c31\u662f\u4e00\u4e2a\u6307\u5411\u5185\u5b58\u7684\u53d8\u91cf\u4e5f\u5c31\u662f\u5de6\u503c\uff0c20\u5c31\u662f\u5b58\u50a8\u5728\u5185\u5b58\u67d0\u4e2a\u5730\u5740\u7684\u6570\u503c\uff0c\u6709\u4e86\u8fd9\u4e2a\u6982\u5ff5\u5c31\u80fd\u7406\u89e3\u4e0b\u9762\u7684\u8fd9\u4e2a\u8bed\u53e5\u4e86 C++ int a = 0 ; a = a + 1 ; printf ( \"%d \\n \" , a ); \u8fd9\u91cc\u6211\u4eec\u58f0\u660e\u4e86\u4e00\u4e2a`int`\u7c7b\u578b\u7684\u53d8\u91cfa\uff0c\u7136\u540e\u5728\u58f0\u660e\u7684\u65f6\u5019\u7ed9\u5b83\u5b9a\u4e49\u4e86\u521d\u503c\u4e3a0\uff0c\u7136\u540e\u7b2c\u4e8c\u4e2a\u8bed\u53e5\u6211\u4eec\u8ba9`a = a + 1`\uff0c\u6ce8\u610f\u6b64\u65f6\u5de6\u8fb9\u7684a\u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u4e5f\u5c31\u662f\u4e0a\u9762\u6211\u4eec\u8bf4\u7684\u5de6\u503c\uff0c\u53f3\u8fb9\u662fa\u7684\u503c\u52a0\u4e0a1\uff0c\u4e5f\u5c31\u662f\u53f3\u8fb9\u7684\u6574\u4f53\u6784\u6210\u4e86\u4e00\u4e2a\u53f3\u503c\uff0c\u5176\u5b9e\u5bf9\u4e8e\u5de6\u503c\u53f3\u503c\u4e0d\u5fc5\u7ea0\u7ed3\u592a\u591a\uff0c\u8fd9\u4e2a\u8bed\u53e5\u5b9e\u73b0\u7684\u6548\u679c\u5c31\u662fa\u81ea\u589e1\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6211\u4eec\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\u7684\u8bdd\u4f1a\u7ed9\u6211\u4eec\u6253\u5370\u4e00\u4e2a1\uff0c\u8fd9\u4e2a1\u5c31\u662f\u901a\u8fc7\u8fd0\u7b97\u540ea\u7684\u503c 5.8 \u5e38\u91cf \u00b6 5.8.1 \u6570\u503c\u5e38\u91cf \u00b6 \u6ce8\u610f\u6b64\u6570\u503c\u5e38\u91cf\u975e\u5f7c\u6570\u503c\uff0c\u6211\u6b64\u5904\u6240\u8bf4\u7684\u5e38\u91cf\u662f\u5355\u7eaf\u7684\u4e00\u4e2a\u503c\uff0c\u6ca1\u6709\u540d\u5b57\u90a3\u79cd\uff0c\u6bd4\u5982 3 \u4ed6\u662f\u4e00\u4e2a\u6574\u5f62\u5e38\u91cf 0.3 \u662f\u4e00\u4e2a\u6d6e\u70b9\u5e38\u91cf\u518d\u6bd4\u5982\u8bf4 `'c'` \u5b83\u662f\u4e00\u4e2a\u5b57\u7b26\u5e38\u91cf `\"ccc\"` \u5b83\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\uff0c\u8fd9\u79cd\u5c31\u662f**\u6570\u503c\u5e38\u91cf**\u4e86\uff0c\u4e00\u822c\u53ea\u662f\u7528\u6765\u521d\u59cb\u5316\uff0c\u800c\u4e14\u8fd9\u79cd\u6570\u503c\u5e38\u91cf\u4e0d\u6613\u7ef4\u62a4\uff0c\u6bd4\u5982\u8bf4\u6211\u4eec\u5728\u4e00\u4e2a\u7a0b\u5e8f\u7684\u5f88\u591a\u5730\u65b9\u90fd\u7528\u4e86\u540c\u4e00\u4e2a\u5e38\u91cf\u90a3\u4e48\u5982\u679c\u4f60\u60f3\u4fee\u6539\u8fd9\u4e2a\u5e38\u91cf\u7684\u503c\uff0c\u7a0d\u5fae\u7b28\u70b9\u7684\u540c\u5b66\u53ef\u80fd\u4f1a\u4e00\u4e2a\u4e00\u4e2a\u7684\u66ff\u6362\uff0c\u6709\u7684\u540c\u5b66\u53ef\u80fd\u60f3\u5230\u4e86\u76f4\u63a5\u6587\u4ef6\u5168\u5c40\u66ff\u6362\uff0c\u4f46\u662f\u8fd9\u6837\u505a\u662f\u6709\u98ce\u9669\u7684\uff0c\u6bd4\u5982\u6211\u7684\u5e38\u91cf\u4e3a1\uff0c\u6211\u60f3\u628a\u5b83\u66ff\u6362\u4e3a2\uff0c\u4f46\u662f\u6211\u53ef\u80fd\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u5e38\u91cf\u662f1\u5f00\u5934\u7684\uff0c\u6bd4\u598212\uff0c\u90a3\u4e48\u5c31\u4f1a\u9020\u6210\u6570\u636e\u7d0a\u4e71\uff0c\u751a\u81f3\u6709\u4e9b\u53d8\u91cf\u91cc\u9762\u4e5f\u5305\u542b\u4e861\u90a3\u4e48\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u51fa\u9519\uff0c\u518d\u9000\u4e00\u6b65\u8bb2\uff0c\u7f16\u8bd1\u6ca1\u95ee\u9898\uff0c\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u4e5f\u4e0d\u4f1a\u548c\u9884\u671f\u4e00\u6837 5.8.2 define\u5e38\u91cf \u00b6 \u8bf4\u7684\u6d45\u663e\u6613\u61c2\u70b9\uff0cdefine\u5c31\u662f\u4e00\u4e2a\u6587\u672c\u66ff\u6362\uff0c\u683c\u5f0f\u5982\u4e0b C++ #define xxx yyy //\u8fbe\u5230\u7684\u6548\u679c\u5c31\u662f\u4e0b\u9762\u7684\u7a0b\u5e8f\u6240\u6709\u7528\u5230\u7684xxx\u90fd\u4f1a\u88ab\u66ff\u6362\u4e3ayyy #define x 10 //\u8fd9\u91cc\u5c31\u8868\u793ax\u662f\u4e00\u4e2a\u5e38\u91cf\uff0c\u5b83\u8868\u793a\u7684value\u662f10 \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7#define \u6765\u5b9e\u73b0\u5b8f\u51fd\u6570eg: C++ #define max(a,b) (a>b?a:b) #define \u662f\u4e00\u4e2a\u9884\u5904\u7406\u6307\u4ee4\uff0c\u6240\u4ee5\u5728\u4e66\u5199\u4ee3\u7801\u7684\u65f6\u5019\u8bf7\u5c06 #define \u653e\u5728\u7a0b\u5e8f\u7684\u9876\u90e8 #define \u540e\u9762\u6ca1\u6709**\u5206\u53f7** ! \u8bf7\u5c3d\u91cf\u5c11\u4f7f\u7528 #define \uff0c\u56e0\u4e3a #define \u76f8\u5f53\u4e8e\u4e00\u79cd\u6587\u672c\u66ff\u6362\uff0c\u5728\u4ee3\u7801\u884c\u6570\u8f83\u5c11\u53d1\u751f\u7684\u95ee\u9898\u8f83\u5c11\uff0c\u4f46\u662f\u5728\u4ee3\u7801\u91cf\u8f83\u5927\u7684\u65f6\u5019\u8fd9\u79cd\u5e38\u91cf\u5c31\u4f1a\u5b58\u5728\u4e00\u79cd\u6f5c\u5728\u7684\u5371\u9669->\u51b2\u7a81(\u5982\u679c\u62a5\u9519\u8fd8\u597d\uff0c\u6ca1\u6709\u62a5\u9519\u90a3\u5c31\u96be\u53d7\u4e86\uff0c\u5927\u6982\u7387\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u548c\u9884\u671f\u4e0d\u540c) 5.8.3 const\u5173\u952e\u5b57 \u00b6 const\u662fconstant\u7684\u7f29\u5199\uff0c\u662f\u4e00\u4e2a\u4fee\u9970\u8bcd\u7528\u4e8e\u4fee\u9970\u4e00\u4e9b\u53d8\u91cf\uff0c\u901a\u8fc7const\u4fee\u9970\u7b26\u7684\u53d8\u91cf\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a**\u4e0d\u53ef\u53d8\u7684\u53d8\u91cf** eg: C++ const int a = 10 ; //\u8fd9\u5c31\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5e38\u91cf\uff0c\u540d\u53eba\uff0c\u503c\u4e3a10 \u901a\u8fc7 const \u4fee\u9970\u540e\u4e0d\u80fd\u66f4\u6539\u503c \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u4fee\u6539 const \u5b9a\u4e49\u7684\u5e38\u91cf 5.8.4 \u901a\u8fc7const\u4fee\u6539\u6307\u9488 \u00b6 \u5927\u4f53\u4e0a\u5206\u4e3a\u4e09\u7c7b \u4e00\u3001 const \u4fee\u9970\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\uff0c\u5219\u5185\u5bb9\u4e0d\u53ef\u53d8\uff0c\u4f46\u662f\u80fd\u901a\u8fc7\u4e00\u4e2a\u540c\u6570\u636e\u7c7b\u578b\u7684\u6307\u9488\u6765\u6539\u53d8\u503c C++ const int * a = 10 ; // \u8fd9\u6837\u7684\u5185\u5bb9\u4e0d\u53ef\u53d8 \u4e8c\u3001 const \u4fee\u9970\u6307\u9488\uff0c\u90a3\u4e48\u6307\u9488\u7684\u503c\u4e0d\u53ef\u53d8 C++ int a = 10 ; int * const b = & a ; \u6b64\u65f6\u7684 const \u4fee\u9970\u7684\u662f\u6307\u9488\uff0c\u90a3\u4e48\u6307\u9488\u6307\u5411\u7684\u5730\u5740\u4e0d\u53ef\u53d8\uff0c\u4e5f\u5c31\u662f\u6b64\u65f6\u7684b\u6307\u5411\u7684\u5730\u5740\u4e0d\u80fd\u8fb9\u53d8\uff0c\u4f46\u662f*b\u53ef\u53d8\uff0c\u8bf7\u540c\u5b66\u4eec\u8981\u60f3\u660e\u767d \u4e09\u3001 const \u4fee\u9970\u6307\u9488\u5e76\u4e14\u4fee\u9970\u7684\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u6307\u9488\u6307\u5411\u7684\u5730\u5740\u548c\u503c\u90fd\u4e0d\u53ef\u53d8 C++ int a = 10 ; const int * const b = & a ; \u6b64\u65f6\u7684b\u6307\u5411\u7684\u5730\u5740\u4e0d\u80fd\u66f4\u6539\uff0c\u5730\u5740\u4e0a\u7684\u503c*b\u4e5f\u4e0d\u80fd\u66f4\u6539 5.9 \u5b58\u50a8\u7c7b \u00b6 5.9.1 auto \u00b6 auto\u662f\u4e00\u79cd\u9ed8\u8ba4\u7684\u5b58\u50a8\u7c7b\uff0c\u4f5c\u7528\u8303\u56f4\u662f\u5c40\u90e8\uff0c\u4e00\u822c\u4e0d\u7528\u7ba1\uff0c\u751f\u547d\u5468\u671f\u548c\u4f5c\u7528\u57df\u90fd\u662f\u5c40\u90e8\u7684 5.9.2 static \u00b6 \u8fd9\u662f\u4e00\u4e2a\u9759\u6001\u7684\u5b58\u50a8\u7c7b\uff0c\u5b83\u6709\u70b9\u7279\u6b8a\u7684\u662f\u4ed6\u7684\u751f\u547d\u5468\u671f\u662f\u6574\u4e2a\u7a0b\u5e8f\u4ece\u5f00\u59cb\u5230\u7ed3\u675f\uff0c\u4f46\u662f\u5b83\u7684\u4f5c\u7528\u57df\u53ea\u662f\u5c40\u90e8 \u4e3e\u4e2a\u6817\u5b50: C++ #include <stdio.h> void f () { static int a = 0 ; a ++ ; printf ( \"%d \\n \" , a ); } int main () { for ( int i = 0 ; i < 5 ; ++ i ) { f (); } return 0 ; } \u4f60\u89c9\u5f97\u4f1a\u8f93\u51fa\u4ec0\u4e48\u5462\uff1f\u5bf9\u6ca1\u9519\uff0c\u8f93\u51fa C++ 1 2 3 4 5 \u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u5728\u51fd\u6570\u91cc\u9762\u5b9a\u4e49\u7684\u662f\u4e00\u4e2a\u9759\u6001\u53d8\u91cf\uff0c\u5b83\u7684\u58f0\u660e\u5468\u671f\u5c31\u662f\u4ece\u5b9a\u4e49\u5b83\u5230\u7a0b\u5e8f\u7ed3\u675f\uff0c\u6240\u4ee5\u8fd9\u91cc\u8f93\u51fa\u7684\u5185\u5bb9\u4e5f\u5c31\u4e0d\u96be\u7406\u89e3\u4e86 5.9.3 register \u00b6 register \u5b58\u50a8\u7c7b\u7528\u4e8e\u5b9a\u4e49\u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d\u800c\u4e0d\u662f RAM \u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u3002\u8fd9\u610f\u5473\u7740\u53d8\u91cf\u7684\u6700\u5927\u5c3a\u5bf8\u7b49\u4e8e\u5bc4\u5b58\u5668\u7684\u5927\u5c0f\uff08\u901a\u5e38\u662f\u4e00\u4e2a\u8bcd\uff09\uff0c\u4e14\u4e0d\u80fd\u5bf9\u5b83\u5e94\u7528\u4e00\u5143\u7684 '&' \u8fd0\u7b97\u7b26\uff08\u56e0\u4e3a\u5b83\u6ca1\u6709\u5185\u5b58\u4f4d\u7f6e\uff09\u3002 \u518d\u6765\u7528\u4e00\u4e2a\u901a\u4fd7\u7684\u89e3\u91ca\uff1a \u6b64\u6bb5\u51fa\u81ea**\u300aC\u8bed\u8a00\u6df1\u5ea6\u5256\u6790\u300b**\uff0c\u5f88\u68d2\u7684\u4e00\u672c\u4e66\uff0c\u5efa\u8bae\u6709\u4e00\u5b9a\u57fa\u7840\u518d\u770b 5.9.4 extern \u00b6 extern \u5b58\u50a8\u7c7b\u7528\u4e8e\u63d0\u4f9b\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u7684\u5f15\u7528\uff0c\u5168\u5c40\u53d8\u91cf\u5bf9\u6240\u6709\u7684\u7a0b\u5e8f\u6587\u4ef6\u90fd\u662f\u53ef\u89c1\u7684\u3002\u5f53\u60a8\u4f7f\u7528 extern \u65f6\uff0c\u5bf9\u4e8e\u65e0\u6cd5\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u4f1a\u628a\u53d8\u91cf\u540d\u6307\u5411\u4e00\u4e2a\u4e4b\u524d\u5b9a\u4e49\u8fc7\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002 \u5f53\u60a8\u6709\u591a\u4e2a\u6587\u4ef6\u4e14\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53ef\u4ee5\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528\u7684\u5168\u5c40\u53d8\u91cf\u6216\u51fd\u6570\u65f6\uff0c\u53ef\u4ee5\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528 extern \u6765\u5f97\u5230\u5df2\u5b9a\u4e49\u7684\u53d8\u91cf\u6216\u51fd\u6570\u7684\u5f15\u7528\u3002\u53ef\u4ee5\u8fd9\u4e48\u7406\u89e3\uff0c extern \u662f\u7528\u6765\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u58f0\u660e\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u6216\u51fd\u6570\u3002 \u603b\u7ed3\u4e00\u53e5\u8bddextern\u5c31\u662f\u4e3a\u4e86\u5728\u591a\u6587\u4ef6\u7f16\u7a0b\u7684\u65f6\u5019\u76f4\u63a5\u53d6\u53e6\u5916\u4e00\u4e2a\u6587\u4ef6\u7684\u53d8\u91cf \u5173\u4e8eextern\uff0c\u5176\u5b9e\u521d\u5b66\u8005\u4e0d\u5fc5\u8fc7\u4e8e\u5173\u7cfb\uff0c\u540e\u9762\u505a\u9879\u76ee\u5f00\u53d1\u7684\u65f6\u5019\u67e5\u627e\u67e5\u627e\u7528\u6cd5\u5373\u53ef\uff0c\u6211\u4eec\u8fd9\u91cc\u4e5f\u5c31\u4e0d\u8fc7\u591a\u5c55\u5f00\u4e86 5.10 \u8fd0\u7b97\u7b26 \u00b6 5.10.1 \u7b97\u6570\u8fd0\u7b97 \u00b6 \u8fd0\u7b97\u7b26 \u6548\u679c \u4f8b\u5b50 + \u5bf9\u4e24\u4e2a\u6570\u8fdb\u884c\u76f8\u52a0 a = 1 + 2 => a= 3 - \u5bf9\u4e24\u4e2a\u6570\u8fdb\u884c\u76f8\u51cf a = 2 - 1 => a = 1 * \u5bf9\u4e24\u4e2a\u6570\u8fdb\u884c\u76f8\u4e58 a = 2 * 2 => a = 4 / \u5bf9\u4e24\u4e2a\u6570\u8fdb\u884c\u76f8\u9664 a = 10 / 2 => a = 5 % a\u5bf9b\u53d6\u6a21 a = 10 % 3 = > a = 1 ++ \u53d8\u91cf\u81ea\u589e1 a = 0; ++a => a = 1 -- \u53d8\u91cf\u81ea\u51cf1 a = 0 ; --a => a = -1 5.10.2 \u5173\u7cfb\u8fd0\u7b97 \u00b6 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b == \u68c0\u67e5\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u503c\u662f\u5426\u76f8\u7b49\uff0c\u5982\u679c\u76f8\u7b49\u5219\u6761\u4ef6\u4e3a\u771f\u3002 (A == B) \u4e3a\u5047\u3002 != \u68c0\u67e5\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u503c\u662f\u5426\u76f8\u7b49\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u6761\u4ef6\u4e3a\u771f\u3002 (A != B) \u4e3a\u771f\u3002 > \u68c0\u67e5\u5de6\u64cd\u4f5c\u6570\u7684\u503c\u662f\u5426\u5927\u4e8e\u53f3\u64cd\u4f5c\u6570\u7684\u503c\uff0c\u5982\u679c\u662f\u5219\u6761\u4ef6\u4e3a\u771f\u3002 (A > B) \u4e3a\u5047\u3002 < \u68c0\u67e5\u5de6\u64cd\u4f5c\u6570\u7684\u503c\u662f\u5426\u5c0f\u4e8e\u53f3\u64cd\u4f5c\u6570\u7684\u503c\uff0c\u5982\u679c\u662f\u5219\u6761\u4ef6\u4e3a\u771f\u3002 (A < B) \u4e3a\u771f\u3002 >= \u68c0\u67e5\u5de6\u64cd\u4f5c\u6570\u7684\u503c\u662f\u5426\u5927\u4e8e\u6216\u7b49\u4e8e\u53f3\u64cd\u4f5c\u6570\u7684\u503c\uff0c\u5982\u679c\u662f\u5219\u6761\u4ef6\u4e3a\u771f\u3002 (A >= B) \u4e3a\u5047\u3002 <= \u68c0\u67e5\u5de6\u64cd\u4f5c\u6570\u7684\u503c\u662f\u5426\u5c0f\u4e8e\u6216\u7b49\u4e8e\u53f3\u64cd\u4f5c\u6570\u7684\u503c\uff0c\u5982\u679c\u662f\u5219\u6761\u4ef6\u4e3a\u771f\u3002 (A <= B) \u4e3a\u771f\u3002 5.10.3 \u903b\u8f91\u8fd0\u7b97 \u00b6 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b && \u79f0\u4e3a\u903b\u8f91\u4e0e\u8fd0\u7b97\u7b26\u3002\u5982\u679c\u4e24\u4e2a\u64cd\u4f5c\u6570\u90fd\u975e\u96f6\uff0c\u5219\u6761\u4ef6\u4e3a\u771f\u3002 (A && B) \u4e3a\u5047\u3002 || \u79f0\u4e3a\u903b\u8f91\u6216\u8fd0\u7b97\u7b26\u3002\u5982\u679c\u4e24\u4e2a\u64cd\u4f5c\u6570\u4e2d\u6709\u4efb\u610f\u4e00\u4e2a\u975e\u96f6\uff0c\u5219\u6761\u4ef6\u4e3a\u771f\u3002 (A || B) \u4e3a\u771f\u3002 ! \u79f0\u4e3a\u903b\u8f91\u975e\u8fd0\u7b97\u7b26\u3002\u7528\u6765\u9006\u8f6c\u64cd\u4f5c\u6570\u7684\u903b\u8f91\u72b6\u6001\u3002\u5982\u679c\u6761\u4ef6\u4e3a\u771f\u5219\u903b\u8f91\u975e\u8fd0\u7b97\u7b26\u5c06\u4f7f\u5176\u4e3a\u5047\u3002 !(A && B) \u4e3a\u771f\u3002 5.10.4 \u4f4d\u8fd0\u7b97 \u00b6 \u4ee5\u4e0b\u7684\u8fd0\u7b97\u90fd\u662f\u5c06\u6570\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u5728\u8fdb\u884c\u8fd0\u7b97\uff0c\u7136\u540e\u518d\u8f6c\u5316\u4e3a\u76f8\u5e94\u7684\u8fdb\u5236 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b & \u4e0e\u8fd0\u7b97 \u5168\u4e00\u5219\u4e00\uff0c\u5426\u5219\u4e3a\u96f6 3 & 6 = 2 | \u6216\u8fd0\u7b97 \u6709\u4e00\u5219\u4e00\uff0c\u5426\u5219\u4e3a\u96f6 3 & 6 = 7 ^ \u5f02\u6216\u8fd0\u7b97 \u4e0d\u540c\u4e3a\u4e00\uff0c\u76f8\u540c\u4e3a\u96f6 3 ^ 4 = 7 ~ \u53d6\u53cd\u8fd0\u7b97 \u96f6\u4e00\u98a0\u5012 ~4 = 3 << \u5de6\u79fb\u8fd0\u7b97 \u6548\u679c\u7b49\u4ef7\u5341\u8fdb\u5236\u4e2d\u4e58 \\(2^n\\) 5<<1 = 10 >> \u53f3\u79fb\u8fd0\u7b97 \u6548\u679c\u7b49\u4ef7\u5341\u8fdb\u5236\u4e2d\u9664 \\(2^n\\) 5>>1 = 2 5.10.5 \u5176\u4ed6 \u00b6 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b sizeof() \u8fd4\u56de\u53d8\u91cf\u7684\u5927\u5c0f\u3002 sizeof(a) \u5c06\u8fd4\u56de 4\uff0c\u5176\u4e2d a \u662f\u6574\u6570\u3002 & \u8fd4\u56de\u53d8\u91cf\u7684\u5730\u5740\u3002 &a; \u5c06\u7ed9\u51fa\u53d8\u91cf\u7684\u5b9e\u9645\u5730\u5740\u3002 * \u6307\u5411\u4e00\u4e2a\u53d8\u91cf\u3002 *a; \u5c06\u6307\u5411\u4e00\u4e2a\u53d8\u91cf\u3002 ? : \u6761\u4ef6\u8868\u8fbe\u5f0f \u5982\u679c\u6761\u4ef6\u4e3a\u771f ? \u5219\u503c\u4e3a X : \u5426\u5219\u503c\u4e3a Y 5.10.6 \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u8868\u683c \u00b6 \u7c7b\u522b \u8fd0\u7b97\u7b26 \u7ed3\u5408\u6027 \u540e\u7f00 () [] -> . ++ - - \u4ece\u5de6\u5230\u53f3 \u4e00\u5143 + - ! ~ ++ - - (type)* & sizeof \u4ece\u53f3\u5230\u5de6 \u4e58\u9664 * / % \u4ece\u5de6\u5230\u53f3 \u52a0\u51cf + - \u4ece\u5de6\u5230\u53f3 \u79fb\u4f4d << >> \u4ece\u5de6\u5230\u53f3 \u5173\u7cfb < <= > >= \u4ece\u5de6\u5230\u53f3 \u76f8\u7b49 == != \u4ece\u5de6\u5230\u53f3 \u4f4d\u4e0e AND & \u4ece\u5de6\u5230\u53f3 \u4f4d\u5f02\u6216 XOR ^ \u4ece\u5de6\u5230\u53f3 \u4f4d\u6216 OR | \u4ece\u5de6\u5230\u53f3 \u903b\u8f91\u4e0e AND && \u4ece\u5de6\u5230\u53f3 \u903b\u8f91\u6216 OR || \u4ece\u5de6\u5230\u53f3 \u6761\u4ef6 ?: \u4ece\u53f3\u5230\u5de6 \u8d4b\u503c = += -= *= /= %=>>= <<= &= ^= \\|= \u4ece\u53f3\u5230\u5de6 \u9017\u53f7 , \u4ece\u5de6\u5230\u53f3 5.11 \u6761\u4ef6\u5224\u65ad \u00b6 5.11.1 if\u5224\u65ad \u00b6 C++ #include <stdio.h> int main () { if ( a > 10 ) { // \u8fd9\u91cc\u5c31\u662f\u4e00\u4e2aif\u5224\u65ad printf ( \"YES\" ); } else { printf ( \"NO\" ); } return 0 ; } if\u5224\u65ad\u5f88\u7b80\u5355\uff0c\u903b\u8f91\u503c\u4e3a\u771f\u90a3\u4e48\u5c31\u6267\u884cif\u4e0b\u65b9\u7684\u8bed\u53e5\uff0c\uff08 \u4f46\u662f\u6ce8\u610f\u5982\u679c\u6ca1\u6709\u5927\u62ec\u53f7\u7684\u8bdd\u90a3\u4e48\u53ea\u6267\u884c\u4e0b\u9762\u4e00\u884c\u7684\u5185\u5bb9 \uff09\uff0c\u6211\u4eec\u901a\u8fc7else\u5c31\u53ef\u4ee5\u5904\u7406\u903b\u8f91\u4e3a\u5047\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u8981\u5224\u65ad\u5f88\u591a\u79cd\u60c5\u51b5\u5462\uff0c\u8fd9\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e0b\u7ed3\u6784 C++ if ( xxx ) { } else if ( xxx ) { } else { } \u6ce8\u610f\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u8fd9\u91cc\u6211\u4eec\u80fd\u53d1\u73b0\u591a\u4e86\u4e2a else if \u7684\u5224\u65ad\uff0c\u806a\u660e\u7684\u4f60\u4eec\u5e94\u8be5\u731c\u5230\u4e86\uff0c\u8fd9\u4e2a else if \u5c31\u662f\u4e3a\u4e86\u5728\u5224\u65ad\u7684\u60c5\u51b5\u4e0d\u6b62\u4e24\u79cd\u7684\u65f6\u5019\u4f7f\u7528\u7684\uff0c\u5f53\u7136\u4f60\u53ea\u7528 if \u2026\u2026 else \u7684\u7ed3\u6784\u80fd\u4e0d\u80fd\u5b9e\u73b0\u5462\uff1f\u6309\u7406\u6765\u8bf4\u662f\u80fd\u7684\uff0c\u4e0d\u8fc7\u8fd9\u6837\u7684\u903b\u8f91\u7ed3\u6784\u8bbe\u8ba1\u7684\u5c31\u4f1a\u7a0d\u7a0d\u6709\u4e00\u70b9\u590d\u6742\u6216\u8005\u8bf4\u662f\u7e41\u7410\u3002 5.11.2 \u4e09\u76ee\u8fd0\u7b97\u7b26 \u00b6 C++ action ? ans1 : ans2 ; \u5927\u5bb6\u4e0d\u8981\u89c9\u5f97\u8fd9\u4e2a\u5f88\u96be\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u7b80\u5316\u7684 C++ if ( action ) { ans1 ; } else { ans2 ; } action\u8868\u793a\u7684\u662f\u903b\u8f91\u5224\u65ad\u7684\u503c\uff0cans1\u5c31\u8868\u793a\u5224\u65ad\u4e3a\u771f\u6240\u505a\u7684\u64cd\u4f5c\uff0cans2\u5c31\u8868\u793a\u5224\u65ad\u4e3a\u5047\u6240\u4f5c\u7684\u64cd\u4f5c 5.12 \u5faa\u73af \u00b6 \u5728\u8bb2\u4e0b\u9762\u51e0\u4e2a\u5faa\u73af\u7684\u65b9\u5f0f\u4e4b\u524d\uff0c\u6211\u5148\u6765\u8bf4\u8bf4\u4ec0\u4e48\u662f\u5faa\u73af\uff0c \u5faa\u73af\u5c31\u662f\u591a\u6b21\u6267\u884c\u540c\u4e00\u4e2a\u6d41\u7a0b \uff0c\u4e3a\u4ec0\u4e48\u662f\u6d41\u7a0b\u5462\uff0c\u56e0\u4e3a\u53ef\u80fd\u6bcf\u6b21\u64cd\u4f5c\u5f97\u5230\u7684\u503c\u4e0d\u4e00\u6837\uff0c\u6216\u8005\u8bf4\u91cc\u9762\u6709\u4e00\u4e9b\u5d4c\u5957\u5224\u65ad\u4ec0\u4e48\u7684\uff0c\u6700\u7ec8\u6bcf\u6b21\u7684\u64cd\u4f5c\u53ef\u80fd\u4e0d\u592a\u4e00\u6837\uff0c\u6bd4\u5982\u8bf4\u6211\u6709\u4e00\u4e2a\u5faa\u73af\uff0c\u6211\u5916\u9762\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u91cf\u4ed6\u7684\u521d\u59cb\u503c\u662f1\uff0c\u6211\u5728\u5faa\u73af\u91cc\u9762\u505a\u4e00\u4ef6\u4e8b\u60c5\u5982\u679c\u8fd9\u4e2a\u6570\u662f\u5947\u6570\u90a3\u4e48\u6211\u5c31\u8ba9\u5b83\u52a0\u4e00\uff0c\u5426\u5219\uff0c\u8ba9\u5b83\u4e0d\u53d8\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u5faa\u73af\u56db\u6b21\uff0c\u6700\u7ec8\u8fd9\u4e2a\u53d8\u91cf\u7684\u7ed3\u679c\u5c31\u662f2\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u770b\u770b\u8fd9\u4e2a\u4ee3\u7801\u7684for\u683c\u5f0f C++ #include <stdio.h> int main () { int a = 1 ; for ( int i = 0 ; i < 4 ; ++ i ) { if ( a % 2 == 1 ) a ++ ; else a = a ; //\u6ce8\u610f\u8fd9\u91cc\u7684else\u5176\u5b9e\u662f\u53ef\u4ee5\u5220\u6389\u7684 } printf ( \"%d \\n \" , a ); return 0 ; } 5.12.1 for\u5faa\u73af \u00b6 for\u5faa\u73af\u7531\u56db\u90e8\u5206\u7ec4\u6210\uff0c \u521d\u59cb\u5316 \uff0c \u6761\u4ef6\u5224\u65ad \uff0c \u8fed\u4ee3\u66f4\u65b0 \uff0c \u903b\u8f91\u64cd\u4f5c\u8bed\u53e5 \u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0bfor\u7684\u7ed3\u6784 C++ for ( \u521d\u59cb\u5316\u8bed\u53e5 ; \u6761\u4ef6\u5224\u65ad ; \u8fed\u4ee3\u66f4\u65b0 ) { \u903b\u8f91\u64cd\u4f5c\u8bed\u53e5 } //eg\uff1a for ( int i = 0 ; i < 10 ; ++ i ) { //pass } \u6ce8\u610f\u8fd9\u91cc\u7684\u521d\u59cb\u5316\u3001\u8fed\u4ee3\u66f4\u65b0\u3001\u903b\u8f91\u64cd\u4f5c\u90fd\u53ef\u4ee5\u7701\u7565\uff0c\u76f4\u63a5\u4e0d\u5199\u5373\u53ef\uff0c\u4f46\u662f\u6761\u4ef6\u5224\u65ad\u4e00\u5b9a\u8981\u5199\u4e0a\uff0c\u5e76\u4e14\u4e24\u4e2a ; \u4e0d\u80fd\u7701\u7565 5.12.2 while\u5faa\u73af \u00b6 while\u5faa\u73af\u770b\u8d77\u6765\u5c31\u8981\u7b80\u5355\u4e00\u70b9(\u7ed3\u6784\u4e0a)\uff0c\u53ea\u6709**\u6761\u4ef6\u5224\u65ad**\u548c**\u903b\u8f91\u64cd\u4f5c** \u6211\u4eec\u6765\u770bwhile\u7684\u7ed3\u6784 C++ while ( \u6761\u4ef6\u5224\u65ad ) { \u903b\u8f91\u64cd\u4f5c\u8bed\u53e5 } //eg\uff1a int i = 0 ; while ( ++ i < 10 ) { //pass } \u5f53\u6761\u4ef6\u4e0d\u6ee1\u8db3\u7684\u65f6\u5019\u5c31\u4f1a\u8df3\u51fa\u5faa\u73af\uff0c\u4e5f\u5c31\u662f\u6761\u4ef6\u5224\u65ad\u4e3a\u771f\u5c31\u7ee7\u7eed\u5faa\u73af\uff0c\u6761\u4ef6\u5224\u65ad\u4e3a\u5047\u5c31\u8df3\u51fa\u5faa\u73af 5.12.3 do\u2026\u2026while\u5faa\u73af \u00b6 do\u2026\u2026while \u5728\u7ed3\u6784\u4e0a\u4e5f\u53ea\u6709**\u6761\u4ef6\u5224\u65ad**\u548c**\u903b\u8f91\u64cd\u4f5c** \u6211\u4eec\u6765\u770b do\u2026\u2026while \u7ed3\u6784 C++ do { \u903b\u8f91\u64cd\u4f5c\u8bed\u53e5 } while ( \u6761\u4ef6\u5224\u65ad ) do\u2026\u2026while \u548c while \u7684\u533a\u522b\u5c31\u5728\u4e8e while \u7b2c\u4e00\u6b21\u5224\u65ad\u5982\u679c\u4e0d\u6ee1\u8db3\u90a3\u4e48\u5c31\u4e0d\u8fdb\u5165\u5faa\u73af\uff0c\u800c** do\u2026\u2026while \u4f1a\u5148\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c**\uff0c\u7136\u540e\u518d\u5224\u65ad\u662f\u5426\u7ee7\u7eed\u5faa\u73af \u4e3e\u4e2a\u6817\u5b50\uff1a \u5f53\u4f60\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u7684\u65f6\u5019\uff0c\u4ec0\u4e48\u65f6\u5019\u624d\u7b97\u8bfb\u5b8c\u4e86\u5462\uff1f\u4e00\u822c\u7684\u8bdd\u6587\u4ef6\u4f1a\u6709\u4e00\u4e2a\u7ed3\u675f\u7b26\uff08EOF\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u4f7f\u7528 do\u2026\u2026while \u7ed3\u6784\uff0c\u5148\u8bfb\uff0c\u8bfb\u5b8c\u540e\u5224\u65ad\u662f\u5426\u662f\u6587\u4ef6\u7ed3\u675f\u7b26\uff0c\u5982\u679c\u4e0d\u662f\u7684\u8bdd\u90a3\u4e48\u5c31\u7ee7\u7eed\u5faa\u73af\u3002 5.12.4 \u5faa\u73af\u63a7\u5236 \u00b6 \u5d4c\u5957\u5faa\u73af \u6211\u4eec\u4e0a\u9762\u7684\u5faa\u73af\u90fd\u53ea\u662f\u4e00\u5c42\u5faa\u73af\uff0c\u5047\u5982\u4e00\u5c42\u5faa\u73af\u662f\u904d\u5386\u4e00\u884c\u6570\u636e\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u60f3\u904d\u5386\u4e00\u4e2a \\(n\\times n\\) \u7684\u77e9\u9635\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5c42\u5faa\u73af\u6765\u5b9e\u73b0\uff0c\u4f8b\u5982 C++ #include <stdio.h> int main () { int n ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 0 ; j < n ; ++ i ) { //op } } return 0 ; } \u8fd9\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4e8c\u5c42\u5faa\u73af \u6b7b\u5faa\u73af \u5f53\u6211\u4eec\u7684\u6761\u4ef6\u5224\u65ad\u8bbe\u8ba1\u4e0d\u5408\u7406\u6216\u8005\u8bf4\u5728for\u5faa\u73af\u4e2d\u6ca1\u6709\u8bbe\u7f6e\u5224\u65ad\u6761\u4ef6\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u6b7b\u5faa\u73af\uff0c\u6709\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u6b7b\u5faa\u73af\uff0c\u6709\u7684\u65f6\u5019\u6211\u4eec\u4e0d\u9700\u8981\uff0c\u6240\u4ee5\u662f\u5426\u9700\u8981\u8981\u6839\u636e\u4f60\u7684\u9700\u6c42\u6765\u770b\uff0c\u4e3e\u4e2a\u7b80\u5355\u7684\u6817\u5b50\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u5c31\u53ef\u4ee5\u7b80\u5355\u7684\u770b\u6210\u4e00\u4e2a\u6b7b\u5faa\u73af\uff0c\u4f46\u662f\u5728**\u5927\u90e8\u5206\u60c5\u51b5\u4e0b**\u6211\u4eec\u5e94\u8be5\u662f\u8981**\u907f\u514d\u51fa\u73b0\u6b7b\u5faa\u73af**\u7684\uff0c\u51fa\u73b0\u4e86\u6b7b\u5faa\u73af\u4e00\u5b9a\u8981\u597d\u597d\u68c0\u67e5\u5faa\u73af\u5904\u7684\u4ee3\u7801 break \u548c continue \u4e24\u8005\u90fd\u662f\u8df3\u8fc7\u5faa\u73af\uff0c\u4f46\u662f break \u662f\u8df3\u8fc7\u6574\u4e2a\u5269\u4e0b\u7684\u5faa\u73af\uff0c\u800c continue \u53ea\u662f\u8df3\u8fc7\u5f53\u524d\u8fd9\u6b21\u5faa\u73af\uff0c\u4e5f\u5c31\u662f\u8bf4\u540e\u9762\u5982\u679c\u8fd8\u6709\u5faa\u73af\u64cd\u4f5c\uff0c\u90a3\u4e48\u5c31\u7ee7\u7eed\u6267\u884c goto goto \u8bed\u53e5\u5728\u5f88\u591a\u8bfe\u7a0b\u6216\u8005\u662f\u4e00\u4e9b\u5b66\u4e60\u7684\u8d44\u6599\u91cc\u9762\u90fd\u5f88\u5c11\uff0c\u5f88\u591a\u7a0b\u5e8f\u5458\u4e5f\u89c9\u5f97\u8fd9\u4e2a\u662f\u4e2a\u8fa3\u9e21\u73a9\u610f\uff0c\u4f46\u662f\u6211\u89c9\u5f97 goto \u53ea\u8981\u7528\u5bf9\u4e86\u5730\u65b9\uff0c\u90a3\u4e48\u5c31\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u5de5\u5177\uff0c\u4f7f\u7528 goto \u7684\u65f6\u5019\u8bf7\u52a1\u5fc5\u4e0d\u8981\u5411\u4e0a\u8df3\uff0c\u5982\u679c\u4f60\u628a\u63e1\u4e0d\u4f4f\u7684\u8bdd\u90a3\u4e48\u4f60\u5c31\u4e0d\u8981\u4f7f\u7528\u8fd9\u4e2a\u8bed\u53e5\uff0c\u5728\u6211\u770b\u6765 goto \u4e00\u822c\u4f7f\u7528\u5728\u591a\u91cd\u5faa\u73af\u91cc\u9762\u60f3\u76f4\u63a5\u8df3\u51fa\u591a\u91cd\u5faa\u73af\uff0c\u800c\u4e0d\u662f\u5199\u591a\u4e2abreak\u3002 eg: C++ #include <stdio.h> int main () { for ( int i = 0 ; i < 10 ; ++ i ) { for ( int j = 0 ; j < 10 ; ++ j ) { for ( int k = 0 ; k < 10 ; ++ k ) { if ( i + j + k == 12 ) { goto out ; //\u6211\u4eec\u627e\u5230\u6211\u4eec\u60f3\u8981\u7684\u7b2c\u4e00\u4e2a\u7b54\u6848\u5c31\u76f4\u63a5goto\u8df3\u51fa\u4e09\u5c42\u5faa\u73af\uff0c\u8fd9\u4e2aout\u53ea\u662f\u4e00\u4e2a\u4ee3\u540d\u8bcd\uff0c\u968f\u610f\u66f4\u6539\uff0c\u4e0d\u8fc7\u8981\u548c\u4e0b\u9762\u5bf9\u5e94\u4e0a } } } } out : //\u8df3\u51fa\u7684\u5730\u65b9 printf ( \"YES\" ); return 0 ; } \u5173\u4e8e\u5faa\u73af\u6211\u4eec\u5c31\u8bb2\u5230\u8fd9\u91cc 5.13 \u6570\u7ec4 \u00b6 \u6570\u7ec4\u5c31\u662f\u5b58\u50a8\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u76f8\u540c\u7c7b\u578b\u5143\u7d20\u7684\u987a\u5e8f\u96c6\u5408\uff0c\u6ce8\u610f\u8fd9\u4e2a\u96c6\u5408\u91cc\u9762\u7684\u5143\u7d20\u7684\u7c7b\u578b\u90fd\u662f\u4e00\u6837\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7**\u6570\u7ec4\u540d+\u4e0b\u6807**\u7684\u65b9\u5f0f\u6765\u8bbf\u95ee\u6211\u4eec\u5b58\u50a8\u7684\u6570\u636e \u6570\u5b57\u7684\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u8ba1\u6570\u5230n-1\u7ed3\u675f\u7684 \u6570\u7ec4\u7684\u5143\u7d20\u90fd\u662f\u76f8\u7b49\u7684\u7c7b\u578b \u6570\u7ec4\u53ef\u4ee5\u4e0d\u6b62\u4e00\u7ef4 \u6570\u7ec4\u7684\u957f\u5ea6\u662f\u56fa\u5b9a\u7684 5.13.1 \u58f0\u660e \u00b6 \u6570\u636e\u7c7b\u578b + \u6570\u7ec4\u540d + \u6570\u7ec4\u5927\u5c0f eg: C++ int a [ 10 ]; \u8fd9\u91cc\u6211\u4eec\u5c31\u58f0\u660e\u4e86\u4e00\u4e2a10\u4e2aint\u6570\u636e\u5927\u5c0f\u7684\u6570\u7ec4\uff0c\u5047\u8bbe\u4e00\u4e2a int \u53604\u4e2a\u5b57\u8282\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7ec4\u5c31\u8981\u536040\u4e2a\u5b57\u8282\uff0c\u5176\u4ed6\u7c7b\u578b\u6bd4\u5982 char \u3001 double \u6216\u8005\u662f\u7ed3\u6784\u4f53\u7c7b\u578b\u90fd\u53ef\u4ee5\u8fd9\u6837\u58f0\u660e 5.13.2 \u521d\u59cb\u5316 \u00b6 \u6211\u4eec\u53ef\u4ee5\u5728\u58f0\u660e\u7684\u65f6\u5019\u5c31\u521d\u59cb\u5316 eg: C++ int a [ 3 ] = { 0 , 1 , 2 }; int b [ 3 ] = { 0 }; \u8fd9\u91cc\u6211\u4eec\u5c31\u5c06a\u6570\u7ec4\u7684\u4e09\u4e2a\u4f4d\u7f6e\u521d\u59cb\u5316\u4e3a0\u30011\u30012\u4e86\uff0cb\u6570\u7ec4\u8fd9\u6837\u505a\u53ef\u4ee5\u5168\u90e8\u521d\u59cb\u5316\u4e3a0\uff0c\u5f53\u7136\u4f60\u5982\u679c\u662f\u5b9a\u4e49\u4e86\u7684\u662f\u5168\u5c40\u6570\u7ec4\u90a3\u4e48\u5b83\u4f1a\u81ea\u52a8\u7ed9\u4f60\u521d\u59cb\u5316\u4e3a0\uff0c\u4f46\u662f\u5c40\u90e8\u7684\u8bdd\uff0c\u4f60\u4e0d\u521d\u59cb\u5316\u90a3\u4e48\u5c31\u53ef\u80fd\u4f1a\u7ed9\u4f60\u4e00\u4e9b\u968f\u673a\u503c\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u58f0\u660e\u540e\u521d\u59cb\u5316 \u2460memset()\u51fd\u6570\u521d\u59cb\u5316 \u6211\u4eec\u5148\u6765\u770b\u770b\u8fd9\u4e2a\u51fd\u6570\u7684\u58f0\u660e\uff1a C++ void * memset ( void * str , int c , size_t n ) \u7b2c\u4e00\u4e2a\u4f20\u7684\u53c2\u6570\u662f\u4e00\u4e2a void \u7c7b\u578b\u6307\u9488\uff0c\u4e5f\u5c31\u662f\u4efb\u4f55\u6570\u636e\u7c7b\u578b\u90fd\u53ef\u4ee5\uff0c\u7b2c\u4e8c\u4e2a\u662f int \u7c7b\u578b\u7684\uff0c\u4e5f\u5c31\u662f\u521d\u59cb\u5316\u7684\u503c\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u8981\u521d\u59cb\u5316\u7684\u5b57\u8282\u6570\uff0c\u6211\u4e3e\u4e2a\u6817\u5b50 eg: C++ #include <stdio.h> #include <string.h> int a [ 10 ]; int main () { memset ( a , -1 , sizeof a ); printf ( \"%d \\n \" , a [ 0 ]); printf ( \"%d \\n \" , -1 ); return 0 ; } \u2461\u5faa\u73af\u521d\u59cb\u5316 \u8fd8\u8bb0\u5f97\u6211\u4eec\u4e0a\u9762\u8bb2\u7684\u5faa\u73af\u5417\uff0c\u8fd9\u91cc\u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5faa\u73af\u6765\u4e00\u4e2a\u4e00\u4e2a\u904d\u5386\u8fd9\u4e2a\u6570\u7ec4\uff0c\u7136\u540e\u624b\u52a8\u7ed9\u5b83\u8d4b\u503c eg: C++ #include <stdio.h> #include <string.h> int a [ 10 ]; int main () { for ( int i = 0 ; i < 10 ; ++ i ) { a [ i ] = i ; } return 0 ; } \u8fd9\u91cc\u6211\u4eec\u7528\u5faa\u73af\u5c06a\u6570\u7ec4\u7684\u503c\u521d\u59cb\u5316\u4e86\uff0c\u5f53\u7136\u4f60\u60f3\u600e\u4e48\u521d\u59cb\u5316\u90fd\u968f\u4f60 5.14 \u51fd\u6570 \u00b6 5.14.1 \u4f5c\u7528\u57df \u00b6 \u5728\u8bb2\u89e3\u51fd\u6570\u4e4b\u524d\u6211\u5148\u8bf4\u4e00\u4e0b**\u4f5c\u7528\u57df**\uff0c\u8fd9\u6837\u80fd\u66f4\u597d\u5730\u7406\u89e3\u7a0b\u5e8f\uff1f\uff08\u5b58\u7591\uff09 \u4e4b\u524d\u6211\u4eec\u8bb2\u5230\u8fc7\u5b9a\u4e49\u53d8\u91cf\uff0c\u6211\u4eec\u4e00\u822c\u662f\u5199\u5728 main \u7684\u5927\u62ec\u53f7\u91cc\u9762\u7684\uff0c\u90a3\u4f60\u6709\u6ca1\u6709\u60f3\u8fc7\u8fd9\u4e9b\u53d8\u91cf\u4ec0\u4e48\u65f6\u5019\u5c31\u6ca1\u7528\u4e86\u5462\uff1f\u7b54\u6848\u662f\u5f53 main \u51fd\u6570\u8fd0\u884c\u5b8c\u6210\u540e\u5c31\u4f1a\u5931\u6548\uff0c\u4e00\u822c\u6765\u8bf4\u4f53\u4f1a\u4e0d\u662f\u5f88\u660e\u663e\uff0c\u56e0\u4e3a\u6211\u4eec\u5c31\u53ea\u662f\u4f7f\u7528 main \u51fd\u6570\uff0c\u7a0b\u5e8f\u4e5f\u5c31\u8fd0\u884c\u8fd9\u4e2a(\u660e\u9762\u4e0a\u7684)\uff0c\u4e0b\u9762\u662f\u5224\u65ad\u4f5c\u7528\u57df\u7684\u4e00\u4e2a\u5c0ftrick \u5728\u4e00\u4e2a\u5927\u62ec\u53f7\u91cc\u9762\u5b9a\u4e49\u7684\u53d8\u91cf\u7b49\u4e1c\u897f\u5c31\u5c5e\u4e8e\u8fd9\u6837\u4e00\u4e2a\u4f5c\u7528\u57df\uff0c\u8d85\u51fa\u8fd9\u4e2a\u5927\u62ec\u53f7\u53d8\u91cf\u7b49\u96f6\u65f6\u7684\u4e1c\u897f\u81ea\u52a8\u9500\u6bc1(\u4f46\u662f\u4f60\u7533\u8bf7\u7684\u7a7a\u95f4\u4e0d\u4f1a\u9500\u6bc1\u6216\u8005\u8bf4static\u7c7b\u578b\u7684\u4e0d\u4f1a\u9500\u6bc1) \u5927\u62ec\u53f7\u53ef\u4ee5\u5d4c\u5957\uff0c\u4e5f\u5c31\u662f\u4f5c\u7528\u57df\u6709\u5f88\u591a\u5c42\uff0c\u6ce8\u610f\u6b64\u65f6\u9ad8\u4e00\u7ea7\u7684\u4f5c\u7528\u57df\u7684\u53d8\u91cf\u80fd\u5728\u4f4e\u7ea7\u7684\u4f5c\u7528\u57df\u4e2d\u4f7f\u7528\uff0c\u4f46\u662f\u5982\u679c\u4f4e\u4f5c\u7528\u57df\u6709\u4e00\u4e2a\u548c\u9ad8\u7ea7\u7684\u4f5c\u7528\u57df\u76f8\u540c\u7684\u53d8\u91cf\u540d\u90a3\u4e48\u4f60\u5728\u4f4e\u4f5c\u7528\u57df\u4f7f\u7528\u8be5\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u4f7f\u7528\u7684\u662f\u5f53\u524d\u4f4e\u4f5c\u7528\u57df\u7684\u53d8\u91cf\u7684\u503c\uff0c\u8fd9\u4e5f\u5c31\u662f**\u53d8\u91cf\u9690\u85cf** \u4e0d\u653e\u5728\u5927\u62ec\u53f7\u91cc\u9762\u7684\u53d8\u91cf\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u5168\u5c40\u53d8\u91cf\u4e00\u822c\u653e\u5728\u7a0b\u5e8f\u7684\u9876\u90e8\uff0c\u8868\u793a\u7684\u662f\u8fd9\u4e2a\u53d8\u91cf\u8d2f\u7a7f\u6574\u4e2a\u7a0b\u5e8f\uff0c\u4e0d\u4f1a\u6d88\u4ea1\uff0c\u4f46\u662f\u6ce8\u610f\u5168\u5c40\u53d8\u91cf\u662f\u4f4d\u4e8e**\u5806\u533a**\u7684 5.14.2 \u51fd\u6570\u662f\u4ec0\u4e48 \u00b6 \u51fd\u6570\u662f\u5b8c\u6210\u7a0b\u5e8f\u4e2d\u4e00\u90e8\u5206\u5c0f\u529f\u80fd\u7684\u4e00\u4e2a\u5b50\u7a0b\u5e8f\uff1f\uff0c\u6216\u8005\u8bf4\u662f\u5c06\u4e00\u6bb5\u5b8c\u6210\u4e00\u4e2a\u4efb\u52a1\u7684\u8bed\u53e5\u7684\u4e00\u4e2a\u6574\u5408\u3002 5.14.3 \u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u51fd\u6570\uff1f \u00b6 \u4f7f\u7528\u51fd\u6570\u53ef\u4ee5\u7701\u53bb\u591a\u6b21\u7f16\u5199\u91cd\u590d\u4ee3\u7801\uff0c\u53ef\u4ee5\u51cf\u5c11\u4ee3\u7801\u7684\u7801\u91cf \u63d0\u9ad8\u7a0b\u5e8f\u7684\u53ef\u8bfb\u6027\uff0c\u65b9\u4fbf\u540e\u7eed\u7684\u7ef4\u62a4\u5347\u7ea7 5.14.4 \u51fd\u6570\u7ed3\u6784 \u00b6 C++ ( modified_type ) return_type function_name ( parameter list ) { //function action } \u6211\u4eec\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\u4e00\u6b65\u4e00\u6b65\u89e3\u6790\u8fd9\u4e2a\u7ed3\u6784 modified_type \u8fd9\u4e2a\u8868\u793a\u7684\u662f\u4fee\u9970\u8fd9\u4e2a\u51fd\u6570\u7684\u4fee\u9970\u8bcd\uff0c\u901a\u5e38\u7684\u4fee\u9970\u8bcd\u6709\uff1a \u2460 static \u2461 extern \u2462 inline \u2026\u2026 \u8fd9\u4e2a\u9009\u9879\u662f\u53ef\u6709\u53ef\u65e0\u7684\uff0cstatic\u4fee\u9970\u7684\u51fd\u6570\u8868\u793a\u7684\u662f**\u53ea\u5728\u672c\u6587\u4ef6\u8bbf\u95ee**\uff0c\u88ab\u5176\u4fee\u9970\u7684\u51fd\u6570\u4e5f\u6210\u4e3a\u5185\u90e8\u51fd\u6570\uff0cextern\u4fee\u9970\u7684\u51fd\u6570\u53ef\u4ee5\u5728\u522b\u7684\u6587\u4ef6\u4e2d\u8c03\u7528\uff0c\u88ab\u5176\u58f0\u660e\u7684\u51fd\u6570\u4e5f\u6210\u4e3a\u5916\u90e8\u51fd\u6570\uff0c\u81f3\u4e8e\u540e\u9762\u7684\u90a3\u4e2ainline\u5219\u8868\u793a\u662f\u5185\u655b\u51fd\u6570\uff0c\u5185\u8054\u6269\u5c55\u662f\u7528\u6765**\u6d88\u9664\u51fd\u6570\u8c03\u7528**\u65f6\u7684\u65f6\u95f4\u5f00\u9500\u3002\u5b83\u901a\u5e38\u7528\u4e8e\u9891\u7e41\u6267\u884c\u7684\u51fd\u6570\uff0c\u5bf9\u4e8e\u5c0f\u5185\u5b58\u7a7a\u95f4\u7684\u51fd\u6570\u975e\u5e38\u53d7\u76ca\u3002\u4f46\u662f\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9 1.\u9012\u5f52\u51fd\u6570\u4e0d\u80fd\u5b9a\u4e49\u4e3a\u5185\u8054\u51fd\u6570 2.\u5185\u8054\u51fd\u6570\u4e00\u822c\u9002\u5408\u4e8e\u4e0d\u5b58\u5728while\u548cswitch\u7b49\u590d\u6742\u7684\u7ed3\u6784\u4e14\u53ea\u67091~5\u6761\u8bed\u53e5\u7684\u5c0f\u51fd\u6570\u4e0a\uff0c\u5426\u5219\u7f16\u8bd1\u7cfb\u7edf\u5c06\u8be5\u51fd\u6570\u89c6\u4e3a\u666e\u901a\u51fd\u6570\u3002 3.\u5185\u8054\u51fd\u6570\u53ea\u80fd\u5148\u5b9a\u4e49\u540e\u4f7f\u7528\uff0c\u5426\u5219\u7f16\u8bd1\u7cfb\u7edf\u4e5f\u4f1a\u628a\u5b83\u8ba4\u4e3a\u662f\u666e\u901a\u51fd\u6570\u3002 4.\u5bf9\u5185\u8054\u51fd\u6570\u4e0d\u80fd\u8fdb\u884c\u5f02\u5e38\u7684\u63a5\u53e3\u58f0\u660e\u3002 \u81f3\u4e8e\u5176\u4ed6\u7684\u672c\u6587\u4e0d\u505a\u8fc7\u591a\u7684\u5c55\u5f00\uff0c\u8bf7\u8bf8\u4f4d\u81ea\u884c\u67e5\u627e\u8d44\u6599 5.14.5 \u51fd\u6570\u58f0\u660e \u00b6 \u51fd\u6570\u7684\u58f0\u660e\u4e0d\u9700\u8981\u6211\u4eec\u5b9e\u73b0\u51fd\u6570\u7684\u5177\u4f53\u8bed\u53e5\u5417\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5199\u597d\u51fd\u6570\u7ed3\u6784\u7684\u7b2c\u4e00\u884c\u5373\u53ef\uff0c\u4e3e\u4e2a\u6817\u5b50 C++ int function ( int a , int b ); int function ( int , int ); \u6ce8\u610f\uff0c\u4e0a\u9762\u7684\u4e24\u79cd\u58f0\u660e\u662f\u7b49\u4ef7\u7684\uff0c\u6211\u4eec\u5728\u58f0\u660e\u7684\u65f6\u5019\u5176\u5b9e\u6ca1\u5fc5\u8981\u7ed9\u51fa\u5f62\u53c2\u7684\u540d\u5b57\uff0c\u6211\u4eec\u53ea\u9700\u8981\u660e\u786e\u7ed9\u51fa\u6570\u636e\u7c7b\u578b\u4ee5\u53ca\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u5373\u53ef 5.14.6 \u51fd\u6570\u5b9a\u4e49 \u00b6 \u5bf9\u4e8e\u51fd\u6570\u7684\u5b9a\u4e49\u7684\u8bdd\uff0c\u5c31\u9700\u8981\u6211\u4eec\u5b8c\u5b8c\u6574\u6574\u7684\u5199\u5b8c\u51fd\u6570\u4e86\uff0c\u6211\u4e3e\u4e2a\u6817\u5b50 C++ int function ( int a , int b ) { int c = a + b ; return c ; } \u4e0a\u9762\u7684\u8fd9\u4e2a\u6817\u5b50\u5c31\u662f\u5b9e\u73b0\u4e86\u4e00\u4e2a\u52a0\u6cd5\u51fd\u6570\uff0c\u6211\u4eec\u6765\u770b\u8fd4\u56de\u7c7b\u578b\u662fint\uff0c\u6211\u4eec\u4f20\u5165\u4e86\u4e24\u4e2a\u53c2\u6570a\u548cb\uff0c\u6ce8\u610f\u6b64\u65f6\u7684\u5706\u62ec\u53f7\u540e\u9762\u6ca1\u6709\u5206\u53f7\uff0c\u51fd\u6570\u91cc\u9762\u5219\u662f\u6211\u4eec\u7684\u903b\u8f91\u8bed\u53e5\uff0c\u8fd9\u91cc\u7684\u8bdd\u5c31\u662f\u5c06\u4f20\u5165\u7684\u4e24\u4e2a\u53c2\u6570\u76f8\u52a0\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2aint\u7c7b\u578b\u7684\u503c\u3002\u51fd\u6570\u5176\u5b9e\u5c31\u662f**\u901a\u8fc7\u4f20\u5165\u7684\u4e00\u4e9b\u53c2\u6570\u6216\u8005\u4e0d\u7528\u53c2\u6570\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u903b\u8f91\u64cd\u4f5c\u5b9e\u73b0\u67d0\u79cd\u7279\u5b9a\u4efb\u52a1\uff0c\u8fd9\u79cd\u4efb\u52a1\u7684\u7ed3\u679c\u6211\u4eec\u53ef\u4ee5\u7ed9\u4e00\u4e2a\u8fd4\u56de\u503c\u90a3\u4e48\u5c31\u9700\u8981\u6ce8\u610f\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u5982\u679c\u4e0d\u9700\u8981\u8fd4\u56de\u503c\uff0c\u90a3\u4e48\u5c31\u5b9a\u4e49\u4e3avoid\u7c7b\u578b\u7684\u5373\u53ef** 5.15 \u6307\u9488 \u00b6 \u5176\u5b9e\u6307\u9488\u624d\u662fC/C++\u7684\u6838\u5fc3\u5185\u5bb9\uff0c\u672c\u6765\u662f\u60f3\u653e\u5728\u6570\u7ec4\u540e\u9762\u63a5\u7740\u8bb2\uff0c\u4f46\u662f\u6015\u8bfb\u8005\u5c06\u4e24\u8005\u6df7\u6dc6\u4e86\uff0c\u6216\u8005\u8bf4\u4e0d\u80fd\u66f4\u597d\u7684\u7406\u89e3\u6307\u9488\uff0c\u6240\u4ee5\u6211\u653e\u5728\u4e86\u51fd\u6570\u7684\u540e\u9762\u3002 5.15.1 \u4ec0\u4e48\u662f\u6307\u9488\uff1f \u00b6 \u7b80\u5355\u70b9\u8bf4\u6307\u9488\u5176\u5b9e\u5c31\u662f**\u5b58\u50a8\u5730\u5740**\u7684\u53d8\u91cfor\u5e38\u91cf 5.15.2 \u6307\u9488\u7684\u5f62\u5f0f \u00b6 C \u6570\u636e\u7c7b\u578b * \u6307\u9488\u540d //\u4f8b\u5982 int * a ; //\u6307\u9488\u7c7b\u578b\u4e3aint * \u6307\u9488\u6307\u5411\u7684\u7c7b\u578b\u662fint char * b ; //\u6307\u9488\u7c7b\u578b\u4e3achar * \u6307\u9488\u6307\u5411\u7684\u7c7b\u578b\u662fchar float * c ; //\u6307\u9488\u7c7b\u578b\u4e3afloat * \u6307\u9488\u6307\u5411\u7684\u7c7b\u578b\u662ffloat \u6ce8\u610f\u7684\u662f**\u6307\u9488\u7c7b\u578b**\u548c**\u6307\u9488\u6307\u5411\u7684\u7c7b\u578b**\u662f\u4e0d\u540c\u7684 5.15.3 \u6307\u9488\u7684\u4e00\u4e9b\u4fe1\u606f \u00b6 \u572832\u4f4d\u7cfb\u7edf\u4e0b\u4e00\u4e2a\u6307\u9488\u7684\u7684\u5927\u5c0f\u5c31\u662f4\u4e2a\u5b57\u8282\uff0c64\u4f4d\u7cfb\u7edf\u4e0b\u5c31\u662f8\u5b57\u8282\uff0c\u540c\u5b66\u4eec\u53ef\u4ee5\u53bb\u7528 sizeof \u9a8c\u8bc1\u4e00\u4e0b \u8ba1\u7b97\u673a\u51e0\u4e4e\u6240\u6709\u7684\u4e1c\u897f\u90fd\u6709\u4e00\u4e2a\u5185\u5b58\u5730\u5740\u8fd9\u6837\u4e00\u4e2a\u201c\u552f\u4e00\u6807\u8bc6\u7b26\u201d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5730\u5740\u8bbf\u95ee\u5230\u8be5\u5730\u5740\u4e0a\u7684\u503c\uff0c\u6216\u8005\u662f\u4fee\u6539 \u4e0d\u662f\u6240\u6709\u7684\u5730\u5740\u6211\u4eec\u90fd\u80fd\u8bbf\u95ee\uff0c\u6240\u4ee5\u5728\u4f7f\u7528\u6307\u9488\u7684\u65f6\u5019\u5c3d\u91cf\u4e0d\u8981\u8bbf\u95ee\u5230\u4e0d\u8be5\u8bbf\u95ee\u7684\u5730\u65b9(\u6bd4\u5982\u5185\u6838\u533a\u7b49) \u201c\u91ce\u201d\u6307\u9488\u662f\u5f88\u53ef\u6015\u7684\uff0c\u6240\u4ee5\u5728\u4f7f\u7528\u6307\u9488\u7684\u65f6\u5019\u8bf7\u52a1\u5fc5\u521d\u59cb\u5316\u3002 \u6307\u9488\u4e5f\u6709\u7b97\u6570\u8fd0\u7b97 \u6307\u9488\u548c\u6570\u7ec4\u662f\u4e00\u4e2a\u4e1c\u897f\u5417\uff1f\u663e\u7136\u4e0d\u662f 5.15.4 \u5728\u51fd\u6570\u7684\u5f62\u53c2\u4f7f\u7528\u6307\u9488 \u00b6 \u6211\u5148\u4e3e\u4e2a\u4f8b\u5b50\uff1a C++ #include <stdio.h> void MySwap ( int a , int b ) { int temp = b ; b = a ; a = temp ; printf ( \"%d %d \\n \" , a , b ); } int main () { int a = 0 , b = 10 ; printf ( \"%d %d \\n \" , a , b ); MySwap ( a , b ); printf ( \"%d %d \\n \" , a , b ); return 0 ; } \u4f60\u89c9\u5f97\u8fd9\u4e2a\u4f1a\u8f93\u51fa\u4ec0\u4e48\u5462\uff1f\u6ca1\u9519\uff0c\u8f93\u51fa\u7684\u662f\uff1a Text Only 0 10 0 10 \u8fd9\u65f6\u5019\u6709\u7684\u540c\u5b66\u53ef\u80fd\u8bb0\u5f97\u4e4b\u524d\u8bb2\u8fc7\u7684\u4f5c\u7528\u57df\u7684\u4e1c\u897f\uff0c\u4e00\u53e3\u5c31\u8bf4\u51fa\u4e86\u7b54\u6848 \u90a3\u4e48\u60f3\u8981\u5b9e\u73b0\u8fd9\u4e2a\u4ea4\u6362\u51fd\u6570\u53ef\u4ee5\u600e\u4e48\u505a\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u5c06main\u51fd\u6570\u91cc\u9762\u5b9a\u4e49\u7684a\u548cb\u7684\u5730\u5740\u4f20\u7ed9\u4ea4\u6362\u51fd\u6570\uff0c\u7136\u540e\u6211\u4eec\u64cd\u4f5c\u5730\u5740\u4e0a\u9762\u7684\u503c\uff0c\u8fd9\u65f6\u5019\u4ea4\u6362\u5c31\u80fd\u5b9e\u73b0\u4e86 C++ #include <stdio.h> void MySwap ( int * a , int * b ) { int temp = * b ; * b = * a ; * a = temp ; } int main () { int a = 0 , b = 10 ; printf ( \"%d %d \\n \" , a , b ); MySwap ( & a , & b ); printf ( \"%d %d \\n \" , a , b ); return 0 ; } /* \u8f93\u51fa\u7ed3\u679c\uff1a 0 10 10 0 */ \u8fd9\u5c31\u662f\u6307\u9488\u7684\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u6848\u4f8b 5.15.5 \u6307\u9488\u7684\u7b97\u672f\u8fd0\u7b97 \u00b6 \u6307\u9488\u53ef\u4ee5\u901a\u8fc7\u6307\u9488+\u6570\u5b57\u7684\u65b9\u5f0f\u83b7\u53d6\u4e00\u4e2a**\u504f\u79fb\u5730\u5740** \u4e3e\u4e2a\u6817\u5b50\uff1a C #include <stdio.h> int main () { int a [ 10 ] = { 0 , 1 , 2 , 3 , 4 }; int * p = a ; printf ( \"\u504f\u79fb\u524dp = %p \\n \" , p ); p += 3 ; printf ( \"\u504f\u79fb\u540ep = %p \\n \" , p ); return 0 ; } /* \u504f\u79fb\u524dp = 000000000061FDF0 \u504f\u79fb\u540ep = 000000000061FDFC */ \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u504f\u79fb\u540e\u7684\u6307\u9488\u7684\u5730\u5740\u6bd4\u504f\u79fb\u524d\u591a\u4e8612\uff0c\u53ef\u80fd\u6709\u7684\u540c\u5b66\u4f1a\u89c9\u5f97\u52a0\u7684\u4e0d\u5e94\u8be5\u662f3\u5417\uff0c\u5730\u5740\u5e94\u8be5\u662f000000000061FDF3\u624d\u5bf9\uff0c\u5176\u5b9e\u6307\u9488\u504f\u79fb\u7684\u91cf\u662f\uff1a \u6570\u636e\u7c7b\u578b\u957f\u5ea6*\u504f\u79fb\u957f\u5ea6 \u8fd9\u91cc\u6211\u4eec\u6570\u636e\u7c7b\u578b\u662fint\uff0c\u504f\u79fb\u7684\u957f\u5ea6\u662f3\u6240\u4ee5\u603b\u5171\u7684\u504f\u79fb\u91cf\u662f12\u3002\u540c\u7406\u51cf\u6cd5\u662f\u5f80\u524d\u504f\u79fb\u3002 \u6307\u9488\u8fd8\u80fd\u901a\u8fc7\u5355\u76ee\u8fd0\u7b97\u7b26++\u3001--\u8fdb\u884c\u504f\u79fb\uff0c\u6211\u5c31\u4e0d\u5217\u4e3e\u4e86\u3002 5.15.6 \u4e8c\u7ea7\u6307\u9488 \u00b6 \u65e2\u7136\u6307\u9488\u662f\u5b58\u50a8\u7684\u5730\u5740\uff0c\u5e76\u4e14\u7cfb\u7edf\u4e5f\u4f1a\u7ed9\u6307\u9488\u5206\u914d\u5730\u5740\u90a3\u4e48\u6211\u4eec\u7528\u4e00\u4e2a\u6307\u9488\u6765\u5b58\u50a8\u53e6\u4e00\u4e2a\u6307\u9488\u7684\u5730\u5740\u53ef\u4ee5\u5417\uff1f\u663e\u7136\u662f\u53ef\u4ee5\u7684\uff0c\u8fd9\u79cd\u6307\u9488\u4e5f\u53eb\u505a**\u6307\u5411\u6307\u9488\u7684\u6307\u9488** \uff0c\u7406\u8bba\u4e0a\u8fd9\u79cd\u6307\u9488\u53ef\u4ee5\u65e0\u9650\u8fd9\u6837\u5faa\u73af\u4e0b\u53bb\uff0c\u5230N\u91cd\u6307\u9488\uff0c\u4f46\u662f\u4e00\u822c\u8d85\u8fc7\u4e09\u91cd\u6307\u9488\u5c31\u4e0d\u592a\u5b9e\u7528\uff0c\u6216\u8005\u4e0d\u6613\u9605\u8bfb\u7406\u89e3\u4e86\uff0c\u4e3e\u4e2a\u6817\u5b50 C #include <stdio.h> int main () { int k = 1 ; int * p1 = & k ; int ** p2 = & p1 ; printf ( \"k\u7684\u5730\u5740: \\t %p \\n \" , & k ); printf ( \"p1\u7684\u5730\u5740: \\t %p \\n \" , & p1 ); printf ( \"p2\u7684\u5730\u5740: \\t %p \\n \" , & p2 ); printf ( \"p2\u6307\u5411\u7684\u5730\u5740: \\t %p \\n \" , p2 ); return 0 ; } \u5728\u6211\u7684\u7535\u8111\u4e0a\u6253\u5370\u7684\u662f\u4ee5\u4e0b\u5185\u5bb9\uff1a(\u4f60\u4eec\u6d4b\u8bd5\u7684\u8bdd\u5730\u5740\u53ef\u80fd\u4f1a\u4e0d\u592a\u4e00\u6837) C k\u7684\u5730\u5740 : 000000000061F E1C p1\u7684\u5730\u5740 : 000000000061F E10 p2\u7684\u5730\u5740 : 000000000061F E08 p2\u6307\u5411\u7684\u5730\u5740 : 000000000061F E10 \u901a\u8fc7\u5730\u5740\u6211\u4eec\u80fd\u53d1\u73b0p2\u6307\u5411\u7684\u5730\u5740\u5c31\u662fp1\u7684\u5730\u5740 5.15.7 \u6307\u9488\u548c\u6570\u7ec4\u7684\u5f02\u540c\u70b9 \u00b6 \u533a\u522b\u70b9 \u6307\u9488 \u6570\u7ec4 \u5b58\u50a8\u5185\u5bb9 \u4fdd\u5b58\u6570\u636e\u7684\u5730\u5740\uff0c\u4efb\u4f55\u4f20\u5165\u6307\u9488\u7684\u503c\u90fd\u4f1a\u5c06\u5176\u5f53\u4f5c\u5730\u5740\uff0c\u4f46\u662fp\u672c\u8eab\u4e5f\u4f1a\u6709\u7f16\u8bd1\u5668\u5b58\u50a8 \u4fdd\u5b58\u6570\u636e\uff0c\u6570\u7ec4\u540da\u4ee3\u8868\u7684\u662f\u6570\u7ec4\u9996\u5143\u7d20\u7684\u9996\u5730\u5740\u800c\u4e0d\u662f\u6570\u7ec4\u7684\u9996\u5730\u5740\uff0c&a\u624d\u662f\u6574\u4e2a\u6570\u7ec4\u7684\u9996\u5730\u5740 \u8bbf\u95ee\u6570\u636e\u65b9\u5f0f **\u95f4\u63a5\u8bbf\u95ee**\u6570\u636e\uff0c\u6211\u4eec\u901a\u8fc7\u6307\u9488\u53d8\u91cfp\u7684\u5730\u5740\u8bbf\u95ee\u8be5\u5730\u5740\u4e0a\u7684\u503c\uff0c\u6bd4\u5982*(p+i)\u7684\u65b9\u5f0f\u8bbf\u95ee\u4ee5p\u4e3a\u8d77\u59cb\u5730\u5740\u504f\u79fbi\u4e2a\u4f4d\u7f6e\u540e\u7684\u5730\u5740\u7684\u503c \u76f4\u63a5\u8bbf\u95ee \uff0c\u901a\u8fc7\u6570\u7ec4\u540d\u548c\u4e0b\u6807\u7684\u65b9\u5f0f\u8bbf\u95ee\uff0c\u6bd4\u5982a[i]\u8868\u793a\u8bbf\u95ee\u6570\u7ec4\u7b2ci+1\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u6216\u8005\u7528\u6307\u9488\u7684\u65b9\u5f0f\u8bbf\u95ee\u4e5f\u53ef\u4ee5 \u4f7f\u7528\u573a\u5408 **\u52a8\u6001**\u5206\u914d\u7684\u65f6\u5019 **\u56fa\u5b9a**\u5206\u914d\u5927\u5c0f\u7684\u65f6\u5019 \u7a7a\u95f4\u5206\u914d\u548c\u5220\u9664 malloc\u5206\u914d\uff0cfree\u5220\u9664 \u7cfb\u7edf\u81ea\u52a8\u5904\u7406 5.15.8 \u5173\u4e8e\u6307\u9488\u66f4\u591a\u4e1c\u897f \u00b6 \u6307\u9488\u6570\u7ec4\u548c\u6570\u7ec4\u6307\u9488 \u51fd\u6570\u6307\u9488 \u51fd\u6570\u6307\u9488\u6570\u7ec4\u3001\u51fd\u6570\u6307\u9488\u6570\u7ec4\u6307\u9488 \u5185\u5b58\u7ba1\u7406(\u8fd9\u4e2a\u5f85\u4f1a\u4f1a\u63d0\u5230\u4e00\u70b9) \u56e0\u4e3a\u672c\u7bc7\u4e3a\u901f\u901a\u6559\u7a0b\uff0c\u6240\u4ee5\u5176\u5b9e\u8fd8\u6709\u5f88\u591a\u6307\u9488\u7684\u4e1c\u897f\u90fd\u672a\u8bb2\u5230\uff0c\u8fd8\u8bf7\u89c1\u8c05\uff0c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u5df1\u53bb\u62d3\u5c55 5.16 \u5185\u5b58\u7ba1\u7406 \u00b6 5.16.1 \u5185\u5b58\u5206\u533a \u00b6 \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u7406\u89e3\u4e3a\u7a0b\u5e8f\u7684\u5185\u5b58\u5206\u4e3a**\u4e09\u4e2a\u90e8\u5206**\uff1a \u5806\u533a \uff1a\u7531malloc\u6216\u8005new\u64cd\u4f5c\u7b26\u5206\u914d\u7684\u5185\u5b58\uff0c\u7531\u8fd9\u4e24\u79cd\u64cd\u4f5c\u7b26\u5206\u914d\u7684\u5185\u5b58\u7684\u751f\u547d\u5468\u671f\u5206\u522b\u7531free\u548cdelete\u8fd9\u4e24\u79cd\u91ca\u653e\u64cd\u4f5c\u7b26\u51b3\u5b9a\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u4e24\u79cd\u91ca\u653e\u64cd\u4f5c\u7b26\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5185\u5b58\u5c31\u4f1a\u4e00\u76f4\u5230\u7a0b\u5e8f\u7ed3\u675f\u624d\u91ca\u653e \u6808\u533a \uff1a\u5c40\u90e8\u53d8\u91cf\u7684\u5b58\u50a8\u533a\u57df\uff0c\u6808\u533a\u7684\u5185\u5bb9\u5728\u4ee5\u51fd\u6570\u4e3a\u9996\u7684\u8303\u56f4\u5185\u5b58\u5728\uff0c\u5f53\u51fd\u6570\u8fd0\u884c\u7ed3\u675f\u90a3\u4e48\u53d8\u91cf\u81ea\u52a8\u91ca\u653e\uff0c\u6ce8\u610f\u5176\u5b9e\u66f4\u51c6\u786e\u7684\u8bf4\u662f\u53d8\u91cf\u5728\u79bb\u5f00\u5f53\u524d\u4f5c\u7528\u57df\u540e\u5c31\u4f1a\u81ea\u52a8\u9500\u6bc1 \u9759\u6001\u533a \uff1a\u4fdd\u5b58\u5168\u5c40\u53d8\u91cf\u548cstatic\u53d8\u91cf(\u5305\u62ec\u5c40\u90e8\u7684)\uff0c\u9759\u6001\u533a\u7684\u53d8\u91cf\u5728\u6574\u4e2a\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u90fd\u5b58\u5728 5.16.2 malloc \u00b6 \u4e0a\u9762\u4e5f\u4ecb\u7ecd\u4e86malloc\u662f\u5185\u5b58\u7684\u5206\u914d\u7684\u51fd\u6570\uff0c\u7531\u8be5\u51fd\u6570\u5206\u914d\u7684\u5185\u5b58\u653e\u5728\u4e86\u5806\u533a\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u968f\u7740\u51fd\u6570\u7684\u7ed3\u675f\u6d88\u4ea1\uff0c\u4f46\u662f\u5982\u679c\u4f60**\u628a\u63e1\u4e0d\u4f4f**\uff0c\u90a3\u4e48\u5c31\u53ef\u80fd\u9020\u6210**\u91ce\u6307\u9488**\u3001**\u5185\u5b58\u6cc4\u6f0f**\u7b49\u4e00\u7cfb\u5217\u95ee\u9898 malloc\u7684\u5934\u6587\u4ef6\u662f <stdlib.h> 5.16.2.1 \u51fd\u6570\u58f0\u660e \u00b6 C void * __cdecl malloc ( _In_ _CRT_GUARDOVERFLOW size_t _Size ); //\u7b80\u5316\u4e3a\u4e0b\u9762\u5f62\u5f0f void * malloc ( size_t size ) \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u662fvoid *\u7684\uff0c\u4f20\u5165\u7684\u53c2\u6570\u662f\u7533\u8bf7\u5185\u5b58\u7684\u5927\u5c0f(\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d) 5.16.2.2 \u6837\u4f8b \u00b6 \u6211\u4eec\u53ef\u4ee5\u6765\u4e3e\u4e2a\u6817\u5b50 C #include <stdio.h> #include <string.h> #include <stdlib.h> int * f ( int length ) { int * a = ( int * ) malloc ( sizeof ( int ) * length ); //\u6211\u4eec\u7533\u8bf7\u5185\u5b58\uff0c\u6ce8\u610f\u9700\u8981\u5f3a\u5236\u8f6c\u6362\u8fd4\u56de\u6570\u636e\u7c7b\u578b for ( int i = 0 ; i < length ; ++ i ) { a [ i ] = i ; } return a ; } int main () { int * p = f ( 10 ); for ( int i = 0 ; i < 10 ; ++ i ) { printf ( \"\u7b2c%d\u4e2a\u6570 = %d \\n \" , i , p [ i ]); } free ( p ); //\u6ce8\u610f\u91ca\u653e\u5185\u5b58\uff0c\u5e76\u4e14\u5185\u5b58\u91ca\u653e\u591a\u6b21\u53ef\u80fd\u4f1a\u51fa\u9519 p = NULL ; //\u4e0d\u7528\u7684\u6307\u9488\u6211\u4eec\u5c31\u5c06\u5176\u7f6e\u4e3aNULL return 0 ; } /*\u8f93\u51fa\u5185\u5bb9 \u7b2c0\u4e2a\u6570 = 0 \u7b2c1\u4e2a\u6570 = 1 \u7b2c2\u4e2a\u6570 = 2 \u7b2c3\u4e2a\u6570 = 3 \u7b2c4\u4e2a\u6570 = 4 \u7b2c5\u4e2a\u6570 = 5 \u7b2c6\u4e2a\u6570 = 6 \u7b2c7\u4e2a\u6570 = 7 \u7b2c8\u4e2a\u6570 = 8 \u7b2c9\u4e2a\u6570 = 9 */ 5.16.2.3 \u6ce8\u610f \u00b6 \u5185\u5b58\u91ca\u653e\u4e0d\u8981\u591a\u6b21free\u6216\u8005delete\uff0c\u4e00\u4e2amalloc\u5bf9\u5e94\u4e00\u4e2afree \u5bf9\u4e8e\u6307\u5411NULL\u7684\u6307\u9488\u591a\u6b21\u91ca\u653e\u6ca1\u6709\u95ee\u9898 \u5bf9\u4e8e\u7533\u8bf7\u7684\u5185\u5b58\uff0c\u7528\u5b8c\u540e\u4e0d\u91ca\u653e\u5c31\u4f1a\u5bfc\u81f4\u5185\u5b58\u6cc4\u6f0f \u5bf9\u4e8e\u6ca1\u6709\u7533\u8bf7\u5230\u7684\u7a7a\u95f4\u8bbf\u95ee\u53ef\u80fd\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5**\u201c\u7ba1\u597d\u81ea\u5df1\u7684\u6307\u9488\u201d** 5.17 \u7ed3\u6784\u4f53 \u00b6 5.17.1 \u4ec0\u4e48\u662f\u7ed3\u6784\u4f53\uff1f\u53efDIY\u7684\u6570\u636e\uff01 \u00b6 \u901a\u4fd7\u6765\u8bb2\uff0c\u7ed3\u6784\u4f53\u5c31\u662f\u5c06\u591a\u79cd\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf\u5c01\u88c5\u6210\u4e00\u4e2a\u72ec\u7acb\u6570\u636e\u7c7b\u578b\uff0c\u8fd9\u65f6\u5019\u5c31\u6709\u540c\u5b66\u95ee\u4e86\uff0c\u90a3\u6211\u653e\u4e00\u4e2a\u5143\u7d20\u7c7b\u578b\u7684\u53d8\u91cf\u884c\u4e0d\u884c\u5462\uff1f\u90a3\u80af\u5b9a\u884c\u554a\uff0c\u4f46\u662f\u6709\u4ec0\u4e48\u7528\u5462\uff1f 5.17.1.1 \u7ed3\u6784\u4f53\u7684\u5f62\u5f0f \u00b6 C struct StructName { /* int a; double b; \u7b49\u7b49\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b */ }; //\u6ce8\u610f\u8fd9\u91cc\u7684\u5206\u53f7 \u6211\u4eec\u4f7f\u7528\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u7528struct StructName + \u53d8\u91cf\u540d\u6765\u5b9e\u73b0\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u5b9a\u4e49 5.17.1.2 \u4e3e\u4e2a\u6817\u5b50 \u00b6 C++ #include <stdio.h> #include <string.h> #include <stdlib.h> struct Node { int L , W ; } k1 ; int main () { struct Node k2 ; //\u666e\u901a\u53d8\u91cf\u901a\u8fc7.\u7684\u65b9\u5f0f\u8bbf\u95ee\u7ed3\u6784\u4f53\u4e2d\u7684\u5143\u7d20 k1 . L = 1 ; k1 . W = 2 ; k2 . L = 2 ; k2 . W = 3 ; printf ( \"L = %d W = %d \\n \" , k1 . L , k1 . W ); printf ( \"L = %d W = %d \\n \" , k2 . L , k2 . W ); puts ( \"-----------------------\" ); //\u6307\u9488\u53d8\u91cf\u901a\u8fc7->\u8bbf\u95ee\u7ed3\u6784\u4f53\u4e2d\u7684\u5143\u7d20 struct Node * k3 = ( struct Node * ) malloc ( sizeof ( struct Node )); k3 -> L = 3 ; k3 -> W = 4 ; printf ( \"L = %d W = %d \\n \" , k3 -> L , k3 -> W ); return 0 ; } \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5728\u5b9a\u4e49\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5728\u7ed3\u6784\u4f53\u5927\u62ec\u53f7\u540e\u9762\u52a0\u4e0a\u53d8\u91cf\u540d\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528struct StructName + \u53d8\u91cf\u540d\u7684\u65b9\u5f0f\u5b9a\u4e49 \u6307\u9488\u7ed3\u6784\u4f53\u7684\u8bbf\u95ee\u65b9\u5f0f\u662f\u901a\u8fc7->\u800c\u4e0d\u662f. \u7ed3\u6784\u4f53\u91cc\u9762\u53ef\u4ee5\u653e\u7ed3\u6784\u4f53\uff0c\u8fd9\u4e5f\u5c31\u662f\u7ed3\u6784\u4f53\u7684\u5d4c\u5957 \u7ed3\u6784\u4f53\u4e2d\u5982\u679c\u6709\u6307\u9488\u5143\u7d20\uff0c\u5e76\u4e14\u8981\u4f7f\u7528\u5230\u8be5\u6307\u9488\u5143\u7d20\u7684\u65f6\u5019\u8bf7\u7ed9\u8be5\u6307\u9488\u5143\u7d20\u7533\u8bf7\u7a7a\u95f4 \u7ed3\u6784\u4f53\u4e5f\u8981\u521d\u59cb\u5316\uff0c\u522b\u5fd8\u8bb0\u4e86 \u7ed3\u6784\u4f53\u4f60\u53ef\u4ee5\u628a\u5b83\u5f53\u4f5cDIY\u7684\u6570\u636e\u7c7b\u578b\uff0c\u81ea\u7136\u4e5f\u6709\u6307\u9488\u3001\u6570\u7ec4\u7b49\u4e1c\u897f\u4e86 5.17.2 \u5c0f\u62d3\u5c55-\u5185\u5b58\u5bf9\u9f50 \u00b6 \u4f60\u89c9\u5f97\u4ee5\u4e0b\u4e24\u4efd\u7ed3\u6784\u4f53\u6240\u5360\u7684\u7a7a\u95f4\u662f\u4e00\u6837\u7684\u5417\uff1f C struct Node1 { char a , b ; int c ; }; struct Node2 { char a ; int b ; char c ; }; \u76f8\u4fe1\u5df2\u7ecf\u6709\u5c0f\u4f19\u4f34\u5f00\u59cb\u52a8\u624b\u5199\u4ee3\u7801\u5b9e\u9a8c\u4e86\u563f\u563f\uff0c\u6211\u8fd9\u91cc\u76f4\u63a5\u544a\u8bc9\u4f60\u7b54\u6848\uff0c\u8fd9\u4e24\u4e2a\u7ed3\u6784\u4f53\u5360\u7684\u7a7a\u95f4\u662f\u4e0d\u4e00\u6837\u7684\uff01 \u8fd9\u4e2a\u4e1c\u897f\u5c31\u53eb\u505a\u5185\u5b58\u5bf9\u9f50\uff0c\u5177\u4f53\u7684\u539f\u7406\u4f60\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u535a\u5ba2\uff1a \u5185\u5b58\u5bf9\u9f50\u7684\u89c4\u5219\u4ee5\u53ca\u4f5c\u7528 \u6211\u8fd9\u91cc\u7ed9\u4f60\u4e00\u4e2a\u6d4b\u8bd5\u7a0b\u5e8f\uff1a C #include <stdio.h> #include <string.h> #include <stdlib.h> struct Node1 { char a , b ; int c ; } A ; struct Node2 { char a ; int b ; char c ; } B ; int main () { printf ( \"struct Node1's size = %d \\n \" , sizeof ( struct Node1 )); printf ( \"a = %p \\n \" , & A . a ); printf ( \"b = %p \\n \" , & A . b ); printf ( \"c = %p \\n \" , & A . c ); puts ( \"------------------------------\" ); printf ( \"a = %p \\n \" , & B . a ); printf ( \"b = %p \\n \" , & B . b ); printf ( \"c = %p \\n \" , & B . c ); printf ( \"struct Node2's size = %d \\n \" , sizeof ( struct Node2 )); return 0 ; } \u672c\u6587\u5c31\u4e0d\u5c55\u5f00\u4e86\u3002 5.18 \u6587\u4ef6IO \u00b6 5.18.1 \u4ec0\u4e48\u662f\u6587\u4ef6\uff1f \u00b6 \u6587\u4ef6\u5c31\u662f\u4fe1\u606f\u7684\u4e00\u4e2a\u5408\u96c6\uff0c\u7136\u540e\u88ab\u4e0d\u540c\u7684\u65b9\u5f0f\u5305\u88c5\u8d77\u6765\uff1f 5.18.2 \u7a0b\u5e8f\u6253\u5f00\u6587\u4ef6 fopen\u51fd\u6570 \u00b6 \u6211\u4eec\u6765\u770bfopen\u7684\u58f0\u660e\uff1a C FILE * fopen ( const char * filename , const char * mode ); \u8fd4\u56de\u7c7b\u578b\u662fFILE *\u7684\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6587\u4ef6\u540d\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6253\u5f00\u65b9\u5f0f\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u8fd9\u91cc\u5982\u679c\u76f4\u63a5\u5199\u4e0a\u6587\u4ef6\u540d\u7684\u8bdd\u90a3\u5c31\u4f1a\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u7684\u6587\u4ef6\u5939\u4e2d\u5bfb\u627e\u540c\u6587\u4ef6\u5939\u4e2d\u7684\u8be5\u6587\u4ef6\uff0c\u8fd9\u4e5f\u5c31\u662f\u5927\u5bb6\u5e38\u8bf4\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u5f53\u7136\u4f60\u60f3\u6253\u5f00\u4e00\u4e2a\u5176\u4ed6\u78c1\u76d8\u7684\u4e00\u4e2a\u6587\u4ef6\u4f60\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84\u653e\u8fdb\u8fd9\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u53eb\u7edd\u5bf9\u8def\u5f84 \u56e0\u4e3a\u8fd9\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u662f\u4e00\u4e2aFILE*\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u4e5f\u5e94\u8be5\u53bb\u9876\u4e00\u4e2a\u4e00\u4e2a\u8fd9\u4e2a\u7c7b\u578b\u53bb\u63a5\u53d7\u6211\u4eecfopen\u7684\u8fd4\u56de\u503c\uff0c\u6211\u4e3e\u4e2a\u6817\u5b50\uff1a C FILE * fp = fopen ( \"a.txt\" , \"r\" ); //\u8868\u793a\u7684\u662f\u4ee5\u53ea\u8bfb\u7684\u65b9\u5f0f\u6253\u5f00a.txt\u6587\u4ef6 5.18.3 \u7a0b\u5e8f\u5173\u95ed\u6587\u4ef6 fclose\u51fd\u6570 \u00b6 \u5728\u6211\u4eec\u5b8c\u6210\u5806\u6587\u4ef6\u7684\u64cd\u4f5c\u540e\u6211\u4eec\u5f00\u59cb\u5b9a\u4e49\u7684FILE *\u7684\u6307\u9488fp\u5c31\u8981\u5173\u95ed\u6587\u4ef6\u8bbf\u95ee\uff0c\u540c\u6837\u7684\u4e00\u4e2afclose\u5bf9\u5e94\u4e00\u4e2afopen\uff0c\u4e0d\u8981\u591a\u6b21fclose\uff0c\u6211\u4e3e\u4e2a\u6817\u5b50 C FILE * fp = fopen ( \"a.txt\" , \"r\" ); //\u8868\u793a\u7684\u662f\u4ee5\u53ea\u8bfb\u7684\u65b9\u5f0f\u6253\u5f00a.txt\u6587\u4ef6 // xxxx\u64cd\u4f5c fclose ( fp ) 5.18.4 \u6587\u4ef6\u7684\u8bfb\u548c\u5199 \u00b6 \u4e0a\u9762\u8bb2\u7684\u662f\u6253\u5f00\u548c\u5173\u95ed\u6587\u4ef6\uff0c\u6211\u4eec\u771f\u6b63\u60f3\u505a\u7684\u4e8b\u60c5\u662f\u67e5\u770b\u6216\u8005\u4fee\u6539\u6216\u8005\u589e\u6dfb\u6587\u4ef6\u5185\u5bb9\u800c\u4e0d\u53ea\u662f\u6253\u5f00\u6216\u5173\u95ed\uff0c\u6211\u8fd9\u91cc\u53ea\u8bb2\u683c\u5f0f\u5316\u8f93\u5165\u8f93\u51fa\u7684\u51fd\u6570\uff0c\u5176\u4ed6\u7684\u4f60\u770b\u770b\u4e5f\u5c31\u80fd\u660e\u767d\uff0c\u5728\u8fd9\u91cc\u8bb2\u5c31\u662f\u6d6a\u8d39\u65f6\u95f4 5.18.4.1 fscanf\u51fd\u6570 \u00b6 \u6211\u4eec\u5148\u6765\u770b\u770b\u8fd9\u4e2a\u51fd\u6570\u7684\u58f0\u660e\uff1a C int fscanf ( FILE * stream , const char * format , ...) \u662f\u4e0d\u662f\u548c\u6211\u4eec\u6700\u5f00\u59cb\u8bb2\u7684scanf\u5f88\u50cf\uff1f\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2aFILE *stream\u7684\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u5c31\u662f\u4f20\u5165\u7684\u6587\u4ef6\u6807\u8bc6\u7b26(\u4e5f\u5c31\u662f\u6211\u4eec\u662f\u5728\u54ea\u4e2a\u6587\u4ef6\u8bfb)\uff0c\u4e5f\u5c31\u662f\u4e0a\u9762\u63d0\u5230\u7684fp\u6307\u9488\u3002\u5176\u4f59\u7528\u6cd5\u548cscanf\u4e00\u6837 5.18.4.2 fprintf\u51fd\u6570 \u00b6 \u6211\u4eec\u6765\u770b\u8fd9\u4e2a\u51fd\u6570\u7684\u58f0\u660e\uff1a C int fprintf ( FILE * stream , const char * format , ...) \u4f60\u53c8\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u4e5f\u662f\u591a\u4e86\u4e2aFILE *\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u539f\u7406\u548c\u4e0a\u9762\u4e00\u6837\uff0c\u8fd9\u91cc\u6211\u5c31\u7701\u7565\u4e86 5.18.5 \u4e3e\u4e2a\u6817\u5b50 \u00b6 \u5047\u8bbe\u8bf4\u6211\u4eec\u6709\u4e00\u4e2a\u53eba.txt\u7684\u6587\u4ef6\uff0c\u8fd9\u4e2a\u6587\u4ef6\u91cc\u9762\u6709\u4e00\u4e32\u6570\u5b57\uff0c\u6211\u4eec\u5e0c\u671b\u8bfb\u53d6\u6bcf\u4e2a\u6570\u5b57\u7136\u540e\u8ba9\u8fd9\u4e2a\u6570\u5b57+10 C #include <stdio.h> #include <string.h> #include <stdlib.h> #define N 10 int main () { int a [ N ]; FILE * fp1 = fopen ( \"a.txt\" , \"r\" ); //\u4ee5\u53ea\u8bfb\u7684\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6 if ( fp1 == NULL ) { //\u5982\u679c\u6253\u5f00\u5931\u8d25\uff0c\u90a3\u4e48\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f perror ( \"open_error:\" ); return -1 ; } int len = 0 ; while ( EOF != fscanf ( fp1 , \"%d\" , & a [ len ])) { //\u4e00\u76f4\u8bfb\u5230\u6587\u4ef6\u672b\u5c3e\uff0cEOF => End Of File len ++ ; } fclose ( fp1 ); //\u8bfb\u5b8c\u4e86\uff0c\u5173\u95ed\u6587\u4ef6\u6d41 FILE * fp2 = fopen ( \"a.txt\" , \"w\" ); //\u4ee5\u53ea\u5199\u7684\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u5982\u679c\u6709\u6587\u4ef6\u90a3\u4e48\u5c31\u6e05\u7a7a if ( fp2 == NULL ) { //\u5982\u679c\u6253\u5f00\u5931\u8d25\uff0c\u90a3\u4e48\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f perror ( \"open_error:\" ); return -1 ; } for ( int i = 0 ; i < len ; ++ i ) { //\u5faa\u73af\u5199\u5165 a [ i ] += 10 ; fprintf ( fp2 , \"%d \\n \" , a [ i ]); } fclose ( fp2 ); //\u5173\u6d41 return 0 ; } 5.18.6 \u5c0f\u62d3\u5c55 \u00b6 5.18.6.1 fseek\u51fd\u6570 \u00b6 \u6709\u7684\u65f6\u5019\u6211\u4eec\u60f3\u4ece\u6587\u4ef6\u7684\u67d0\u4e2a\u90e8\u5206\u5f00\u59cb\u8bfb\uff0c\u6216\u8005\u5199\uff0c\u800c\u4e0d\u662f\u4ece\u5f00\u5934\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u7528\u5230fseek\u51fd\u6570\u8ba9\u6211\u4eec\u5f53\u524d\u7684\u201c\u5149\u6807\u201d\u5b9a\u4f4d\u5230\u6587\u4ef6\u7684\u67d0\u4e2a\u6211\u4eec\u60f3\u8981\u7684\u90e8\u5206 \u6211\u4eec\u5148\u6765\u770b\u8fd9\u4e2a\u51fd\u6570\u7684\u58f0\u660e\uff1a C int fseek ( FILE * stream , long int offset , int whence ) \u7b2c\u4e00\u4e2a\u53c2\u6570\u662fFILE * \u7b2c\u4e8c\u4e2a\u53c2\u6570\u53eb\u504f\u79fb\u91cf\uff0c\u4f46\u662f\u662f\u76f8\u5bf9whence\u7684 \u7b2c\u4e09\u4e2a\u662f\u6587\u4ef6\u4ece\u4ec0\u4e48\u5730\u65b9\u5f00\u59cb\u8bfb\uff0c\u4e00\u5171\u6709\u4e09\u4e2a\u5e38\u91cf\u8868\u793a \u5e38\u91cf \u63cf\u8ff0 SEEK_SET \u6587\u4ef6\u7684\u5f00\u5934 SEEK_CUR \u6587\u4ef6\u6307\u9488\u7684\u5f53\u524d\u4f4d\u7f6e SEEK_END \u6587\u4ef6\u7684\u672b\u5c3e \u5982\u679c\u51fd\u6570\u6267\u884c\u6210\u529f\u90a3\u4e48\u5c31\u8fd4\u56de\u96f6\uff0c\u5426\u5219\u8fd4\u56de\u975e\u96f6\u503c \u4e3e\u4e2a\u6817\u5b50 C #include <stdio.h> int main () { FILE * fp ; fp = fopen ( \"a.txt\" , \"w+\" ); fputs ( \"This is runoob.com\" , fp ); fseek ( fp , 7 , SEEK_SET ); fputs ( \" C Programming Langauge\" , fp ); fclose ( fp ); return ( 0 ); } 5.18.6.2 \u6587\u4ef6\u6253\u5f00\u65b9\u5f0f \u00b6 \u6a21\u5f0f \u63cf\u8ff0 r \u6253\u5f00\u4e00\u4e2a\u5df2\u6709\u7684\u6587\u672c\u6587\u4ef6\uff0c\u5141\u8bb8\u8bfb\u53d6\u6587\u4ef6\u3002 w \u6253\u5f00\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u5141\u8bb8\u5199\u5165\u6587\u4ef6\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\u3002\u5728\u8fd9\u91cc\uff0c\u60a8\u7684\u7a0b\u5e8f\u4f1a\u4ece\u6587\u4ef6\u7684\u5f00\u5934\u5199\u5165\u5185\u5bb9\u3002\u5982\u679c\u6587\u4ef6\u5b58\u5728\uff0c\u5219\u8be5\u4f1a\u88ab\u622a\u65ad\u4e3a\u96f6\u957f\u5ea6\uff0c\u91cd\u65b0\u5199\u5165\u3002 a \u6253\u5f00\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u4ee5\u8ffd\u52a0\u6a21\u5f0f\u5199\u5165\u6587\u4ef6\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\u3002\u5728\u8fd9\u91cc\uff0c\u60a8\u7684\u7a0b\u5e8f\u4f1a\u5728\u5df2\u6709\u7684\u6587\u4ef6\u5185\u5bb9\u4e2d\u8ffd\u52a0\u5185\u5bb9\u3002 r+ \u6253\u5f00\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u5141\u8bb8\u8bfb\u5199\u6587\u4ef6\u3002 w+ \u6253\u5f00\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u5141\u8bb8\u8bfb\u5199\u6587\u4ef6\u3002\u5982\u679c\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u5219\u6587\u4ef6\u4f1a\u88ab\u622a\u65ad\u4e3a\u96f6\u957f\u5ea6\uff0c\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\u3002 a+ \u6253\u5f00\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u5141\u8bb8\u8bfb\u5199\u6587\u4ef6\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\u3002\u8bfb\u53d6\u4f1a\u4ece\u6587\u4ef6\u7684\u5f00\u5934\u5f00\u59cb\uff0c\u5199\u5165\u5219\u53ea\u80fd\u662f\u8ffd\u52a0\u6a21\u5f0f\u3002 \u5982\u679c\u5904\u7406\u7684\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5219\u9700\u4f7f\u7528\u4e0b\u9762\u7684\u8bbf\u95ee\u6a21\u5f0f\u6765\u53d6\u4ee3\u4e0a\u9762\u7684\u8bbf\u95ee\u6a21\u5f0f\uff1a C \"rb\" , \"wb\" , \"ab\" , \"rb+\" , \"r+b\" , \"wb+\" , \"w+b\" , \"ab+\" , \"a+b\" \u516d\u3001\u5173\u4e8e\u8c03\u8bd5 \u00b6 6.1 \u56fe\u5f62\u5316\u754c\u9762 \u00b6 \u50cf Dev-c++ \u3001 Vscode \u3001 Visual Studio \u3001 Clion \u7b49\u7b49\u5f00\u53d1\u8f6f\u4ef6\uff0c\u90fd\u662f\u5177\u6709 \u6253\u65ad\u70b9\u8c03\u8bd5\u529f\u80fd \u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728\u6211\u4eec\u60f3\u8ba9\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u8fd0\u884c\u5230\u67d0\u4e00\u884c\u5c31\u505c\u6b62\u7684\u5730\u65b9\u6253\u4e00\u4e2a\u65ad\u70b9\uff0c\u7136\u540e\uff0c\u4e0a\u65b9\u6709\u4e00\u4e2a\u8c03\u8bd5\uff08debug\uff09\u7684\u6309\u94ae \u6211\u4eec\u4ee5Dev-c++\u4e3a\u4f8b\uff0c\u6211\u4eec\u9700\u8981\u73b0\u5728\u4e0a\u65b9\u7684\u9009\u9879\u4e2d\u70b9\u51fb \u5de5\u5177 -> \u7f16\u8bd1\u9009\u9879 -> \u4ee3\u7801\u751f\u6210 -> \u8fde\u63a5\u5668 -> \u4ea7\u751f\u8c03\u8bd5\u4fe1\u606f \uff0c\u7136\u540e\u5c06\u8fd9\u91cc\u6539\u4e3a Yes \uff0c\u7136\u540e\u5c31\u80fd\u4f7f\u7528\u8c03\u8bd5\u529f\u80fd\u4e86\uff0c\u8c03\u8bd5\u7684\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u5c06\u6211\u4eec\u9700\u8981\u89c2\u5bdf\u7684\u53d8\u91cf\u653e\u5728\u5de6\u4fa7\u7684\u8c03\u8bd5\u533a\uff0c\u7136\u540e\u6bcf\u6267\u884c\u4e00\u884c\u6211\u4eec\u89c2\u5bdf\u5176\u53d8\u5316\uff0c\u6765\u5224\u65ad\u6211\u4eec\u7684\u7a0b\u5e8f\u7684\u903b\u8f91\u662f\u5426\u6b63\u786e 6.2 \u975e\u56fe\u5f62\u5316\u754c\u9762 \u00b6 \u8fd9\u79cd\u4e00\u822c\u662f\u5728\u6211\u4eec\u4f7f\u7528\u4e00\u4e9b shell \u6216\u8005 \u7ec8\u7aef \uff0c\u94fe\u63a5\u6211\u4eec\u7684\u670d\u52a1\u5668\u6216\u8005\u865a\u62df\u673a\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6ca1\u6709\u56fe\u5f62\u5316\u754c\u9762\u7684IDE\u6765\u8f85\u52a9\u6211\u4eec\u8c03\u8bd5\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u5199\u4e00\u4e2a print() \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c31\u6253\u5370\u5f53\u524d\u6211\u4eec\u5e0c\u671b\u89c2\u5bdf\u7684\u53d8\u91cf\u7684\u503c\uff0c\u90a3\u4e48\u8fd9\u6837\u6211\u4eec\u4e5f\u80fd\u6765\u901a\u8fc7\u63a7\u5236\u53f0\u6253\u5370\u7684\u4fe1\u606f\u6765\u5224\u65ad\u6211\u4eec\u7a0b\u5e8f\u7684\u903b\u8f91\u662f\u5426\u6b63\u786e 6.3 \u8c03\u8bd5\u7684\u91cd\u8981\u6027 \u00b6 \u6211\u4eec\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\u5e76\u4e0d\u80fd\u6bcf\u6b21\u90fd\u4fdd\u8bc1\u81ea\u5df1\u5199\u7684\u4ee3\u7801\u6ca1\u6709bug\uff0c\u90a3\u4e48\u5f53\u4e00\u4e2a\u7a0b\u5e8f\u51fa\u73b0\u4e86bug\uff0c\u6211\u4eec\u901a\u8fc7 \u65e5\u5fd7 \u80fd\u5feb\u901f\u627e\u5230\u95ee\u9898\u7684\u53d1\u751f\uff0c\u90a3\u4e48 \u8c03\u8bd5 \u5c31\u80fd\u8ba9\u6211\u4eec\u5feb\u901f\u7684\u53d1\u73b0\u95ee\u9898\u51fa\u73b0\u7684\u539f\u56e0\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u7684\u4ee3\u7801\u51fa\u73b0\u4e86\u4e00\u4e9b\u903b\u8f91\u4e0a\u7684\u95ee\u9898\u7684\u65f6\u5019\uff0c\u8bf7\u4e0d\u8981\u627e\u522b\u4eba\u5e2e\u4f60\u770b\uff0c\u8fd9\u5bf9\u4f60\u6765\u8bf4\u4e5f\u662f\u4e00\u79cd\u78e8\u7ec3 \u4e03\u3001\u66f4\u591a\u62d3\u5c55 \u00b6 \u540c\u5b66\u4eec\u5b66\u5230\u8fd9\u91cc\uff0c\u5176\u5b9e**\u201c\u7a0b\u5e8f\u8bbe\u8ba1\u201d**\u5927\u81f4\u5c31\u4f1a\u4e86\uff0c\u53ef\u80fd\u6709\u4e00\u4e9b\u5c0f\u7ec6\u8282\u4e0d\u592a\u4f1a\uff0c\u6216\u8005\u4e4b\u524d\u8bb2\u7684\u6ca1\u6d88\u5316\uff0c\u540e\u9762\u6211\u60f3\u8bf4\u8bf4\u5728\u672c\u4e66\u7ed3\u675f\u540e\uff0c\u4f60\u7684**\u5b66\u4e60\u8def\u7ebf**\u53c8\u5e94\u8be5\u662f\u600e\u6837\u7684\uff0c\u5e0c\u671b\u80fd\u7ed9\u5230\u4e00\u4e2a\u5efa\u8bae 7.1 \u4fe1\u606f\u5b66\u7ade\u8d5b(OI or ACM) \u00b6 7.1.1 about \u00b6 \u5982\u679c\u4f60\u662f\u521d\u9ad8\u4e2d\u751f\u63a5\u89e6\u5230\u7f16\u7a0b\u5927\u81f4\u662f\u4e3a\u4e86OI\uff0c\u5927\u5b66\u7684\u8bdd\u53ef\u80fd\u4f1a\u542c\u8fc7\u6709\u4e00\u4e2a\u53ebACM\u7684\u7ec4\u7ec7\u6216\u8005\u5b9e\u9a8c\u5ba4\uff1f \u7b14\u8005\u5728\u521d\u9ad8\u4e2d\u4ece\u672a\u63a5\u89e6\u7f16\u7a0b\uff0c\u521d\u6b21\u63a5\u89e6\u662f\u5728\u5927\u5b66\u9009\u4e86\u8ba1\u7b97\u673a\u7c7b\u7684\u7684\u4e13\u4e1a\uff0c\u4e5f\u6709\u5e78(\u4e0d\u5e78\uff1f)\u5728\u8001\u5e08\u7684\u4ecb\u7ecd\u4e0b\u52a0\u5165\u4e86ACM\u5b9e\u9a8c\u5ba4\uff0c\u6240\u4ee5\u5bf9\u8fd9\u4e00\u5757\u8fd8\u7b97\u7565\u77e5\u4e00\u4e8c\uff0c\u5982\u679c\u4f60\u60f3\u5f80\u8fd9\u4e2a\u65b9\u5411\u8d70\u4e0b\u53bb\u7684\u8bdd\uff0c\u90a3\u6211\u6709\u51e0\u70b9\u5efa\u8bae\u7ed9\u4f60\u5206\u4eab\uff0c\u9996\u5148\u95ee\u4f60\u51e0\u4e2a\u95ee\u9898\uff0c\u4f60\u770b\u5408\u4e0d\u5408\u81ea\u5df1\u7684\u80c3\u53e3 \u4f60\u662f\u5426\u559c\u6b22\u6570\u5b66\uff1f\u6216\u8005\u5728\u6570\u5b66\u4e0a\u9762\u6709\u4e00\u5b9a\u5929\u8d4b\uff1f \u4f60\u662f\u5426\u80fd\u80fd\u63a5\u53d7\u4e00\u592910h\u53ca\u4ee5\u4e0a\u7684\u8bad\u7ec3\u65f6\u95f4\uff1f \u4f60\u662f\u5426\u80fd\u63a5\u53d7\u4f60\u8981\u653e\u5f03\u4f60\u7684\u5176\u4ed6\u5b66\u79d1\u6216\u8005\u662f\u8bfe\u7a0b\uff1f(\u4e0d\u662f\u6302\u79d1\uff0c\u53ea\u662f\u53ef\u80fd\u5206\u6ca1\u522b\u4eba\u90a3\u4e48\u9ad8\uff0c\u5927\u4f6c\u9664\u5916) \u4f60\u662f\u5426\u80fd\u8010\u5f97\u4f4f\u5bc2\u5bde\uff0c\u65e0\u8bba\u6625\u79cb\u51ac\u590f\u7684\u5047\u671f\u90fd\u8981\u8bad\u7ec3\uff1f \u4f60\u662f\u5426\u80fd\u80fd\u63a5\u53d7\u4e00\u573a5h\u7684\u6bd4\u8d5b\uff0c\u4f60\u662f\u5426\u6709\u8db3\u591f\u7684\u81ea\u4fe1\uff1f \u2026\u2026 \u5176\u5b9e\u7ade\u8d5b\u7684\u9053\u8def\u672c\u6765\u5c31\u5f88\u62e5\u6324\u4e86\uff0c\u7b14\u8005\u5176\u5b9e\u4e0d\u5efa\u8bae\u5927\u5bb6\u5165\u5751\u7684\uff0c\u968f\u7740\u7f16\u7a0b\u666e\u53ca\u5316\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u5b66\u751f\u4ece\u5c0f\u5c31\u6709\u8ba1\u7b97\u673a\u80cc\u666f\uff0c\u4f60\u8d77\u6b65\u665a\u53ef\u522b\u4eba\u4e0d\u665a\uff0c\u4f60\u5927\u5b66\u5b66\u7684\u4e1c\u897f\u4eba\u5bb6\u9ad8\u4e2d\u751a\u81f3\u521d\u4e2d\u5c31\u5b66\u4e86\uff0c\u8fd9\u4f1a\u600e\u6837\u5462\uff1f\u4f1a\u8ba9\u4f60\u611f\u89c9\u4ed8\u51fa\u548c\u6536\u83b7\u4e0d\u6210\u6b63\u6bd4\uff0c\u5f53\u7136\u4e0d\u662f\u8bf4\u4f60\u4e3a\u4e86\u5956\u800c\u6765\uff0c\u8fd9\u6837\u6ce8\u5b9a\u4f1a\u5931\u671b\u7684\uff0c\u4f60\u5e94\u8be5\u6000\u7740\u4e00\u9897\u597d\u5947\u63a2\u77e5\u7684\u5fc3\uff0c\u5173\u6ce8\u8fc7\u7a0b\u5c31\u884c\uff0c\u4e0d\u8981\u5728\u610f\u7ed3\u679c\u3002\u5982\u679c\u4f60\u975e\u8981\u6765\u8bd5\u8bd5\uff0c\u4f60\u4f1a\u53d1\u73b0\u641e\u7ade\u8d5b\u7684\u5206\u4e24\u79cd\u4eba\uff0c\u4e00\u79cd**\u201c\u5929\u8d4b\u578b\u201d\u9009\u624b**\uff0c\u53e6\u4e00\u79cd\u662f**\u201c\u81ea\u8d70\u4eba\u5f62\u9898\u5e93\u201d**\uff0c\u7b14\u8005\u81ea\u77e5\u6ca1\u6709\u5929\u8d4b\uff0c\u6240\u4ee5\u7b97\u662f\u540e\u8005\uff0c\u4e24\u5e74\u65f6\u95f4\u6d3b\u8dc3\u5728\u5404\u5927OJ\u5927\u7ea6\u5237\u4e861k3\u5de6\u53f3\u7684\u9898\u76ee\uff0c\u4f46\u662f\u4ecd\u7136\u4e0d\u591f\u2026\u2026 \u53ef\u4ee5\u5148\u53bb\u505a HDUOJ \u9898\u53f72000-2099\u7684\u9898\u76eeor\u53bb\u6d1b\u8c37\u7684\u5165\u95e8\u63d0\u5355+\u7b97\u6cd51-x\u9898\u5355\uff0c\u8bed\u6cd5\u9898\u505a\u5230\u4e00\u5b9a\u7a0b\u5ea6\u5c31\u53ef\u4ee5\u4e0d\u505a\u4e86\uff0c\u6ca1\u5fc5\u8981\u505a\u5b8c \u5165\u95e8\u540e\u4f60\u53ef\u4ee5\u9010\u6b65\u4e86\u89e3\u4ee5\u4e0b\u5404\u79cd\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784(\u5148\u4ece\u7b80\u5355\u7684\u8d2a\u5fc3\u3001\u641c\u7d22\u5f00\u59cb)\uff0c\u7136\u540e\u53bb Virtual Judge \u4e0a\u9762\u5237\u76f8\u5e94\u7684\u9898\u5355 \u4f60\u53ef\u4ee5\u901a\u8fc7\u770b\u522b\u4eba\u7684\u535a\u5ba2\u5b66\u4e60\uff0c\u4e5f\u53ef\u4ee5\u4e70\u4e00\u4e24\u672c\u7b97\u6cd5\u4e66\u5b66\u4e60 \u5982\u679c\u4f60\u8981\u53c2\u52a0ICPC or CCPC\u7b49\u8fd9\u4e00\u7c7b\u7684\u6bd4\u8d5b\uff0c\u4f60\u53ef\u4ee5\u53bb Codeforces \u4e0a\u9762\u6253\u4e00\u4e0b\u5b83\u7684\u6bd4\u8d5b\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u7ade\u8d5b\u7f51\u7ad9\uff0c\u6709\u5f88\u591a\u5de7\u5999\u7684\u601d\u7ef4\u9898\u7b49\u53ef\u4ee5\u62d3\u5c55\u4f60\u7684\u601d\u7ef4 \u6e29\u6545\u800c\u77e5\u65b0\uff0c\u5bf9\u4e8e\u81ea\u5df1\u5b66\u7684\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u8981\u7ecf\u5e38\u590d\u4e60\uff0c\u7136\u540e\u53ef\u4ee5\u5e73\u65f6\u7ec3\u4e60\u4e00\u4e0b\u81ea\u5df1\u7684\u624b\u901f\uff0c\u4ee5\u53ca\u4ee3\u7801\u7684\u51c6\u5ea6 \u5982\u679c\u6709\u80fd\u529b\u7684\u8bdd\u53ef\u4ee5\u53bb\u770b\u4e00\u4e0b\u56fd\u5bb6\u96c6\u8bad\u961f\u7684\u8bba\u6587 \u591a\u770b\u522b\u4eba\u7684\u4ee3\u7801\uff0c\u4e0d\u80fd\u61d2\uff0c\u591a\u4e9b\u9898 \u66f4\u591a\u522b\u4eba\u7684ACM\u5b66\u4e60\u65b9\u6cd5\uff0c\u5927\u5bb6\u53ef\u4ee5\u53bb\u767e\u5ea6\u641c\u4e00\u4e0b\uff0c\u5176\u5b9e\u9002\u5408\u81ea\u5df1\u7684\u65b9\u6cd5\u624d\u662f\u6700\u597d\u7684\uff0c\u80fd\u4e00\u76f4**\u575a\u6301**\u4e5f\u662f\u6700\u597d\u7684\u3002 \u4e0b\u9762\u662f\u6211\u63a8\u8350\u7684\u4e24\u672c\u7b97\u6cd5\u4e66\uff08\u6392\u540d\u4e0d\u5206\u5148\u540e\uff09\uff1a 1\uff1a\u300a\u6311\u6218\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\uff08\u7b2c2\u7248\uff09\u300b 2\uff1a\u300a\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178(\u5218\u4f73\u6c5d)\u300b \u5176\u5b9e\u6211\u662f\u4e0d\u5efa\u8bae\u5927\u5bb6\u770b\u8fd9\u672c\u4e66\u7684\uff0c\u56e0\u4e3a**\u5761\u5ea6**\u5f88\u5927\uff0c\u4e0d\u9002\u5408\u65b0\u624b 3:**\u535a\u5ba2\u56ed**\u548cCSDN \u591a\u770b\u524d\u4eba\u603b\u7ed3\u7684\u4e1c\u897f\u6709\u52a9\u4e8e\u6211\u4eec\u7406\u89e3\u548c\u5b66\u4e60\u7b97\u6cd5 \u4f60\u4eec\u4e5f\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u6211\u5f53\u65f6\u7684\u63d0\u95ee\uff1a https://www.zhihu.com/question/361725313 7.1.2 \u6280\u80fd\u6811 \u00b6 7.1.3 \u7b14\u8005\u7684Online-Judge \u00b6 \u6b22\u8fce\u5927\u5bb6\u6765\u6211\u642d\u5efa\u7684OJ\uff1a www.mangata.ltd \u505a\u9898\uff0c\u73b0\u5728\u5df2\u7ecf\u4e0a\u4f20\u4e86\u8bb8\u591a\u9898\u76ee\uff0c\u8fd8\u4f1a\u4e0d\u5b9a\u671f\u4e3e\u529e\u6bd4\u8d5b\uff08\u6e9c\uff0c\u5982\u679c\u60f3\u6765\u51fa\u9898\u7684\u5927\u4f6c\u6211\u4e5f\u975e\u5e38\u6b22\u8fceb\uff08\uffe3\u25bd\uffe3\uff09d\u3000 7.2 \u9879\u76ee\u5f00\u53d1 \u00b6 \u5176\u5b9e\u66f4\u591a\u7684\u4eba\u9009\u62e9\u7684\u90fd\u662f\u9879\u76ee\u5f00\u53d1\uff0c\u6bd5\u7adf\u8981\u6070\u996d\u7684\u561b\uff0c\u9879\u76ee\u5f00\u53d1\u7684\u8bdd\uff0c\u90a3\u624e\u5b9e\u7684\u7a0b\u5e8f\u57fa\u7840\u662f\u5f88\u6709\u5fc5\u8981\u7684\uff0c\u8fd9\u7bc7\u901f\u901a\u6559\u7a0b\u53ea\u662f\u4e00\u4e2a\u5f00\u59cb \u4f60\u8981\u4ece\u5934\u518d\u4ed4\u7ec6\u5b66\u4e60\u4e00\u904d\uff0c\u7136\u540e\u771f\u6b63\u7406\u89e3\u201c\u7a0b\u5e8f\u8bbe\u8ba1\u201d \u638c\u63e1\u7b80\u5355\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5(\u5982\u94fe\u8868\u3001\u4e8c\u53c9\u6811\u3001B+\u6811\u3001\u5e76\u67e5\u96c6\u3001\u6df1\u5ea6\u3001\u5e7f\u5ea6\u641c\u7d22\u7b49\u7b49) \u5b66\u4e60\u9762\u5bf9\u5bf9\u8c61\u601d\u60f3 \u5b66\u4e60Git\u600e\u4e48\u4f7f\u7528\uff0c\u4ee5\u53ca\u547d\u4ee4\uff0c\u6709\u60f3\u505a\u7684\u9879\u76ee\u53ef\u4ee5\u4e0a\u53bb\u770b\u770b\u522b\u4eba\u7684\u4ee3\u7801\u4f5c\u4e3a\u5b66\u4e60 \u5b66\u4e60linux\u7f16\u7a0b\u548clinux\u4f7f\u7528 \u5b66\u4e60\u5e76\u53d1\u7f16\u7a0b \u5b66\u4e60\u7f51\u7edc\u7f16\u7a0b(\u5982\u679c\u53ef\u80fd\u7684\u8bdd\u53ef\u4ee5\u770b\u4e00\u70b9\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u4e66) \u5b66\u4e60\u5982\u4f55\u5bf9\u8be5\u8bed\u8a00\u9879\u76ee\u8fdb\u884c\u7f16\u8bd1\u3001\u6253\u5305\u3001\u90e8\u7f72\u548c\u8fd0\u884c \u5b66\u4f1a\u8bed\u8a00\u7684\u7f16\u8bd1\u5b9e\u73b0\uff0c\u6bd4\u5982 \u6c47\u7f16\u3001\u5b57\u8282\u7801\u3001 \u865a\u62df\u673a\u3001CPU \u6307\u4ee4\u96c6 \u5728\u5b66\u7684\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u53bb\u627e\u4e00\u4e9b\u5bf9\u5e94\u7684\u9879\u76ee\uff0c\u6bd4\u5982\u7ba1\u7406\u7cfb\u7edf\u5565\u7684 \u53ef\u4ee5\u53bb leetcode or \u725b\u5ba2 \u505a\u4e00\u4e0b\u9762\u8bd5\u9898\u5de9\u56fa\u4e00\u4e0b\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u57fa\u7840\uff0c\u6bcf\u5468\u8fd8\u6709\u5468\u8d5b\u8c8c\u4f3c \u63a8\u8350\u4e66\u7c4d\uff1a CPimerPlus C\u8bed\u8a00\u6df1\u5ea6\u5256\u6790 Python\u722c\u866b\u6743\u5a01\u6307\u5357 \u9ad8\u8d28\u91cfLinux\u7f16\u7a0b \u8bbe\u8ba1\u6a21\u5f0f\u4e4b\u7985 \u5251\u6307offer \u7f16\u7a0b\u4e4b\u7f8e \u535a\u5ba2\u56ed\u548cCSDN\u8fd9\u4e24\u4e2a\u7f51\u7ad9 \u83dc\u9e1f\u6559\u7a0b(\u7f51\u7ad9) \u5176\u5b9e\u8981\u4e0e\u65f6\u4ff1\u8fdb\u8fd8\u662f\u8981\u591a\u770b\u770b\u522b\u4eba\u7684\u535a\u5ba2\u548c\u5b98\u65b9\u7684\u53c2\u8003\u624b\u518c\u8fd9\u624d\u662f\u6700\u91cd\u8981\u7684 7.3 \u811a\u672c\u8bed\u8a00 \u00b6 \u5f88\u591a\u516c\u53f8\u4e5f\u8981\u6c42\u4e86\u9700\u8981\u638c\u63e1\u81f3\u5c11\u4e00\u95e8\u811a\u672c\u8bed\u8a00\uff0c\u56e0\u4e3a\u811a\u672c\u8bed\u8a00\u771f\u7684\u4f1a\u4f18\u5316\u6211\u4eec\u7684\u6548\u7387\uff0c\u6709\u4e9b\u91cd\u590d\u67af\u71e5\u7684\u4e8b\u60c5\uff0c\u4e22\u7ed9\u811a\u672c\uff0c\u53ef\u80fd\u51e0\u79d2\u5c31\u597d\u4e86\uff0c\u6240\u4ee5\u5728\u5b66\u4e60\u7684\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u559c\u597d\u53bb\u5b66\u4e60\u4e00\u95e8\u811a\u672c\u8bed\u8a00\uff0c\u8fd9\u771f\u7684\u8fd8\u662f\u86ee\u91cd\u8981\u7684\uff0c\u6211\u8fd9\u8fb9\u7684\u8bdd\u662f\u63a8\u8350\u5b66\u4e60 python \uff0c\u56e0\u4e3a\u6211\u81ea\u8eab\u4f53\u4f1a\u611f\u89c9python\u662f\u771f\u7684\u4e0d\u9519\uff0c\u65e0\u8bba\u662f\u5199\u70b9 \u5c0f\u722c\u866b \u8fd8\u662f\u8bf4\u5904\u7406\u4e00\u4e9b\u6587\u4ef6\u76f8\u5173\u7684\u4e1c\u897f\uff0c\u90fd\u662f\u975e\u5e38\u7b80\u77ed\u7684\uff0c\u800c\u4e14\u73b0\u5728\u7684\u8d8b\u52bf\u90fd\u5728\u5f80python\u7684\u4eba\u5de5\u667a\u80fd\u3001\u673a\u5668\u5b66\u4e60\u3001\u6570\u636e\u6316\u6398\u8fd9\u8fb9\u504f\uff0c\u4f46\u662f\u603b\u800c\u8a00\u4e4b\uff0c\u8fd8\u662f\u6839\u636e\u81ea\u5df1\u7684\u559c\u597d\u6765 7.4 \u6700\u540e \u00b6 \u603b\u4e4b\uff0c\u7f16\u7a0b\u8fd9\u4e00\u6761\u8def\u9700\u8981\u7684\u662f\u575a\u6301\uff0c\u4e0d\u8981\u8f7b\u6613\u653e\u5f03\uff01 \u6700\u540e\u795d\u613f\u6bcf\u4e2aCoder\u90fd\u80fd\u5728\u5b66\u4e60\u7684\u8fc7\u7a0b\u4e2d\u627e\u5230\u81ea\u5df1\u60f3\u8981\u7684\uff01\u5b8c\u7ed3\u6492\u82b1 \u4e0a\u8ff0\u63d0\u5230\u7684\u4e66\u7c4d\u5728\u7b14\u8005\u7684\u4ea4\u6d41\u7fa4\u4e2d\u5747\u6709\u7535\u5b50\u6863\uff0c\u5982\u679c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u52a0\u7fa4\u4ea4\u6d41\u4ee5\u4e0b\uff1a 1055277728","title":"0\u57fa\u7840C\u8bed\u8a00\u901f\u901a"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#0c","text":"\u914d\u5957\u89c6\u9891\uff1a https://www.bilibili.com/video/BV1W34y1U7eK?spm_id_from=333.999.0.0","title":"0\u57fa\u7840\u901f\u901aC\u8bed\u8a00"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#c","text":"C \u8bed\u8a00\u662f\u4e00\u79cd\u901a\u7528\u7684\u9ad8\u7ea7\u8bed\u8a00\uff0c\u6700\u521d\u662f\u7531\u4e39\u5c3c\u65af\u00b7\u91cc\u5947\u5728\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u4e3a\u5f00\u53d1 UNIX \u64cd\u4f5c\u7cfb\u7edf\u800c\u8bbe\u8ba1\u7684\u3002C \u8bed\u8a00\u6700\u5f00\u59cb\u662f\u4e8e 1972 \u5e74\u5728 DEC PDP-11 \u8ba1\u7b97\u673a\u4e0a\u88ab\u9996\u6b21\u5b9e\u73b0\u3002 \u5728 1978 \u5e74\uff0c\u5e03\u83b1\u6069\u00b7\u67ef\u6797\u6c49\uff08Brian Kernighan\uff09\u548c\u4e39\u5c3c\u65af\u00b7\u91cc\u5947\uff08Dennis Ritchie\uff09\u5236\u4f5c\u4e86 C \u7684\u7b2c\u4e00\u4e2a\u516c\u5f00\u53ef\u7528\u7684\u63cf\u8ff0\uff0c\u73b0\u5728\u88ab\u79f0\u4e3a K&R \u6807\u51c6\u3002 UNIX \u64cd\u4f5c\u7cfb\u7edf\uff0cC\u7f16\u8bd1\u5668\uff0c\u548c\u51e0\u4e4e\u6240\u6709\u7684 UNIX \u5e94\u7528\u7a0b\u5e8f\u90fd\u662f\u7528 C \u8bed\u8a00\u7f16\u5199\u7684\u3002\u7531\u4e8e\u5404\u79cd\u539f\u56e0\uff0cC \u8bed\u8a00\u73b0\u5728\u5df2\u7ecf\u6210\u4e3a\u4e00\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e13\u4e1a\u8bed\u8a00\u3002","title":"\u4e00\u3001\u5173\u4e8eC\u8bed\u8a00"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#11","text":"\u6613\u4e8e\u5b66\u4e60\u3002 \u7ed3\u6784\u5316\u8bed\u8a00\u3002 \u5b83\u4ea7\u751f\u9ad8\u6548\u7387\u7684\u7a0b\u5e8f\u3002 \u5b83\u53ef\u4ee5\u5904\u7406\u5e95\u5c42\u7684\u6d3b\u52a8\u3002 \u5b83\u53ef\u4ee5\u5728\u591a\u79cd\u8ba1\u7b97\u673a\u5e73\u53f0\u4e0a\u7f16\u8bd1\u3002","title":"1.1 \u4f18\u70b9"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#12","text":"\u56e0\u4e3aC\u8bed\u8a00\u7ed9\u7f16\u5199\u8005\u592a\u5927\u6743\u9650\uff0c\u4f60\u53ef\u80fd\u628a\u63e1\u4e0d\u4f4f","title":"1.2 \u7f3a\u70b9"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#c_1","text":"C \u8bed\u8a00\u6700\u521d\u662f\u7528\u4e8e\u7cfb\u7edf\u5f00\u53d1\u5de5\u4f5c\uff0c\u7279\u522b\u662f\u7ec4\u6210\u64cd\u4f5c\u7cfb\u7edf\u7684\u7a0b\u5e8f\u3002\u7531\u4e8e C \u8bed\u8a00\u6240\u4ea7\u751f\u7684\u4ee3\u7801\u8fd0\u884c\u901f\u5ea6\u4e0e\u6c47\u7f16\u8bed\u8a00\u7f16\u5199\u7684\u4ee3\u7801\u8fd0\u884c\u901f\u5ea6\u51e0\u4e4e\u4e00\u6837\uff0c\u6240\u4ee5\u91c7\u7528 C \u8bed\u8a00\u4f5c\u4e3a\u7cfb\u7edf\u5f00\u53d1\u8bed\u8a00\u3002\u5e76\u4e14C\u8bed\u8a00\u4fbf\u4e8e\u7406\u89e3\uff0c\u4e5f\u662f\u5f88\u591a\u5176\u4ed6\u8bed\u8a00\u7684\u6bcd\u8bed\u8a00\uff0c\u901a\u8fc7\u5b66\u4e60C\u8bed\u8a00\uff0c\u6211\u4eec\u80fd\u591f\u5feb\u901f\u7684\u5bf9\u7f16\u7a0b\u8fdb\u884c\u4e00\u4e2a\u4e86\u89e3\uff0c\u5e76\u4e14\u540e\u7eed\u5728\u5b66\u4e60\u5176\u4ed6\u8bed\u8a00\u7684\u65f6\u5019(\u8bed\u6cd5)\u4f1a\u66f4\u52a0\u5bb9\u6613\uff0c\u6240\u4ee5C\u8bed\u8a00\u7684\u5b66\u4e60\u662f\u6709\u5fc5\u8981\u7684","title":"\u4e8c\u3001\u4e3a\u4ec0\u4e48\u8981\u5b66\u4e60C\u8bed\u8a00"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#cide","text":"","title":"\u4e09\u3001C\u8bed\u8a00\u7684IDE"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#31-ide","text":"IDE\u5c31\u662f\u4e00\u7cfb\u5217\u5f00\u53d1\u5de5\u5177\u7684\u7ec4\u5408\u5957\u88c5.\u8fd9\u5c31\u597d\u6bd4\u53f0\u5f0f\u673a\uff0c\u4e00\u4e2a\u53f0\u5f0f\u673a\u7684\u6838\u5fc3\u90e8\u4ef6\u662f\u4e3b\u673a\uff0c\u6709\u4e86\u4e3b\u673a\u5c31\u80fd\u72ec\u7acb\u5de5\u4f5c\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u5728\u8d2d\u4e70\u53f0\u5f0f\u673a\u65f6\uff0c\u5f80\u5f80\u8fd8\u8981\u9644\u5e26\u4e0a\u663e\u793a\u5668\u3001\u952e\u76d8\u3001\u9f20\u6807\u3001U\u76d8\u3001\u6444\u50cf\u5934\u7b49\u5916\u56f4\u8bbe\u5907\uff0c\u56e0\u4e3a\u53ea\u6709\u4e3b\u673a\u592a\u4e0d\u65b9\u4fbf\u4e86\uff0c\u5fc5\u987b\u6709\u5916\u8bbe\u624d\u80fd\u73a9\u7684\u723d\u3002 \u96c6\u6210\u5f00\u53d1\u73af\u5883\u4e5f\u662f\u8fd9\u4e2a\u9053\u7406\uff0c\u53ea\u6709\u7f16\u8bd1\u5668\u4e0d\u65b9\u4fbf\uff0c\u6240\u4ee5\u8fd8\u8981\u589e\u52a0\u5176\u4ed6\u7684\u8f85\u52a9\u5de5\u5177\u3002\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u6211\u4e00\u822c\u4e5f\u662f\u4f7f\u7528\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff0c\u800c\u4e0d\u662f\u5355\u72ec\u5730\u4f7f\u7528\u7f16\u8bd1\u5668\u3002","title":"3.1 \u5173\u4e8eIDE\uff1a"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#311","text":"\u6709\u65f6\u5019\u4e3a\u4e86\u79f0\u547c\u65b9\u4fbf\uff0c\u6216\u8005\u521d\u5b66\u8005\u6ca1\u6709\u4e25\u683c\u533a\u5206\u6982\u5ff5\uff0c\u4e5f\u4f1a\u5c06C\u8bed\u8a00\u96c6\u6210\u5f00\u53d1\u73af\u5883\u79f0\u4f5c\u201cC\u8bed\u8a00\u7f16\u8bd1\u5668\u201d\u6216\u8005\u201cC\u8bed\u8a00\u7f16\u7a0b\u8f6f\u4ef6\u201d\u3002\u8fd9\u91cc\u5927\u5bb6\u4e0d\u8981\u8ba4\u4e3a\u662f\u4e00\u79cd\u9519\u8bef\uff0c\u5c31\u628a\u5b83\u5f53\u505a\u201c\u4e61\u95f4\u4fd7\u8bed\u201d\u5427\u3002 (\u672c\u6559\u7a0b\u5efa\u7acb\u5728Windows\u5e73\u53f0) \u521d\u5b66\u8005\u7684\u8bdd\u4f7f\u7528IDE\u6211\u63a8\u8350 Devcpp \uff0c\u8fd9\u4e2aIDE\u975e\u5e38\u8f7b\u4fbf\u597d\u7528 \u5982\u679c\u4f60\u60f3\u6709\u4e00\u4e2a\u597d\u770b\u7684\u7f16\u8f91\u754c\u9762\uff0c\u90a3\u4e48\u6211\u5efa\u8bae\u4f60\u7528 VScode \u6216\u8005 Visual Studio \u5f53\u7136\u6211\u8fd8\u662f\u63a8\u8350\u4f7f\u7528 CLion","title":"3.1.1 \u901a\u4fd7\u7684\u79f0\u547c"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#_1","text":"\u4e00\u4e2aC\u7a0b\u5e8f\u5305\u542b\u4ee5\u4e0b\u90e8\u5206 \u9884\u5904\u7406\u6307\u4ee4 \u51fd\u6570 \u53d8\u91cf \u903b\u8f91\u4ee3\u7801 \u6ce8\u91ca \u4e3e\u4e2a\u6817\u5b50\uff1a C++ #include <stdio.h> //\u4e0a\u9762\u662f\u5934\u6587\u4ef6\uff0c\u4e0b\u9762\u662f\u51fd\u6570 int main () { printf ( \"Hello Mangata!\" ); return 0 ; } \u6211\u4eec\u5148\u6765\u5256\u6790\u4e00\u4e0b\u8fd9\u4e2aC\u7a0b\u5e8f \u7b2c\u4e00\u884c\u5c31\u662f\u4e00\u4e2a\u9884\u5904\u7406\u6307\u4ee4\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u540e\u9762\u8bb2\u7684\u5934\u6587\u4ef6 \u7b2c\u4e8c\u884c\u5c31\u662f\u4e00\u4e2a\u884c\u6ce8\u91ca\uff0c\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7 /* */ \u6765\u8fbe\u5230\u533a\u95f4\u5757\u6ce8\u91ca\u7684\u6548\u679c \u7b2c\u4e09\u884c\u5f00\u59cb\u5230\u7b2c\u4e03\u884c\u5c31\u662f\u4e00\u4e2a\u6807\u51c6\u7684\u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u540e\u9762\u8bb2\u7684\u4e3b\u51fd\u6570\uff0c\u8981\u8bb0\u4f4f\u4e00\u4e2aC\u7a0b\u5e8f\u4e00\u5b9a\u6709\u4e14\u53ea\u6709\u4e00\u4e2amain\u51fd\u6570 \u7b2c\u4e94\u884c\u662f\u4e00\u4e2a\u8f93\u51fa\u8bed\u53e5\uff0c\u8c03\u7528\u4e86 printf \u5e93\u51fd\u6570","title":"\u56db\u3001\u7a0b\u5e8f\u7ed3\u6784"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#_2","text":"","title":"\u4e94\u3001\u57fa\u672c\u8bed\u6cd5"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#51","text":"","title":"5.1 \u5934\u6587\u4ef6"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#511","text":"\u56e0\u4e3a\u5934\u6587\u4ef6\u91cc\u9762\u6709\u6211\u4eec\u9700\u8981\u7684\u4e00\u4e9b\u57fa\u672c\u51fd\u6570\uff0c\u6bd4\u5982\u8f93\u5165\u7684 scanf \u8f93\u51fa\u7684 printf \uff0c\u8fd9\u4e9b\u51fd\u6570\u524d\u4eba\u4eec\u5df2\u7ecf\u5e2e\u6211\u4eec\u5199\u597d\u4e86\uff0c\u4e0d\u5fc5\u6211\u4eec\u4ece\u5934\u5f00\u59cb\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5f15\u5165\u5934\u6587\u4ef6\u6765\u4f7f\u7528\u5e93\u51fd\u6570\uff0c\u53ef\u4ee5\u65b9\u4fbf\u6211\u4eec\u7684\u7a0b\u5e8f\u7f16\u5199","title":"5.1.1 \u4e3a\u4ec0\u4e48\u8981\u7528\u5934\u6587\u4ef6\u5462"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#512","text":"\u6211\u4eec\u901a\u8fc7 #include \u7684\u4e00\u79cd\u201c\u6307\u4ee4\u201d \uff0c\u5934\u6587\u4ef6\u7684\u5f15\u5165\u662f\u9884\u5904\u7406\u8bed\u53e5 #include \u53eb\u505a\u6587\u4ef6\u5305\u542b\u547d\u4ee4\uff0c\u7528\u6765\u5f15\u5165\u5bf9\u5e94\u7684\u5934\u6587\u4ef6\uff08 .h \u6587\u4ef6\uff09\u3002#include \u4e5f\u662fC\u8bed\u8a00\u9884\u5904\u7406\u547d\u4ee4\u7684\u4e00\u79cd\u3002","title":"5.1.2 \u600e\u4e48\u5f15\u5165\u5462"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#513-include","text":"C++ #include <xxx.h> #include \"xxx.h\" \u8fd9\u5c31\u662fC\u8bed\u8a00\u7684\u4e24\u79cd\u5f15\u5165\u5934\u6587\u4ef6\u7684\u683c\u5f0f\uff0c\u4e2d\u95f4\u7684\u7a7a\u683c\u4e0d\u662f\u5fc5\u987b\u7684(\ud83d\ude00)\uff0cxxx\u5c31\u662f\u4f60\u60f3\u7528\u7684\u5e93","title":"5.1.3 include\u683c\u5f0f"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#514","text":"\u5934\u6587\u4ef6 \u63cf\u8ff0 #include<stdio.h> \u8fd9\u662f\u4e00\u4e2a\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u7684\u5934\u6587\u4ef6 #include<math.h> \u8fd9\u662f\u6570\u5b66\u51fd\u6570\u7684\u5934\u6587\u4ef6 #include<string.h> \u8fd9\u662f\u5b57\u7b26\u4e32\u51fd\u6570\u7684\u5934\u6587\u4ef6 #include<time.h> \u8fd9\u662f\u65f6\u95f4\u51fd\u6570\u7684\u5934\u6587\u4ef6 #include<stdlib.h> \u5b9e\u7528\u5de5\u5177\u51fd\u6570\u7684\u5934\u6587\u4ef6 \u8fd9\u4e9b\u5927\u6982\u5c31\u662f\u5e73\u5e38\u4f7f\u7528\u8f83\u591a\u7684\u5934\u6587\u4ef6\u4e86\uff0c\u5173\u4e8e\u5934\u6587\u4ef6\u5177\u4f53\u7684\u54ea\u4e9b\u51fd\u6570\uff0c\u6211\u540e\u9762\u4f1a\u8bb2\u4e00\u4e9b\uff0c\u4f46\u662f\u4e5f\u53ea\u662f\u5e38\u7528\u7684\uff0c\u6240\u4ee5\u66f4\u591a\u7684\u4e1c\u897f\u8fd8\u9700\u8981\u540c\u5b66\u4eec\u81ea\u5df1\u53bb\u7f51\u4e0a\u62d3\u5c55 \u6211\u8fd9\u91cc\u653e\u4e00\u4e2a\u8fd9\u4e9b\u5934\u6587\u4ef6\u7684\u5e38\u7528\u51fd\u6570\u8fde\u63a5\uff1a https://blog.csdn.net/acm_Mercyking/article/details/50119289 \u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53bb\u81ea\u5df1\u62d3\u5c55\u4e00\u4e0b\u5662","title":"5.1.4 \u5e38\u7528\u7684\u5934\u6587\u4ef6"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#52","text":"","title":"5.2 \u6807\u51c6\u8f93\u5165\u8f93\u51fa\u51fd\u6570"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#521-scanf","text":"\u8fd9\u4e2a\u662f\u6807\u51c6\u8f93\u5165\u51fd\u6570\uff0c\u56e0\u4e3a\u8f93\u5165\u5bf9\u683c\u5f0f\u8981\u6c42\u5f88\u4e25\uff0c\u4e0d\u8fc7\u901f\u5ea6\u662f\u975e\u5e38\u5feb\u7684\uff0c\u4e0b\u9762\u662f scanf \u7684\u58f0\u660e C++ int scanf ( const char * format , ...) scanf \u524d\u9762\u90a3\u4e2aint\u662f\u8fd4\u56de\u7c7b\u578b\uff0c\u53ef\u4ee5\u4e0d\u7528\u7ba1\uff0c\u5982\u679c\u4f60\u771f\u60f3\u77e5\u9053\u7684\u8bdd\uff0c\u5176\u5b9e\u4e5f\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u6210\u529f\u8f93\u5165\u8d4b\u503c\u7684\u4e2a\u6570 \u5173\u4e8e\u62ec\u53f7\u91cc\u9762\uff0c\u81ea\u7136\u5c31\u662f\u4f20\u7684\u53c2\u6570\u54af\uff0c\u6211\u4eec\u4e00\u4e00\u6765\u770b\u62ec\u53f7\u91cc\u9762\u7684\u4e1c\u897f\uff0c\u91cc\u9762\u7684\u7ed3\u6784\u662f\u957f\u4e0b\u9762\u8fd9\u6837\u7684\uff1a C++ scanf ( \"<\u683c\u5f0f\u5316\u5b57\u7b26\u4e32>\" , < \u53c2\u91cf\u8868 > ); scanf ( \"%d\" , & a ); \u8fd9\u91cc\u7684\u4f8b\u5b50\u6211\u4eec\u7528\u7684\u662f\u4e00\u4e2a%d\uff0c\u8fd9\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u8fd9\u5c31\u8868\u793a\u6211\u4eec\u8f93\u5165\u7684\u6570\u636e\u7684\u7c7b\u578b\u662f\u4e00\u4e2aint\u6574\u5f62\u7684\uff0c\u9664\u4e86 %d \u6211\u4eec\u8fd8\u6709 %c \u3001 %lf \u3001 %lld \u7b49\u7b49\u4e00\u7cfb\u5217\u7684\u6807\u51c6\u5316\u8f93\u5165\u7684\u683c\u5f0f\uff0c\u5177\u4f53\u54ea\u79cd\u7c7b\u578b\u4f7f\u7528\u54ea\u79cd\u7b26\u53f7\uff0c\u90a3\u5c31\u8981\u6839\u636e\u4f7f\u7528\u60c5\u51b5\u770b\u5566\uff0c\u4e5f\u5c31\u662f\u4e0b\u9762\u6211\u4eec\u63d0\u5230\u7684\u6570\u636e\u7c7b\u578b\u3002","title":"5.2.1 scanf"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#522-printf","text":"\u6807\u51c6\u8f93\u51fa\u5176\u5b9e\u9053\u7406\u548c\u6807\u51c6\u8f93\u5165\u662f\u540c\u7406\u7684\uff0c\u6211\u4eec\u5148\u6765\u770b\u770b\u8fd9\u4e2a\u6807\u6ce8\u8f93\u51fa\u58f0\u660e C++ int printf ( const char * format , ...) \u540c\u7406\u51fd\u6570\u524d\u9762\u6709\u4e00\u4e2aint\u7684\u8fd4\u56de\u503c\uff0c\u5982\u679c\u51fd\u6570\u6210\u529f\u6267\u884c\uff0c\u90a3\u4e48\u5c31\u4f1a\u8fd4\u56de\u8f93\u51fa\u7684\u5b57\u7b26\u6570\uff0c\u5426\u5219\u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a\u8d1f\u6570 \u6211\u4eec\u518d\u6765\u770b\u8fd9\u4e2a printf \u7684\u4e00\u4e2a\u7ed3\u6784 C++ printf ( \"<\u683c\u5f0f\u5316\u5b57\u7b26\u4e32>\" , < \u53c2\u91cf\u8868 > ); printf ( \"%d \\n \" , a ); \u5176\u5b9e\u548c scanf \u6807\u51c6\u8f93\u5165\u7684\u7ed3\u6784\u662f\u5927\u540c\u5c0f\u5f02\u7684\uff0c \" \" \u4e2d\u95f4\u653e\u7684\u5c31\u662f\u683c\u5f0f\u5b57\u7b26\u5f62\u5f0f\uff0c\u53c2\u91cf\u8868\u5c31\u662f\u4f60\u60f3\u8f93\u51fa\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u662f\u4e00\u4e2a\u4e5f\u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u6ca1\u6709\uff0c\u6211\u4eec\u76f4\u63a5\u8f93\u51fa\u5b57\u7b26\u7c7b\u578b\u7684\u4e1c\u897f\u5c31\u4e0d\u9700\u8981\u53d8\u91cf\uff0c\u4f46\u662f\u8bf7\u6ce8\u610f\u5b58\u5728\u8f6c\u4e49\u7684\u60c5\u51b5\uff0c\u6bd4\u5982 '\\' \uff0c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53bb\u767e\u5ea6\u4e00\u4e0b","title":"5.2.2 printf"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#53","text":"\u4e3a\u4ec0\u4e48\u6211\u8981\u5355\u72ec\u5199\u4e00\u4e2a\u5173\u4e8e\u683c\u5f0f\u5316\u7684\u5355\u70b9\u5462\uff0c\u56e0\u4e3a\u8fd9\u624d\u662f\u683c\u5f0f\u5316\u8f93\u5165\u8f93\u51fa\u7684\u4e00\u4e2a**\u7279\u70b9**\u6216\u8005\u8bf4\u662f\u5c0f\u6280\u5de7 \u6211\u4eec\u6765\u770b scanf \u8fd9\u4e2a\u6807\u51c6\u8f93\u5165\uff0c\u5728\u62ec\u53f7\u91cc\u9762\u7684\u53cc\u5f15\u53f7\u91cc\u9762\u7684\u662f\u6211\u4eec\u683c\u5f0f\u5316\u8f93\u5165\u7684\u4e1c\u897f\uff0c\u6211\u4e3e\u4e2a\u6817\u5b50\uff1a \u5982\u679c\u6709\u4e00\u4e2a\u9898\u76ee\u662f\u8fd9\u6837\u7684\uff0c\u8981\u6c42\u4f60\u8f93\u5165\u4e00\u4e2a Mangata+(\u6570\u5b57)\uff0c\u7136\u540e\u628a\u6570\u5b57\u8f93\u51fa\u51fa\u6765\uff0c\u5982\u679c\u5b66\u8fc7\u5b57\u7b26\u4e32\u5904\u7406\u7684\u540c\u5b66\uff0c\u5e94\u8be5\u5c31\u4f1a\u89c9\u5f97\u90a3\u76f4\u63a5\u4e00\u4e2a\u6b63\u5219\uff0c\u6216\u8005\u628aMangata\u53bb\u6389\uff0c\u7136\u540e\u8f93\u51fa \u8fd9\u6837\u90fd\u53ef\u4ee5\uff0c\u751a\u81f3\u6765\u8bf4\u7b2c\u4e8c\u79cd\u66f4\u52a0\u597d\uff0c\u4f46\u662f\u5982\u679c\u8fd9\u4e2a\u6570\u5b57\u4e0d\u5927\uff0c\u5e76\u4e14\u8981\u6c42\u4f60\u5bf9\u8fd9\u4e2a\u6570\u5b57\u505a\u4e00\u4e9b\u8ba1\u7b97\u4e0a\u7684\u64cd\u4f5c\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u5c31\u80fd\u7528\u5230 scanf \u7684\u683c\u5f0f\u5316\u8f93\u5165\u4e86\uff1a C++ #include <stdio.h> int main () { int a ; scanf ( \"Mangata%d\" , & a ); printf ( \"%d \\n \" , a ); return 0 ; } \u518d\u6bd4\u5982\u8bf4\u5982\u679c\u6211\u4eec\u9700\u8981\u8f93\u51fa\u4e00\u4e2a\u65f6\u95f4\u4f8b\u5982\u8fd9\u683708:01\uff0c\u6709\u8fd9\u79cd\u524d\u7f6e\u96f6\uff0c\u901a\u8fc7\u5b57\u7b26\u4e32\u7684\u8f93\u51fa\u8981\u9ebb\u70e6\u5f97\u591a\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u683c\u5f0f\u5316\u8f93\u51fa: C++ #include <stdio.h> int main () { printf ( \"%02d:%02d\" , 8 , 1 ); return 0 ; } \u7531\u4e8e\u672c\u4e66\u53ea\u662f\u901f\u901a\u6559\u7a0b\uff0c\u6240\u4ee5\u6211\u4e0d\u5728\u505a\u8fc7\u591a\u7684\u5217\u4e3e\uff0c\u66f4\u591a\u7684\u4e1c\u897f\u8fd8\u662f\u8981\u9760\u540c\u5b66\u4eec\u81ea\u5df1\u5b66\u4e60\u5566","title":"5.3 \u5173\u4e8e'\u683c\u5f0f\u5316'"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#54","text":"","title":"5.4 \u6570\u636e\u7c7b\u578b"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#541","text":"\u7c7b\u578b \u5b58\u50a8\u5927\u5c0f \u503c\u7684\u8303\u56f4 char (\u9ed8\u8ba4\u5c31\u662f signed ) 1\u5b57\u8282 -128~127\u6216\u80050 ~ 255 unsigned char 1 \u5b57\u8282 0 ~ 255 signed char 1 \u5b57\u8282 -128~127 int 2 \u6216 4 \u5b57\u8282 -32768 \u5230 32767 \u6216 -2147483648 \u5230 2147483647 unsigned int 2 \u6216 4 \u5b57\u8282 0 ~ 65535 \u6216 0 ~ 4294967295 short 2 \u5b57\u8282 -32768 ~ 32767 unsigned short 2 \u5b57\u8282 0 ~ 65535 long 4 \u5b57\u8282 -2147483648 ~ 2147483647 unsigned long 4 \u5b57\u8282 0 ~ 4294967295 long long 8\u5b57\u8282 -9223372036854775808~9223372036854775807","title":"5.4.1 \u6574\u6570\u7c7b\u578b"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#542","text":"\u7c7b\u578b \u5b58\u50a8\u5927\u5c0f \u503c\u8303\u56f4 \u7cbe\u5ea6 float 4 \u5b57\u8282 1.2E-38 ~ 3.4E+38 6 \u4f4d\u6709\u6548\u4f4d double 8 \u5b57\u8282 2.3E-308 ~ 1.7E+308 15 \u4f4d\u6709\u6548\u4f4d long double 16 \u5b57\u8282 3.4E-4932 ~ 1.1E+4932 19 \u4f4d\u6709\u6548\u4f4d \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a**\u5173\u952e\u5b57** sizeof \u6765\u83b7\u5f97\u4e00\u4e2a\u7c7b\u578b\u6216\u8005\u8bf4\u540e\u9762\u7684\u53d8\u91cf\u7b49\u7b49\u7684\u5927\u5c0f \u4e3e\u4e2a\u6817\u5b50: C++ #include <stdio.h> int main () { printf ( \"%d \\n \" , sizeof ( char )); printf ( \"%d \\n \" , sizeof ( int )); printf ( \"%d \\n \" , sizeof ( long )); printf ( \"%d \\n \" , sizeof ( double )); return 0 ; } /* \u8f93\u51fa\u7ed3\u679c 1 4 4 8 */ \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 printf \u5e93\u51fd\u6570\u548c sizeof \u5173\u952e\u5b57 \uff0c\u524d\u8005\u662f\u6253\u5370\u51fd\u6570\uff0c\u540e\u8005\u662f\u8ba1\u7b97\u5bf9\u8c61\u5185\u5b58\u5927\u5c0f\u7684\u5173\u952e\u5b57 \u6211\u8fd9\u91cc\u5217\u4e3e\u4e00\u4e0b\u5e38\u7528\u7684\u51e0\u4e2a\u683c\u5f0f\u5316\u7b26\u53f7\uff1a \u7c7b\u578b \u8f93\u5165\u683c\u5f0f\u5316 \u8f93\u51fa\u683c\u5f0f\u5316 int %d %d char %c %c float %f %f double %lf %lf \u6216\u8005 %f long long %lld %lld \u5b57\u7b26\u4e32 %s %s","title":"5.4.2 \u6d6e\u70b9\u7c7b\u578b"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#543-void","text":"void\u7c7b\u578b\u53ef\u4ee5\u62ff\u6765\u4fee\u9970\u51fd\u6570\uff0c\u51fd\u6570\u4e5f\u5c31\u4e0d\u9700\u8981\u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u6211\u4eec\u4e4b\u540e\u5728\u8bb2 void\u7c7b\u578b\u53ef\u4ee5\u62ff\u6765\u4fee\u9970\u6307\u9488\uff0c\u8fd9\u79cd\u6307\u9488\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f3a\u5236\u8f6c\u6362\u6765\u5b9e\u73b0\u8f6c\u6362\u5230\u4efb\u610f\u6570\u636e\u7c7b\u578b \u6211\u8fd9\u91cc\u653e\u4e00\u5f20C\u8bed\u8a00\u5305\u542b\u7684\u6570\u636e\u7c7b\u578b\u7684\u56fe\uff0c\u4fbf\u4e8e\u5927\u5bb6\u7406\u89e3\u8bb0\u5fc6: \u5173\u4e8e\u5176\u4ed6\u6ca1\u8bb2\u7684\u7c7b\u578b\u5728\u4e0b\u9762\u6211\u4f1a\u4e00\u4e00\u8bb2\u89e3\u7684\uff0c\u4e0d\u7528\u62c5\u5fc3\u5566\uff01","title":"5.4.3 void \u7c7b\u578b"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#55","text":"","title":"5.5 \u53d8\u91cf"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#551","text":"\u53d8\u91cf\u540d\u7684\u5f00\u5934\u5fc5\u987b\u662f\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf\uff0c\u4e0d\u80fd\u662f\u6570\u5b57\u3002\u5b9e\u9645\u7f16\u7a0b\u4e2d\u6700\u5e38\u7528\u7684\u662f\u4ee5\u5b57\u6bcd\u5f00\u5934\uff0c\u800c\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u53d8\u91cf\u540d\u662f\u7cfb\u7edf\u4e13\u7528\u7684\u3002 \u53d8\u91cf\u540d\u4e2d\u7684\u5b57\u6bcd\u662f\u533a\u5206\u5927\u5c0f\u5199\u7684\u3002\u6bd4\u5982 a \u548c A \u662f\u4e0d\u540c\u7684\u53d8\u91cf\u540d\uff0cnum \u548c Num \u4e5f\u662f\u4e0d\u540c\u7684\u53d8\u91cf\u540d\u3002 \u53d8\u91cf\u540d\u7edd\u5bf9\u4e0d\u53ef\u4ee5\u662fC\u8bed\u8a00\u5173\u952e\u5b57\uff0c\u8fd9\u4e00\u70b9\u4e00\u5b9a\u8981\u8bb0\u4f4f\uff01(\u5173\u4e8e\u5173\u952e\u5b57\u53ef\u4ee5\u770b\u4e0b\u9762\u7684\u5173\u952e\u5b57\u8868\u683c\uff0c\u8bb0\u4f4f\u5e38\u7528\u7684\u5c31\u884c\u4e86) \u53d8\u91cf\u540d\u4e2d\u4e0d\u80fd\u6709\u7a7a\u683c\u3002\u8fd9\u4e2a\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u56e0\u4e3a\u4e0a\u9762\u6211\u4eec\u8bf4\u8fc7\uff0c\u53d8\u91cf\u540d\u662f\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u7684\u7ec4\u5408\uff0c\u6ca1\u6709\u7a7a\u683c\u8fd9\u4e00\u9879\u3002 \u5173\u4e8e\u7f16\u7a0b\u547d\u540d\u89c4\u8303\u60a8\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a\u535a\u5ba2: https://www.cnblogs.com/wfwenchao/p/5209197.html \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u7528 ~\u62fc\u97f3 ~ \u4e3e\u4e2a\u4f8b\u5b50: C++ int temp ; //\u5b9a\u4e49\u4e86\u4e00\u4e2aint\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u540d\u53ebtemp char str ; //\u5b9a\u4e49\u4e86\u4e00\u4e2achar\u6570\u636e\u7c7b\u578b\u7684\u6570\u636e\u53d8\u91cf\uff0c\u540d\u53ebstr double num ; //\u5b9a\u4e49\u4e86\u4e00\u4e2adouble\u6570\u636e\u7c7b\u578b\u7684\u6570\u636e\u53d8\u91cf\uff0c\u540d\u53ebnum \u53d8\u91cf\u5b9a\u4e49\u5c31\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\u5728\u4f55\u5904\u521b\u5efa\u53d8\u91cf\u7684\u5b58\u50a8\uff0c\u4ee5\u53ca\u5982\u4f55\u521b\u5efa\u53d8\u91cf\u7684\u5b58\u50a8\u3002\u53d8\u91cf\u5b9a\u4e49\u6307\u5b9a\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\uff0c\u5e76\u5305\u542b\u4e86\u8be5\u7c7b\u578b\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\u7684\u5217\u8868 \u6bd4\u5982\u4f60\u8981\u5b9a\u4e49\u56db\u4e2a\u53d8\u91cf\uff0c\u8fd9\u56db\u4e2a\u53d8\u91cf\u90fd\u662fint\u7c7b\u578b\u7684\uff0c\u4f60\u5c31\u53ef\u4ee5\u5c06\u4ed6\u4eec\u5199\u5728\u4e00\u8d77\uff0c\u4ed6\u4eec\u4e4b\u95f4\u7528,\u9694\u5f00\u672b\u5c3e\u4ee5;\u7ed3\u675f C++ int a , b , c , d ; int e = 10 ; \u4e0a\u8ff0\u7684\u4f8b\u5b50\u90fd\u662f\u5b9a\u4e49\uff0c\u90a3\u4e48\u4ec0\u4e48\u662f\u58f0\u660e\u5462\uff1f\uff0c\u6211\u4eec\u6765\u770b\u4e24\u4e2a\u4f8b\u5b50 \u4f7f\u7528\u5173\u952e\u5b57\u4fee\u9970 C++ extern int a ; //\u8868\u793a\u7684\u5176\u4ed6\u6587\u4ef6\u4ee5\u53ca\u5b9a\u4e49\u8fc7a\u8fd9\u4e2a\u53d8\u91cf\uff0c\u6211\u4eec\u8fd9\u91cc\u76f4\u63a5\u62ff\u6765\u4f7f\u7528 \u51fd\u6570\u58f0\u660e C++ void f ( int a ); //\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\u7684\u51fd\u6570\u58f0\u660e \u58f0\u660e\u548c\u5b9a\u4e49\u6700\u91cd\u8981\u7684\u533a\u522b\u5c31\u662f\uff1a \u5b9a\u4e49\u521b\u5efa\u4e86\u5bf9\u8c61\u5e76\u4e3a\u6b64\u5bf9\u8c61\u5206\u914d\u4e86\u5185\u5b58\uff0c\u800c\u58f0\u660e\u5e76\u672a\u5206\u914d\u5185\u5b58","title":"5.5.1 \u547d\u540d\u89c4\u5219"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#56","text":"\u8fd9\u4e2a\u4e1c\u897f\u4e0d\u96be\uff0c\u8bb2\u8d77\u6765\u4e5f\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u8fd8\u7b97\u6bd4\u8f83\u91cd\u8981\u6240\u4ee5\u5355\u72ec\u8bb2\u4e00\u4e0b\uff1a \u5176\u5b9e\u5728\u7a0b\u5e8f\u4e2d\u5b57\u8282\u957f\u5ea6\u8f83\u9ad8\u7684\u53d8\u91cf\u5bf9\u5b57\u8282\u957f\u5ea6\u8f83\u4f4e\u7684\u53d8\u91cf\u6709**\u4e00\u5b9a**\u7684\u517c\u5bb9\u6027\u7684\uff0c\u4f46\u662f\u4f4e\u7684\u5bf9\u9ad8\u7684\u53ef\u4e0d\u662f\u4e86\uff0c\u56e0\u4e3a\u5f88\u53ef\u80fd\u9020\u6210\u6570\u636e\u7684\u6ea2\u51fa\uff0c\u6216\u8005\u662f\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u4e4b\u95f4float\u548cint\uff0c\u6211\u4eec\u5f97\u5230\u7684\u662f\u4e00\u4e2afloat\u503c\uff0c\u4f46\u662f\u6211\u4eec\u60f3\u4fdd\u5b58\u4e00\u4e2aint\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u7528\u5230**\u5f3a\u5236\u8f6c\u6362**\uff0c\u6211\u4e3e\u4e2a\u6817\u5b50\uff1a C #include <stdio.h> int main () { float a = 1.234 ; int b = ( int ) a ; printf ( \"a = %f \\t b = %d \\n \" , a , b ); return 0 ; } \u8fd9\u4e2a\u6817\u5b50\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u4e0b\u9762\u5230\u5185\u5b58\u63a7\u5236\u7684\u65f6\u5019\u4f7f\u7528 malloc \u4e5f\u662f\u9700\u8981\u5f3a\u5236\u8f6c\u6362\u7684\u3002","title":"5.6 \u5f3a\u5236\u8f6c\u6362"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#57","text":"**\u5de6\u503c\uff08 lvalue \uff09\uff1a**\u6307\u5411\u5185\u5b58\u4f4d\u7f6e\u7684\u8868\u8fbe\u5f0f\u88ab\u79f0\u4e3a\u5de6\u503c\uff08 lvalue \uff09\u8868\u8fbe\u5f0f\u3002\u5de6\u503c\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u5de6\u8fb9\u6216\u53f3\u8fb9\u3002 **\u53f3\u503c\uff08 rvalue \uff09\uff1a**\u672f\u8bed\u53f3\u503c\uff08 rvalue \uff09\u6307\u7684\u662f\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u67d0\u4e9b\u5730\u5740\u7684\u6570\u503c\u3002\u53f3\u503c\u662f\u4e0d\u80fd\u5bf9\u5176\u8fdb\u884c\u8d4b\u503c\u7684\u8868\u8fbe\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53f3\u503c\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u53f3\u8fb9\uff0c\u4f46\u4e0d\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u5de6\u8fb9\u3002 \u53d8\u91cf\u662f\u5de6\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u5de6\u8fb9\u3002\u6570\u503c\u578b\u7684\u5b57\u9762\u503c\u662f\u53f3\u503c\uff0c\u56e0\u6b64\u4e0d\u80fd\u88ab\u8d4b\u503c\uff0c\u4e0d\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u5de6\u8fb9\u3002 \u4e3e\u4e2a\u6817\u5b50\uff1a C++ int a = 20 ; \u5728\u8fd9\u4e2a\u8bed\u53e5\u4e2da\u5c31\u662f\u4e00\u4e2a\u6307\u5411\u5185\u5b58\u7684\u53d8\u91cf\u4e5f\u5c31\u662f\u5de6\u503c\uff0c20\u5c31\u662f\u5b58\u50a8\u5728\u5185\u5b58\u67d0\u4e2a\u5730\u5740\u7684\u6570\u503c\uff0c\u6709\u4e86\u8fd9\u4e2a\u6982\u5ff5\u5c31\u80fd\u7406\u89e3\u4e0b\u9762\u7684\u8fd9\u4e2a\u8bed\u53e5\u4e86 C++ int a = 0 ; a = a + 1 ; printf ( \"%d \\n \" , a ); \u8fd9\u91cc\u6211\u4eec\u58f0\u660e\u4e86\u4e00\u4e2a`int`\u7c7b\u578b\u7684\u53d8\u91cfa\uff0c\u7136\u540e\u5728\u58f0\u660e\u7684\u65f6\u5019\u7ed9\u5b83\u5b9a\u4e49\u4e86\u521d\u503c\u4e3a0\uff0c\u7136\u540e\u7b2c\u4e8c\u4e2a\u8bed\u53e5\u6211\u4eec\u8ba9`a = a + 1`\uff0c\u6ce8\u610f\u6b64\u65f6\u5de6\u8fb9\u7684a\u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u4e5f\u5c31\u662f\u4e0a\u9762\u6211\u4eec\u8bf4\u7684\u5de6\u503c\uff0c\u53f3\u8fb9\u662fa\u7684\u503c\u52a0\u4e0a1\uff0c\u4e5f\u5c31\u662f\u53f3\u8fb9\u7684\u6574\u4f53\u6784\u6210\u4e86\u4e00\u4e2a\u53f3\u503c\uff0c\u5176\u5b9e\u5bf9\u4e8e\u5de6\u503c\u53f3\u503c\u4e0d\u5fc5\u7ea0\u7ed3\u592a\u591a\uff0c\u8fd9\u4e2a\u8bed\u53e5\u5b9e\u73b0\u7684\u6548\u679c\u5c31\u662fa\u81ea\u589e1\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6211\u4eec\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\u7684\u8bdd\u4f1a\u7ed9\u6211\u4eec\u6253\u5370\u4e00\u4e2a1\uff0c\u8fd9\u4e2a1\u5c31\u662f\u901a\u8fc7\u8fd0\u7b97\u540ea\u7684\u503c","title":"5.7 \u5de6\u503c\u53f3\u503c"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#58","text":"","title":"5.8 \u5e38\u91cf"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#581","text":"\u6ce8\u610f\u6b64\u6570\u503c\u5e38\u91cf\u975e\u5f7c\u6570\u503c\uff0c\u6211\u6b64\u5904\u6240\u8bf4\u7684\u5e38\u91cf\u662f\u5355\u7eaf\u7684\u4e00\u4e2a\u503c\uff0c\u6ca1\u6709\u540d\u5b57\u90a3\u79cd\uff0c\u6bd4\u5982 3 \u4ed6\u662f\u4e00\u4e2a\u6574\u5f62\u5e38\u91cf 0.3 \u662f\u4e00\u4e2a\u6d6e\u70b9\u5e38\u91cf\u518d\u6bd4\u5982\u8bf4 `'c'` \u5b83\u662f\u4e00\u4e2a\u5b57\u7b26\u5e38\u91cf `\"ccc\"` \u5b83\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\uff0c\u8fd9\u79cd\u5c31\u662f**\u6570\u503c\u5e38\u91cf**\u4e86\uff0c\u4e00\u822c\u53ea\u662f\u7528\u6765\u521d\u59cb\u5316\uff0c\u800c\u4e14\u8fd9\u79cd\u6570\u503c\u5e38\u91cf\u4e0d\u6613\u7ef4\u62a4\uff0c\u6bd4\u5982\u8bf4\u6211\u4eec\u5728\u4e00\u4e2a\u7a0b\u5e8f\u7684\u5f88\u591a\u5730\u65b9\u90fd\u7528\u4e86\u540c\u4e00\u4e2a\u5e38\u91cf\u90a3\u4e48\u5982\u679c\u4f60\u60f3\u4fee\u6539\u8fd9\u4e2a\u5e38\u91cf\u7684\u503c\uff0c\u7a0d\u5fae\u7b28\u70b9\u7684\u540c\u5b66\u53ef\u80fd\u4f1a\u4e00\u4e2a\u4e00\u4e2a\u7684\u66ff\u6362\uff0c\u6709\u7684\u540c\u5b66\u53ef\u80fd\u60f3\u5230\u4e86\u76f4\u63a5\u6587\u4ef6\u5168\u5c40\u66ff\u6362\uff0c\u4f46\u662f\u8fd9\u6837\u505a\u662f\u6709\u98ce\u9669\u7684\uff0c\u6bd4\u5982\u6211\u7684\u5e38\u91cf\u4e3a1\uff0c\u6211\u60f3\u628a\u5b83\u66ff\u6362\u4e3a2\uff0c\u4f46\u662f\u6211\u53ef\u80fd\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u5e38\u91cf\u662f1\u5f00\u5934\u7684\uff0c\u6bd4\u598212\uff0c\u90a3\u4e48\u5c31\u4f1a\u9020\u6210\u6570\u636e\u7d0a\u4e71\uff0c\u751a\u81f3\u6709\u4e9b\u53d8\u91cf\u91cc\u9762\u4e5f\u5305\u542b\u4e861\u90a3\u4e48\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u51fa\u9519\uff0c\u518d\u9000\u4e00\u6b65\u8bb2\uff0c\u7f16\u8bd1\u6ca1\u95ee\u9898\uff0c\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u4e5f\u4e0d\u4f1a\u548c\u9884\u671f\u4e00\u6837","title":"5.8.1 \u6570\u503c\u5e38\u91cf"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#582-define","text":"\u8bf4\u7684\u6d45\u663e\u6613\u61c2\u70b9\uff0cdefine\u5c31\u662f\u4e00\u4e2a\u6587\u672c\u66ff\u6362\uff0c\u683c\u5f0f\u5982\u4e0b C++ #define xxx yyy //\u8fbe\u5230\u7684\u6548\u679c\u5c31\u662f\u4e0b\u9762\u7684\u7a0b\u5e8f\u6240\u6709\u7528\u5230\u7684xxx\u90fd\u4f1a\u88ab\u66ff\u6362\u4e3ayyy #define x 10 //\u8fd9\u91cc\u5c31\u8868\u793ax\u662f\u4e00\u4e2a\u5e38\u91cf\uff0c\u5b83\u8868\u793a\u7684value\u662f10 \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7#define \u6765\u5b9e\u73b0\u5b8f\u51fd\u6570eg: C++ #define max(a,b) (a>b?a:b) #define \u662f\u4e00\u4e2a\u9884\u5904\u7406\u6307\u4ee4\uff0c\u6240\u4ee5\u5728\u4e66\u5199\u4ee3\u7801\u7684\u65f6\u5019\u8bf7\u5c06 #define \u653e\u5728\u7a0b\u5e8f\u7684\u9876\u90e8 #define \u540e\u9762\u6ca1\u6709**\u5206\u53f7** ! \u8bf7\u5c3d\u91cf\u5c11\u4f7f\u7528 #define \uff0c\u56e0\u4e3a #define \u76f8\u5f53\u4e8e\u4e00\u79cd\u6587\u672c\u66ff\u6362\uff0c\u5728\u4ee3\u7801\u884c\u6570\u8f83\u5c11\u53d1\u751f\u7684\u95ee\u9898\u8f83\u5c11\uff0c\u4f46\u662f\u5728\u4ee3\u7801\u91cf\u8f83\u5927\u7684\u65f6\u5019\u8fd9\u79cd\u5e38\u91cf\u5c31\u4f1a\u5b58\u5728\u4e00\u79cd\u6f5c\u5728\u7684\u5371\u9669->\u51b2\u7a81(\u5982\u679c\u62a5\u9519\u8fd8\u597d\uff0c\u6ca1\u6709\u62a5\u9519\u90a3\u5c31\u96be\u53d7\u4e86\uff0c\u5927\u6982\u7387\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u548c\u9884\u671f\u4e0d\u540c)","title":"5.8.2 define\u5e38\u91cf"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#583-const","text":"const\u662fconstant\u7684\u7f29\u5199\uff0c\u662f\u4e00\u4e2a\u4fee\u9970\u8bcd\u7528\u4e8e\u4fee\u9970\u4e00\u4e9b\u53d8\u91cf\uff0c\u901a\u8fc7const\u4fee\u9970\u7b26\u7684\u53d8\u91cf\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a**\u4e0d\u53ef\u53d8\u7684\u53d8\u91cf** eg: C++ const int a = 10 ; //\u8fd9\u5c31\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5e38\u91cf\uff0c\u540d\u53eba\uff0c\u503c\u4e3a10 \u901a\u8fc7 const \u4fee\u9970\u540e\u4e0d\u80fd\u66f4\u6539\u503c \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u4fee\u6539 const \u5b9a\u4e49\u7684\u5e38\u91cf","title":"5.8.3 const\u5173\u952e\u5b57"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#584-const","text":"\u5927\u4f53\u4e0a\u5206\u4e3a\u4e09\u7c7b \u4e00\u3001 const \u4fee\u9970\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\uff0c\u5219\u5185\u5bb9\u4e0d\u53ef\u53d8\uff0c\u4f46\u662f\u80fd\u901a\u8fc7\u4e00\u4e2a\u540c\u6570\u636e\u7c7b\u578b\u7684\u6307\u9488\u6765\u6539\u53d8\u503c C++ const int * a = 10 ; // \u8fd9\u6837\u7684\u5185\u5bb9\u4e0d\u53ef\u53d8 \u4e8c\u3001 const \u4fee\u9970\u6307\u9488\uff0c\u90a3\u4e48\u6307\u9488\u7684\u503c\u4e0d\u53ef\u53d8 C++ int a = 10 ; int * const b = & a ; \u6b64\u65f6\u7684 const \u4fee\u9970\u7684\u662f\u6307\u9488\uff0c\u90a3\u4e48\u6307\u9488\u6307\u5411\u7684\u5730\u5740\u4e0d\u53ef\u53d8\uff0c\u4e5f\u5c31\u662f\u6b64\u65f6\u7684b\u6307\u5411\u7684\u5730\u5740\u4e0d\u80fd\u8fb9\u53d8\uff0c\u4f46\u662f*b\u53ef\u53d8\uff0c\u8bf7\u540c\u5b66\u4eec\u8981\u60f3\u660e\u767d \u4e09\u3001 const \u4fee\u9970\u6307\u9488\u5e76\u4e14\u4fee\u9970\u7684\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u6307\u9488\u6307\u5411\u7684\u5730\u5740\u548c\u503c\u90fd\u4e0d\u53ef\u53d8 C++ int a = 10 ; const int * const b = & a ; \u6b64\u65f6\u7684b\u6307\u5411\u7684\u5730\u5740\u4e0d\u80fd\u66f4\u6539\uff0c\u5730\u5740\u4e0a\u7684\u503c*b\u4e5f\u4e0d\u80fd\u66f4\u6539","title":"5.8.4 \u901a\u8fc7const\u4fee\u6539\u6307\u9488"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#59","text":"","title":"5.9 \u5b58\u50a8\u7c7b"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#591-auto","text":"auto\u662f\u4e00\u79cd\u9ed8\u8ba4\u7684\u5b58\u50a8\u7c7b\uff0c\u4f5c\u7528\u8303\u56f4\u662f\u5c40\u90e8\uff0c\u4e00\u822c\u4e0d\u7528\u7ba1\uff0c\u751f\u547d\u5468\u671f\u548c\u4f5c\u7528\u57df\u90fd\u662f\u5c40\u90e8\u7684","title":"5.9.1 auto"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#592-static","text":"\u8fd9\u662f\u4e00\u4e2a\u9759\u6001\u7684\u5b58\u50a8\u7c7b\uff0c\u5b83\u6709\u70b9\u7279\u6b8a\u7684\u662f\u4ed6\u7684\u751f\u547d\u5468\u671f\u662f\u6574\u4e2a\u7a0b\u5e8f\u4ece\u5f00\u59cb\u5230\u7ed3\u675f\uff0c\u4f46\u662f\u5b83\u7684\u4f5c\u7528\u57df\u53ea\u662f\u5c40\u90e8 \u4e3e\u4e2a\u6817\u5b50: C++ #include <stdio.h> void f () { static int a = 0 ; a ++ ; printf ( \"%d \\n \" , a ); } int main () { for ( int i = 0 ; i < 5 ; ++ i ) { f (); } return 0 ; } \u4f60\u89c9\u5f97\u4f1a\u8f93\u51fa\u4ec0\u4e48\u5462\uff1f\u5bf9\u6ca1\u9519\uff0c\u8f93\u51fa C++ 1 2 3 4 5 \u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u5728\u51fd\u6570\u91cc\u9762\u5b9a\u4e49\u7684\u662f\u4e00\u4e2a\u9759\u6001\u53d8\u91cf\uff0c\u5b83\u7684\u58f0\u660e\u5468\u671f\u5c31\u662f\u4ece\u5b9a\u4e49\u5b83\u5230\u7a0b\u5e8f\u7ed3\u675f\uff0c\u6240\u4ee5\u8fd9\u91cc\u8f93\u51fa\u7684\u5185\u5bb9\u4e5f\u5c31\u4e0d\u96be\u7406\u89e3\u4e86","title":"5.9.2 static"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#593-register","text":"register \u5b58\u50a8\u7c7b\u7528\u4e8e\u5b9a\u4e49\u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d\u800c\u4e0d\u662f RAM \u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u3002\u8fd9\u610f\u5473\u7740\u53d8\u91cf\u7684\u6700\u5927\u5c3a\u5bf8\u7b49\u4e8e\u5bc4\u5b58\u5668\u7684\u5927\u5c0f\uff08\u901a\u5e38\u662f\u4e00\u4e2a\u8bcd\uff09\uff0c\u4e14\u4e0d\u80fd\u5bf9\u5b83\u5e94\u7528\u4e00\u5143\u7684 '&' \u8fd0\u7b97\u7b26\uff08\u56e0\u4e3a\u5b83\u6ca1\u6709\u5185\u5b58\u4f4d\u7f6e\uff09\u3002 \u518d\u6765\u7528\u4e00\u4e2a\u901a\u4fd7\u7684\u89e3\u91ca\uff1a \u6b64\u6bb5\u51fa\u81ea**\u300aC\u8bed\u8a00\u6df1\u5ea6\u5256\u6790\u300b**\uff0c\u5f88\u68d2\u7684\u4e00\u672c\u4e66\uff0c\u5efa\u8bae\u6709\u4e00\u5b9a\u57fa\u7840\u518d\u770b","title":"5.9.3 register"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#594-extern","text":"extern \u5b58\u50a8\u7c7b\u7528\u4e8e\u63d0\u4f9b\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u7684\u5f15\u7528\uff0c\u5168\u5c40\u53d8\u91cf\u5bf9\u6240\u6709\u7684\u7a0b\u5e8f\u6587\u4ef6\u90fd\u662f\u53ef\u89c1\u7684\u3002\u5f53\u60a8\u4f7f\u7528 extern \u65f6\uff0c\u5bf9\u4e8e\u65e0\u6cd5\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u4f1a\u628a\u53d8\u91cf\u540d\u6307\u5411\u4e00\u4e2a\u4e4b\u524d\u5b9a\u4e49\u8fc7\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002 \u5f53\u60a8\u6709\u591a\u4e2a\u6587\u4ef6\u4e14\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53ef\u4ee5\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528\u7684\u5168\u5c40\u53d8\u91cf\u6216\u51fd\u6570\u65f6\uff0c\u53ef\u4ee5\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528 extern \u6765\u5f97\u5230\u5df2\u5b9a\u4e49\u7684\u53d8\u91cf\u6216\u51fd\u6570\u7684\u5f15\u7528\u3002\u53ef\u4ee5\u8fd9\u4e48\u7406\u89e3\uff0c extern \u662f\u7528\u6765\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u58f0\u660e\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u6216\u51fd\u6570\u3002 \u603b\u7ed3\u4e00\u53e5\u8bddextern\u5c31\u662f\u4e3a\u4e86\u5728\u591a\u6587\u4ef6\u7f16\u7a0b\u7684\u65f6\u5019\u76f4\u63a5\u53d6\u53e6\u5916\u4e00\u4e2a\u6587\u4ef6\u7684\u53d8\u91cf \u5173\u4e8eextern\uff0c\u5176\u5b9e\u521d\u5b66\u8005\u4e0d\u5fc5\u8fc7\u4e8e\u5173\u7cfb\uff0c\u540e\u9762\u505a\u9879\u76ee\u5f00\u53d1\u7684\u65f6\u5019\u67e5\u627e\u67e5\u627e\u7528\u6cd5\u5373\u53ef\uff0c\u6211\u4eec\u8fd9\u91cc\u4e5f\u5c31\u4e0d\u8fc7\u591a\u5c55\u5f00\u4e86","title":"5.9.4 extern"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#510","text":"","title":"5.10 \u8fd0\u7b97\u7b26"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5101","text":"\u8fd0\u7b97\u7b26 \u6548\u679c \u4f8b\u5b50 + \u5bf9\u4e24\u4e2a\u6570\u8fdb\u884c\u76f8\u52a0 a = 1 + 2 => a= 3 - \u5bf9\u4e24\u4e2a\u6570\u8fdb\u884c\u76f8\u51cf a = 2 - 1 => a = 1 * \u5bf9\u4e24\u4e2a\u6570\u8fdb\u884c\u76f8\u4e58 a = 2 * 2 => a = 4 / \u5bf9\u4e24\u4e2a\u6570\u8fdb\u884c\u76f8\u9664 a = 10 / 2 => a = 5 % a\u5bf9b\u53d6\u6a21 a = 10 % 3 = > a = 1 ++ \u53d8\u91cf\u81ea\u589e1 a = 0; ++a => a = 1 -- \u53d8\u91cf\u81ea\u51cf1 a = 0 ; --a => a = -1","title":"5.10.1 \u7b97\u6570\u8fd0\u7b97"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5102","text":"\u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b == \u68c0\u67e5\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u503c\u662f\u5426\u76f8\u7b49\uff0c\u5982\u679c\u76f8\u7b49\u5219\u6761\u4ef6\u4e3a\u771f\u3002 (A == B) \u4e3a\u5047\u3002 != \u68c0\u67e5\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u503c\u662f\u5426\u76f8\u7b49\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u6761\u4ef6\u4e3a\u771f\u3002 (A != B) \u4e3a\u771f\u3002 > \u68c0\u67e5\u5de6\u64cd\u4f5c\u6570\u7684\u503c\u662f\u5426\u5927\u4e8e\u53f3\u64cd\u4f5c\u6570\u7684\u503c\uff0c\u5982\u679c\u662f\u5219\u6761\u4ef6\u4e3a\u771f\u3002 (A > B) \u4e3a\u5047\u3002 < \u68c0\u67e5\u5de6\u64cd\u4f5c\u6570\u7684\u503c\u662f\u5426\u5c0f\u4e8e\u53f3\u64cd\u4f5c\u6570\u7684\u503c\uff0c\u5982\u679c\u662f\u5219\u6761\u4ef6\u4e3a\u771f\u3002 (A < B) \u4e3a\u771f\u3002 >= \u68c0\u67e5\u5de6\u64cd\u4f5c\u6570\u7684\u503c\u662f\u5426\u5927\u4e8e\u6216\u7b49\u4e8e\u53f3\u64cd\u4f5c\u6570\u7684\u503c\uff0c\u5982\u679c\u662f\u5219\u6761\u4ef6\u4e3a\u771f\u3002 (A >= B) \u4e3a\u5047\u3002 <= \u68c0\u67e5\u5de6\u64cd\u4f5c\u6570\u7684\u503c\u662f\u5426\u5c0f\u4e8e\u6216\u7b49\u4e8e\u53f3\u64cd\u4f5c\u6570\u7684\u503c\uff0c\u5982\u679c\u662f\u5219\u6761\u4ef6\u4e3a\u771f\u3002 (A <= B) \u4e3a\u771f\u3002","title":"5.10.2 \u5173\u7cfb\u8fd0\u7b97"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5103","text":"\u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b && \u79f0\u4e3a\u903b\u8f91\u4e0e\u8fd0\u7b97\u7b26\u3002\u5982\u679c\u4e24\u4e2a\u64cd\u4f5c\u6570\u90fd\u975e\u96f6\uff0c\u5219\u6761\u4ef6\u4e3a\u771f\u3002 (A && B) \u4e3a\u5047\u3002 || \u79f0\u4e3a\u903b\u8f91\u6216\u8fd0\u7b97\u7b26\u3002\u5982\u679c\u4e24\u4e2a\u64cd\u4f5c\u6570\u4e2d\u6709\u4efb\u610f\u4e00\u4e2a\u975e\u96f6\uff0c\u5219\u6761\u4ef6\u4e3a\u771f\u3002 (A || B) \u4e3a\u771f\u3002 ! \u79f0\u4e3a\u903b\u8f91\u975e\u8fd0\u7b97\u7b26\u3002\u7528\u6765\u9006\u8f6c\u64cd\u4f5c\u6570\u7684\u903b\u8f91\u72b6\u6001\u3002\u5982\u679c\u6761\u4ef6\u4e3a\u771f\u5219\u903b\u8f91\u975e\u8fd0\u7b97\u7b26\u5c06\u4f7f\u5176\u4e3a\u5047\u3002 !(A && B) \u4e3a\u771f\u3002","title":"5.10.3 \u903b\u8f91\u8fd0\u7b97"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5104","text":"\u4ee5\u4e0b\u7684\u8fd0\u7b97\u90fd\u662f\u5c06\u6570\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u5728\u8fdb\u884c\u8fd0\u7b97\uff0c\u7136\u540e\u518d\u8f6c\u5316\u4e3a\u76f8\u5e94\u7684\u8fdb\u5236 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b & \u4e0e\u8fd0\u7b97 \u5168\u4e00\u5219\u4e00\uff0c\u5426\u5219\u4e3a\u96f6 3 & 6 = 2 | \u6216\u8fd0\u7b97 \u6709\u4e00\u5219\u4e00\uff0c\u5426\u5219\u4e3a\u96f6 3 & 6 = 7 ^ \u5f02\u6216\u8fd0\u7b97 \u4e0d\u540c\u4e3a\u4e00\uff0c\u76f8\u540c\u4e3a\u96f6 3 ^ 4 = 7 ~ \u53d6\u53cd\u8fd0\u7b97 \u96f6\u4e00\u98a0\u5012 ~4 = 3 << \u5de6\u79fb\u8fd0\u7b97 \u6548\u679c\u7b49\u4ef7\u5341\u8fdb\u5236\u4e2d\u4e58 \\(2^n\\) 5<<1 = 10 >> \u53f3\u79fb\u8fd0\u7b97 \u6548\u679c\u7b49\u4ef7\u5341\u8fdb\u5236\u4e2d\u9664 \\(2^n\\) 5>>1 = 2","title":"5.10.4 \u4f4d\u8fd0\u7b97"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5105","text":"\u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b sizeof() \u8fd4\u56de\u53d8\u91cf\u7684\u5927\u5c0f\u3002 sizeof(a) \u5c06\u8fd4\u56de 4\uff0c\u5176\u4e2d a \u662f\u6574\u6570\u3002 & \u8fd4\u56de\u53d8\u91cf\u7684\u5730\u5740\u3002 &a; \u5c06\u7ed9\u51fa\u53d8\u91cf\u7684\u5b9e\u9645\u5730\u5740\u3002 * \u6307\u5411\u4e00\u4e2a\u53d8\u91cf\u3002 *a; \u5c06\u6307\u5411\u4e00\u4e2a\u53d8\u91cf\u3002 ? : \u6761\u4ef6\u8868\u8fbe\u5f0f \u5982\u679c\u6761\u4ef6\u4e3a\u771f ? \u5219\u503c\u4e3a X : \u5426\u5219\u503c\u4e3a Y","title":"5.10.5 \u5176\u4ed6"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5106","text":"\u7c7b\u522b \u8fd0\u7b97\u7b26 \u7ed3\u5408\u6027 \u540e\u7f00 () [] -> . ++ - - \u4ece\u5de6\u5230\u53f3 \u4e00\u5143 + - ! ~ ++ - - (type)* & sizeof \u4ece\u53f3\u5230\u5de6 \u4e58\u9664 * / % \u4ece\u5de6\u5230\u53f3 \u52a0\u51cf + - \u4ece\u5de6\u5230\u53f3 \u79fb\u4f4d << >> \u4ece\u5de6\u5230\u53f3 \u5173\u7cfb < <= > >= \u4ece\u5de6\u5230\u53f3 \u76f8\u7b49 == != \u4ece\u5de6\u5230\u53f3 \u4f4d\u4e0e AND & \u4ece\u5de6\u5230\u53f3 \u4f4d\u5f02\u6216 XOR ^ \u4ece\u5de6\u5230\u53f3 \u4f4d\u6216 OR | \u4ece\u5de6\u5230\u53f3 \u903b\u8f91\u4e0e AND && \u4ece\u5de6\u5230\u53f3 \u903b\u8f91\u6216 OR || \u4ece\u5de6\u5230\u53f3 \u6761\u4ef6 ?: \u4ece\u53f3\u5230\u5de6 \u8d4b\u503c = += -= *= /= %=>>= <<= &= ^= \\|= \u4ece\u53f3\u5230\u5de6 \u9017\u53f7 , \u4ece\u5de6\u5230\u53f3","title":"5.10.6 \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u8868\u683c"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#511_1","text":"","title":"5.11 \u6761\u4ef6\u5224\u65ad"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5111-if","text":"C++ #include <stdio.h> int main () { if ( a > 10 ) { // \u8fd9\u91cc\u5c31\u662f\u4e00\u4e2aif\u5224\u65ad printf ( \"YES\" ); } else { printf ( \"NO\" ); } return 0 ; } if\u5224\u65ad\u5f88\u7b80\u5355\uff0c\u903b\u8f91\u503c\u4e3a\u771f\u90a3\u4e48\u5c31\u6267\u884cif\u4e0b\u65b9\u7684\u8bed\u53e5\uff0c\uff08 \u4f46\u662f\u6ce8\u610f\u5982\u679c\u6ca1\u6709\u5927\u62ec\u53f7\u7684\u8bdd\u90a3\u4e48\u53ea\u6267\u884c\u4e0b\u9762\u4e00\u884c\u7684\u5185\u5bb9 \uff09\uff0c\u6211\u4eec\u901a\u8fc7else\u5c31\u53ef\u4ee5\u5904\u7406\u903b\u8f91\u4e3a\u5047\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u8981\u5224\u65ad\u5f88\u591a\u79cd\u60c5\u51b5\u5462\uff0c\u8fd9\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e0b\u7ed3\u6784 C++ if ( xxx ) { } else if ( xxx ) { } else { } \u6ce8\u610f\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u8fd9\u91cc\u6211\u4eec\u80fd\u53d1\u73b0\u591a\u4e86\u4e2a else if \u7684\u5224\u65ad\uff0c\u806a\u660e\u7684\u4f60\u4eec\u5e94\u8be5\u731c\u5230\u4e86\uff0c\u8fd9\u4e2a else if \u5c31\u662f\u4e3a\u4e86\u5728\u5224\u65ad\u7684\u60c5\u51b5\u4e0d\u6b62\u4e24\u79cd\u7684\u65f6\u5019\u4f7f\u7528\u7684\uff0c\u5f53\u7136\u4f60\u53ea\u7528 if \u2026\u2026 else \u7684\u7ed3\u6784\u80fd\u4e0d\u80fd\u5b9e\u73b0\u5462\uff1f\u6309\u7406\u6765\u8bf4\u662f\u80fd\u7684\uff0c\u4e0d\u8fc7\u8fd9\u6837\u7684\u903b\u8f91\u7ed3\u6784\u8bbe\u8ba1\u7684\u5c31\u4f1a\u7a0d\u7a0d\u6709\u4e00\u70b9\u590d\u6742\u6216\u8005\u8bf4\u662f\u7e41\u7410\u3002","title":"5.11.1 if\u5224\u65ad"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5112","text":"C++ action ? ans1 : ans2 ; \u5927\u5bb6\u4e0d\u8981\u89c9\u5f97\u8fd9\u4e2a\u5f88\u96be\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u7b80\u5316\u7684 C++ if ( action ) { ans1 ; } else { ans2 ; } action\u8868\u793a\u7684\u662f\u903b\u8f91\u5224\u65ad\u7684\u503c\uff0cans1\u5c31\u8868\u793a\u5224\u65ad\u4e3a\u771f\u6240\u505a\u7684\u64cd\u4f5c\uff0cans2\u5c31\u8868\u793a\u5224\u65ad\u4e3a\u5047\u6240\u4f5c\u7684\u64cd\u4f5c","title":"5.11.2 \u4e09\u76ee\u8fd0\u7b97\u7b26"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#512_1","text":"\u5728\u8bb2\u4e0b\u9762\u51e0\u4e2a\u5faa\u73af\u7684\u65b9\u5f0f\u4e4b\u524d\uff0c\u6211\u5148\u6765\u8bf4\u8bf4\u4ec0\u4e48\u662f\u5faa\u73af\uff0c \u5faa\u73af\u5c31\u662f\u591a\u6b21\u6267\u884c\u540c\u4e00\u4e2a\u6d41\u7a0b \uff0c\u4e3a\u4ec0\u4e48\u662f\u6d41\u7a0b\u5462\uff0c\u56e0\u4e3a\u53ef\u80fd\u6bcf\u6b21\u64cd\u4f5c\u5f97\u5230\u7684\u503c\u4e0d\u4e00\u6837\uff0c\u6216\u8005\u8bf4\u91cc\u9762\u6709\u4e00\u4e9b\u5d4c\u5957\u5224\u65ad\u4ec0\u4e48\u7684\uff0c\u6700\u7ec8\u6bcf\u6b21\u7684\u64cd\u4f5c\u53ef\u80fd\u4e0d\u592a\u4e00\u6837\uff0c\u6bd4\u5982\u8bf4\u6211\u6709\u4e00\u4e2a\u5faa\u73af\uff0c\u6211\u5916\u9762\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u91cf\u4ed6\u7684\u521d\u59cb\u503c\u662f1\uff0c\u6211\u5728\u5faa\u73af\u91cc\u9762\u505a\u4e00\u4ef6\u4e8b\u60c5\u5982\u679c\u8fd9\u4e2a\u6570\u662f\u5947\u6570\u90a3\u4e48\u6211\u5c31\u8ba9\u5b83\u52a0\u4e00\uff0c\u5426\u5219\uff0c\u8ba9\u5b83\u4e0d\u53d8\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u5faa\u73af\u56db\u6b21\uff0c\u6700\u7ec8\u8fd9\u4e2a\u53d8\u91cf\u7684\u7ed3\u679c\u5c31\u662f2\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u770b\u770b\u8fd9\u4e2a\u4ee3\u7801\u7684for\u683c\u5f0f C++ #include <stdio.h> int main () { int a = 1 ; for ( int i = 0 ; i < 4 ; ++ i ) { if ( a % 2 == 1 ) a ++ ; else a = a ; //\u6ce8\u610f\u8fd9\u91cc\u7684else\u5176\u5b9e\u662f\u53ef\u4ee5\u5220\u6389\u7684 } printf ( \"%d \\n \" , a ); return 0 ; }","title":"5.12 \u5faa\u73af"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5121-for","text":"for\u5faa\u73af\u7531\u56db\u90e8\u5206\u7ec4\u6210\uff0c \u521d\u59cb\u5316 \uff0c \u6761\u4ef6\u5224\u65ad \uff0c \u8fed\u4ee3\u66f4\u65b0 \uff0c \u903b\u8f91\u64cd\u4f5c\u8bed\u53e5 \u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0bfor\u7684\u7ed3\u6784 C++ for ( \u521d\u59cb\u5316\u8bed\u53e5 ; \u6761\u4ef6\u5224\u65ad ; \u8fed\u4ee3\u66f4\u65b0 ) { \u903b\u8f91\u64cd\u4f5c\u8bed\u53e5 } //eg\uff1a for ( int i = 0 ; i < 10 ; ++ i ) { //pass } \u6ce8\u610f\u8fd9\u91cc\u7684\u521d\u59cb\u5316\u3001\u8fed\u4ee3\u66f4\u65b0\u3001\u903b\u8f91\u64cd\u4f5c\u90fd\u53ef\u4ee5\u7701\u7565\uff0c\u76f4\u63a5\u4e0d\u5199\u5373\u53ef\uff0c\u4f46\u662f\u6761\u4ef6\u5224\u65ad\u4e00\u5b9a\u8981\u5199\u4e0a\uff0c\u5e76\u4e14\u4e24\u4e2a ; \u4e0d\u80fd\u7701\u7565","title":"5.12.1 for\u5faa\u73af"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5122-while","text":"while\u5faa\u73af\u770b\u8d77\u6765\u5c31\u8981\u7b80\u5355\u4e00\u70b9(\u7ed3\u6784\u4e0a)\uff0c\u53ea\u6709**\u6761\u4ef6\u5224\u65ad**\u548c**\u903b\u8f91\u64cd\u4f5c** \u6211\u4eec\u6765\u770bwhile\u7684\u7ed3\u6784 C++ while ( \u6761\u4ef6\u5224\u65ad ) { \u903b\u8f91\u64cd\u4f5c\u8bed\u53e5 } //eg\uff1a int i = 0 ; while ( ++ i < 10 ) { //pass } \u5f53\u6761\u4ef6\u4e0d\u6ee1\u8db3\u7684\u65f6\u5019\u5c31\u4f1a\u8df3\u51fa\u5faa\u73af\uff0c\u4e5f\u5c31\u662f\u6761\u4ef6\u5224\u65ad\u4e3a\u771f\u5c31\u7ee7\u7eed\u5faa\u73af\uff0c\u6761\u4ef6\u5224\u65ad\u4e3a\u5047\u5c31\u8df3\u51fa\u5faa\u73af","title":"5.12.2 while\u5faa\u73af"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5123-dowhile","text":"do\u2026\u2026while \u5728\u7ed3\u6784\u4e0a\u4e5f\u53ea\u6709**\u6761\u4ef6\u5224\u65ad**\u548c**\u903b\u8f91\u64cd\u4f5c** \u6211\u4eec\u6765\u770b do\u2026\u2026while \u7ed3\u6784 C++ do { \u903b\u8f91\u64cd\u4f5c\u8bed\u53e5 } while ( \u6761\u4ef6\u5224\u65ad ) do\u2026\u2026while \u548c while \u7684\u533a\u522b\u5c31\u5728\u4e8e while \u7b2c\u4e00\u6b21\u5224\u65ad\u5982\u679c\u4e0d\u6ee1\u8db3\u90a3\u4e48\u5c31\u4e0d\u8fdb\u5165\u5faa\u73af\uff0c\u800c** do\u2026\u2026while \u4f1a\u5148\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c**\uff0c\u7136\u540e\u518d\u5224\u65ad\u662f\u5426\u7ee7\u7eed\u5faa\u73af \u4e3e\u4e2a\u6817\u5b50\uff1a \u5f53\u4f60\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u7684\u65f6\u5019\uff0c\u4ec0\u4e48\u65f6\u5019\u624d\u7b97\u8bfb\u5b8c\u4e86\u5462\uff1f\u4e00\u822c\u7684\u8bdd\u6587\u4ef6\u4f1a\u6709\u4e00\u4e2a\u7ed3\u675f\u7b26\uff08EOF\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u4f7f\u7528 do\u2026\u2026while \u7ed3\u6784\uff0c\u5148\u8bfb\uff0c\u8bfb\u5b8c\u540e\u5224\u65ad\u662f\u5426\u662f\u6587\u4ef6\u7ed3\u675f\u7b26\uff0c\u5982\u679c\u4e0d\u662f\u7684\u8bdd\u90a3\u4e48\u5c31\u7ee7\u7eed\u5faa\u73af\u3002","title":"5.12.3 do\u2026\u2026while\u5faa\u73af"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5124","text":"\u5d4c\u5957\u5faa\u73af \u6211\u4eec\u4e0a\u9762\u7684\u5faa\u73af\u90fd\u53ea\u662f\u4e00\u5c42\u5faa\u73af\uff0c\u5047\u5982\u4e00\u5c42\u5faa\u73af\u662f\u904d\u5386\u4e00\u884c\u6570\u636e\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u60f3\u904d\u5386\u4e00\u4e2a \\(n\\times n\\) \u7684\u77e9\u9635\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5c42\u5faa\u73af\u6765\u5b9e\u73b0\uff0c\u4f8b\u5982 C++ #include <stdio.h> int main () { int n ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 0 ; j < n ; ++ i ) { //op } } return 0 ; } \u8fd9\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4e8c\u5c42\u5faa\u73af \u6b7b\u5faa\u73af \u5f53\u6211\u4eec\u7684\u6761\u4ef6\u5224\u65ad\u8bbe\u8ba1\u4e0d\u5408\u7406\u6216\u8005\u8bf4\u5728for\u5faa\u73af\u4e2d\u6ca1\u6709\u8bbe\u7f6e\u5224\u65ad\u6761\u4ef6\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u6b7b\u5faa\u73af\uff0c\u6709\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u6b7b\u5faa\u73af\uff0c\u6709\u7684\u65f6\u5019\u6211\u4eec\u4e0d\u9700\u8981\uff0c\u6240\u4ee5\u662f\u5426\u9700\u8981\u8981\u6839\u636e\u4f60\u7684\u9700\u6c42\u6765\u770b\uff0c\u4e3e\u4e2a\u7b80\u5355\u7684\u6817\u5b50\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u5c31\u53ef\u4ee5\u7b80\u5355\u7684\u770b\u6210\u4e00\u4e2a\u6b7b\u5faa\u73af\uff0c\u4f46\u662f\u5728**\u5927\u90e8\u5206\u60c5\u51b5\u4e0b**\u6211\u4eec\u5e94\u8be5\u662f\u8981**\u907f\u514d\u51fa\u73b0\u6b7b\u5faa\u73af**\u7684\uff0c\u51fa\u73b0\u4e86\u6b7b\u5faa\u73af\u4e00\u5b9a\u8981\u597d\u597d\u68c0\u67e5\u5faa\u73af\u5904\u7684\u4ee3\u7801 break \u548c continue \u4e24\u8005\u90fd\u662f\u8df3\u8fc7\u5faa\u73af\uff0c\u4f46\u662f break \u662f\u8df3\u8fc7\u6574\u4e2a\u5269\u4e0b\u7684\u5faa\u73af\uff0c\u800c continue \u53ea\u662f\u8df3\u8fc7\u5f53\u524d\u8fd9\u6b21\u5faa\u73af\uff0c\u4e5f\u5c31\u662f\u8bf4\u540e\u9762\u5982\u679c\u8fd8\u6709\u5faa\u73af\u64cd\u4f5c\uff0c\u90a3\u4e48\u5c31\u7ee7\u7eed\u6267\u884c goto goto \u8bed\u53e5\u5728\u5f88\u591a\u8bfe\u7a0b\u6216\u8005\u662f\u4e00\u4e9b\u5b66\u4e60\u7684\u8d44\u6599\u91cc\u9762\u90fd\u5f88\u5c11\uff0c\u5f88\u591a\u7a0b\u5e8f\u5458\u4e5f\u89c9\u5f97\u8fd9\u4e2a\u662f\u4e2a\u8fa3\u9e21\u73a9\u610f\uff0c\u4f46\u662f\u6211\u89c9\u5f97 goto \u53ea\u8981\u7528\u5bf9\u4e86\u5730\u65b9\uff0c\u90a3\u4e48\u5c31\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u5de5\u5177\uff0c\u4f7f\u7528 goto \u7684\u65f6\u5019\u8bf7\u52a1\u5fc5\u4e0d\u8981\u5411\u4e0a\u8df3\uff0c\u5982\u679c\u4f60\u628a\u63e1\u4e0d\u4f4f\u7684\u8bdd\u90a3\u4e48\u4f60\u5c31\u4e0d\u8981\u4f7f\u7528\u8fd9\u4e2a\u8bed\u53e5\uff0c\u5728\u6211\u770b\u6765 goto \u4e00\u822c\u4f7f\u7528\u5728\u591a\u91cd\u5faa\u73af\u91cc\u9762\u60f3\u76f4\u63a5\u8df3\u51fa\u591a\u91cd\u5faa\u73af\uff0c\u800c\u4e0d\u662f\u5199\u591a\u4e2abreak\u3002 eg: C++ #include <stdio.h> int main () { for ( int i = 0 ; i < 10 ; ++ i ) { for ( int j = 0 ; j < 10 ; ++ j ) { for ( int k = 0 ; k < 10 ; ++ k ) { if ( i + j + k == 12 ) { goto out ; //\u6211\u4eec\u627e\u5230\u6211\u4eec\u60f3\u8981\u7684\u7b2c\u4e00\u4e2a\u7b54\u6848\u5c31\u76f4\u63a5goto\u8df3\u51fa\u4e09\u5c42\u5faa\u73af\uff0c\u8fd9\u4e2aout\u53ea\u662f\u4e00\u4e2a\u4ee3\u540d\u8bcd\uff0c\u968f\u610f\u66f4\u6539\uff0c\u4e0d\u8fc7\u8981\u548c\u4e0b\u9762\u5bf9\u5e94\u4e0a } } } } out : //\u8df3\u51fa\u7684\u5730\u65b9 printf ( \"YES\" ); return 0 ; } \u5173\u4e8e\u5faa\u73af\u6211\u4eec\u5c31\u8bb2\u5230\u8fd9\u91cc","title":"5.12.4 \u5faa\u73af\u63a7\u5236"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#513","text":"\u6570\u7ec4\u5c31\u662f\u5b58\u50a8\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u76f8\u540c\u7c7b\u578b\u5143\u7d20\u7684\u987a\u5e8f\u96c6\u5408\uff0c\u6ce8\u610f\u8fd9\u4e2a\u96c6\u5408\u91cc\u9762\u7684\u5143\u7d20\u7684\u7c7b\u578b\u90fd\u662f\u4e00\u6837\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7**\u6570\u7ec4\u540d+\u4e0b\u6807**\u7684\u65b9\u5f0f\u6765\u8bbf\u95ee\u6211\u4eec\u5b58\u50a8\u7684\u6570\u636e \u6570\u5b57\u7684\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u8ba1\u6570\u5230n-1\u7ed3\u675f\u7684 \u6570\u7ec4\u7684\u5143\u7d20\u90fd\u662f\u76f8\u7b49\u7684\u7c7b\u578b \u6570\u7ec4\u53ef\u4ee5\u4e0d\u6b62\u4e00\u7ef4 \u6570\u7ec4\u7684\u957f\u5ea6\u662f\u56fa\u5b9a\u7684","title":"5.13 \u6570\u7ec4"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5131","text":"\u6570\u636e\u7c7b\u578b + \u6570\u7ec4\u540d + \u6570\u7ec4\u5927\u5c0f eg: C++ int a [ 10 ]; \u8fd9\u91cc\u6211\u4eec\u5c31\u58f0\u660e\u4e86\u4e00\u4e2a10\u4e2aint\u6570\u636e\u5927\u5c0f\u7684\u6570\u7ec4\uff0c\u5047\u8bbe\u4e00\u4e2a int \u53604\u4e2a\u5b57\u8282\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7ec4\u5c31\u8981\u536040\u4e2a\u5b57\u8282\uff0c\u5176\u4ed6\u7c7b\u578b\u6bd4\u5982 char \u3001 double \u6216\u8005\u662f\u7ed3\u6784\u4f53\u7c7b\u578b\u90fd\u53ef\u4ee5\u8fd9\u6837\u58f0\u660e","title":"5.13.1 \u58f0\u660e"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5132","text":"\u6211\u4eec\u53ef\u4ee5\u5728\u58f0\u660e\u7684\u65f6\u5019\u5c31\u521d\u59cb\u5316 eg: C++ int a [ 3 ] = { 0 , 1 , 2 }; int b [ 3 ] = { 0 }; \u8fd9\u91cc\u6211\u4eec\u5c31\u5c06a\u6570\u7ec4\u7684\u4e09\u4e2a\u4f4d\u7f6e\u521d\u59cb\u5316\u4e3a0\u30011\u30012\u4e86\uff0cb\u6570\u7ec4\u8fd9\u6837\u505a\u53ef\u4ee5\u5168\u90e8\u521d\u59cb\u5316\u4e3a0\uff0c\u5f53\u7136\u4f60\u5982\u679c\u662f\u5b9a\u4e49\u4e86\u7684\u662f\u5168\u5c40\u6570\u7ec4\u90a3\u4e48\u5b83\u4f1a\u81ea\u52a8\u7ed9\u4f60\u521d\u59cb\u5316\u4e3a0\uff0c\u4f46\u662f\u5c40\u90e8\u7684\u8bdd\uff0c\u4f60\u4e0d\u521d\u59cb\u5316\u90a3\u4e48\u5c31\u53ef\u80fd\u4f1a\u7ed9\u4f60\u4e00\u4e9b\u968f\u673a\u503c\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u58f0\u660e\u540e\u521d\u59cb\u5316 \u2460memset()\u51fd\u6570\u521d\u59cb\u5316 \u6211\u4eec\u5148\u6765\u770b\u770b\u8fd9\u4e2a\u51fd\u6570\u7684\u58f0\u660e\uff1a C++ void * memset ( void * str , int c , size_t n ) \u7b2c\u4e00\u4e2a\u4f20\u7684\u53c2\u6570\u662f\u4e00\u4e2a void \u7c7b\u578b\u6307\u9488\uff0c\u4e5f\u5c31\u662f\u4efb\u4f55\u6570\u636e\u7c7b\u578b\u90fd\u53ef\u4ee5\uff0c\u7b2c\u4e8c\u4e2a\u662f int \u7c7b\u578b\u7684\uff0c\u4e5f\u5c31\u662f\u521d\u59cb\u5316\u7684\u503c\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u8981\u521d\u59cb\u5316\u7684\u5b57\u8282\u6570\uff0c\u6211\u4e3e\u4e2a\u6817\u5b50 eg: C++ #include <stdio.h> #include <string.h> int a [ 10 ]; int main () { memset ( a , -1 , sizeof a ); printf ( \"%d \\n \" , a [ 0 ]); printf ( \"%d \\n \" , -1 ); return 0 ; } \u2461\u5faa\u73af\u521d\u59cb\u5316 \u8fd8\u8bb0\u5f97\u6211\u4eec\u4e0a\u9762\u8bb2\u7684\u5faa\u73af\u5417\uff0c\u8fd9\u91cc\u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5faa\u73af\u6765\u4e00\u4e2a\u4e00\u4e2a\u904d\u5386\u8fd9\u4e2a\u6570\u7ec4\uff0c\u7136\u540e\u624b\u52a8\u7ed9\u5b83\u8d4b\u503c eg: C++ #include <stdio.h> #include <string.h> int a [ 10 ]; int main () { for ( int i = 0 ; i < 10 ; ++ i ) { a [ i ] = i ; } return 0 ; } \u8fd9\u91cc\u6211\u4eec\u7528\u5faa\u73af\u5c06a\u6570\u7ec4\u7684\u503c\u521d\u59cb\u5316\u4e86\uff0c\u5f53\u7136\u4f60\u60f3\u600e\u4e48\u521d\u59cb\u5316\u90fd\u968f\u4f60","title":"5.13.2 \u521d\u59cb\u5316"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#514_1","text":"","title":"5.14 \u51fd\u6570"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5141","text":"\u5728\u8bb2\u89e3\u51fd\u6570\u4e4b\u524d\u6211\u5148\u8bf4\u4e00\u4e0b**\u4f5c\u7528\u57df**\uff0c\u8fd9\u6837\u80fd\u66f4\u597d\u5730\u7406\u89e3\u7a0b\u5e8f\uff1f\uff08\u5b58\u7591\uff09 \u4e4b\u524d\u6211\u4eec\u8bb2\u5230\u8fc7\u5b9a\u4e49\u53d8\u91cf\uff0c\u6211\u4eec\u4e00\u822c\u662f\u5199\u5728 main \u7684\u5927\u62ec\u53f7\u91cc\u9762\u7684\uff0c\u90a3\u4f60\u6709\u6ca1\u6709\u60f3\u8fc7\u8fd9\u4e9b\u53d8\u91cf\u4ec0\u4e48\u65f6\u5019\u5c31\u6ca1\u7528\u4e86\u5462\uff1f\u7b54\u6848\u662f\u5f53 main \u51fd\u6570\u8fd0\u884c\u5b8c\u6210\u540e\u5c31\u4f1a\u5931\u6548\uff0c\u4e00\u822c\u6765\u8bf4\u4f53\u4f1a\u4e0d\u662f\u5f88\u660e\u663e\uff0c\u56e0\u4e3a\u6211\u4eec\u5c31\u53ea\u662f\u4f7f\u7528 main \u51fd\u6570\uff0c\u7a0b\u5e8f\u4e5f\u5c31\u8fd0\u884c\u8fd9\u4e2a(\u660e\u9762\u4e0a\u7684)\uff0c\u4e0b\u9762\u662f\u5224\u65ad\u4f5c\u7528\u57df\u7684\u4e00\u4e2a\u5c0ftrick \u5728\u4e00\u4e2a\u5927\u62ec\u53f7\u91cc\u9762\u5b9a\u4e49\u7684\u53d8\u91cf\u7b49\u4e1c\u897f\u5c31\u5c5e\u4e8e\u8fd9\u6837\u4e00\u4e2a\u4f5c\u7528\u57df\uff0c\u8d85\u51fa\u8fd9\u4e2a\u5927\u62ec\u53f7\u53d8\u91cf\u7b49\u96f6\u65f6\u7684\u4e1c\u897f\u81ea\u52a8\u9500\u6bc1(\u4f46\u662f\u4f60\u7533\u8bf7\u7684\u7a7a\u95f4\u4e0d\u4f1a\u9500\u6bc1\u6216\u8005\u8bf4static\u7c7b\u578b\u7684\u4e0d\u4f1a\u9500\u6bc1) \u5927\u62ec\u53f7\u53ef\u4ee5\u5d4c\u5957\uff0c\u4e5f\u5c31\u662f\u4f5c\u7528\u57df\u6709\u5f88\u591a\u5c42\uff0c\u6ce8\u610f\u6b64\u65f6\u9ad8\u4e00\u7ea7\u7684\u4f5c\u7528\u57df\u7684\u53d8\u91cf\u80fd\u5728\u4f4e\u7ea7\u7684\u4f5c\u7528\u57df\u4e2d\u4f7f\u7528\uff0c\u4f46\u662f\u5982\u679c\u4f4e\u4f5c\u7528\u57df\u6709\u4e00\u4e2a\u548c\u9ad8\u7ea7\u7684\u4f5c\u7528\u57df\u76f8\u540c\u7684\u53d8\u91cf\u540d\u90a3\u4e48\u4f60\u5728\u4f4e\u4f5c\u7528\u57df\u4f7f\u7528\u8be5\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u4f7f\u7528\u7684\u662f\u5f53\u524d\u4f4e\u4f5c\u7528\u57df\u7684\u53d8\u91cf\u7684\u503c\uff0c\u8fd9\u4e5f\u5c31\u662f**\u53d8\u91cf\u9690\u85cf** \u4e0d\u653e\u5728\u5927\u62ec\u53f7\u91cc\u9762\u7684\u53d8\u91cf\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u5168\u5c40\u53d8\u91cf\u4e00\u822c\u653e\u5728\u7a0b\u5e8f\u7684\u9876\u90e8\uff0c\u8868\u793a\u7684\u662f\u8fd9\u4e2a\u53d8\u91cf\u8d2f\u7a7f\u6574\u4e2a\u7a0b\u5e8f\uff0c\u4e0d\u4f1a\u6d88\u4ea1\uff0c\u4f46\u662f\u6ce8\u610f\u5168\u5c40\u53d8\u91cf\u662f\u4f4d\u4e8e**\u5806\u533a**\u7684","title":"5.14.1 \u4f5c\u7528\u57df"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5142","text":"\u51fd\u6570\u662f\u5b8c\u6210\u7a0b\u5e8f\u4e2d\u4e00\u90e8\u5206\u5c0f\u529f\u80fd\u7684\u4e00\u4e2a\u5b50\u7a0b\u5e8f\uff1f\uff0c\u6216\u8005\u8bf4\u662f\u5c06\u4e00\u6bb5\u5b8c\u6210\u4e00\u4e2a\u4efb\u52a1\u7684\u8bed\u53e5\u7684\u4e00\u4e2a\u6574\u5408\u3002","title":"5.14.2 \u51fd\u6570\u662f\u4ec0\u4e48"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5143","text":"\u4f7f\u7528\u51fd\u6570\u53ef\u4ee5\u7701\u53bb\u591a\u6b21\u7f16\u5199\u91cd\u590d\u4ee3\u7801\uff0c\u53ef\u4ee5\u51cf\u5c11\u4ee3\u7801\u7684\u7801\u91cf \u63d0\u9ad8\u7a0b\u5e8f\u7684\u53ef\u8bfb\u6027\uff0c\u65b9\u4fbf\u540e\u7eed\u7684\u7ef4\u62a4\u5347\u7ea7","title":"5.14.3 \u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u51fd\u6570\uff1f"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5144","text":"C++ ( modified_type ) return_type function_name ( parameter list ) { //function action } \u6211\u4eec\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\u4e00\u6b65\u4e00\u6b65\u89e3\u6790\u8fd9\u4e2a\u7ed3\u6784 modified_type \u8fd9\u4e2a\u8868\u793a\u7684\u662f\u4fee\u9970\u8fd9\u4e2a\u51fd\u6570\u7684\u4fee\u9970\u8bcd\uff0c\u901a\u5e38\u7684\u4fee\u9970\u8bcd\u6709\uff1a \u2460 static \u2461 extern \u2462 inline \u2026\u2026 \u8fd9\u4e2a\u9009\u9879\u662f\u53ef\u6709\u53ef\u65e0\u7684\uff0cstatic\u4fee\u9970\u7684\u51fd\u6570\u8868\u793a\u7684\u662f**\u53ea\u5728\u672c\u6587\u4ef6\u8bbf\u95ee**\uff0c\u88ab\u5176\u4fee\u9970\u7684\u51fd\u6570\u4e5f\u6210\u4e3a\u5185\u90e8\u51fd\u6570\uff0cextern\u4fee\u9970\u7684\u51fd\u6570\u53ef\u4ee5\u5728\u522b\u7684\u6587\u4ef6\u4e2d\u8c03\u7528\uff0c\u88ab\u5176\u58f0\u660e\u7684\u51fd\u6570\u4e5f\u6210\u4e3a\u5916\u90e8\u51fd\u6570\uff0c\u81f3\u4e8e\u540e\u9762\u7684\u90a3\u4e2ainline\u5219\u8868\u793a\u662f\u5185\u655b\u51fd\u6570\uff0c\u5185\u8054\u6269\u5c55\u662f\u7528\u6765**\u6d88\u9664\u51fd\u6570\u8c03\u7528**\u65f6\u7684\u65f6\u95f4\u5f00\u9500\u3002\u5b83\u901a\u5e38\u7528\u4e8e\u9891\u7e41\u6267\u884c\u7684\u51fd\u6570\uff0c\u5bf9\u4e8e\u5c0f\u5185\u5b58\u7a7a\u95f4\u7684\u51fd\u6570\u975e\u5e38\u53d7\u76ca\u3002\u4f46\u662f\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9 1.\u9012\u5f52\u51fd\u6570\u4e0d\u80fd\u5b9a\u4e49\u4e3a\u5185\u8054\u51fd\u6570 2.\u5185\u8054\u51fd\u6570\u4e00\u822c\u9002\u5408\u4e8e\u4e0d\u5b58\u5728while\u548cswitch\u7b49\u590d\u6742\u7684\u7ed3\u6784\u4e14\u53ea\u67091~5\u6761\u8bed\u53e5\u7684\u5c0f\u51fd\u6570\u4e0a\uff0c\u5426\u5219\u7f16\u8bd1\u7cfb\u7edf\u5c06\u8be5\u51fd\u6570\u89c6\u4e3a\u666e\u901a\u51fd\u6570\u3002 3.\u5185\u8054\u51fd\u6570\u53ea\u80fd\u5148\u5b9a\u4e49\u540e\u4f7f\u7528\uff0c\u5426\u5219\u7f16\u8bd1\u7cfb\u7edf\u4e5f\u4f1a\u628a\u5b83\u8ba4\u4e3a\u662f\u666e\u901a\u51fd\u6570\u3002 4.\u5bf9\u5185\u8054\u51fd\u6570\u4e0d\u80fd\u8fdb\u884c\u5f02\u5e38\u7684\u63a5\u53e3\u58f0\u660e\u3002 \u81f3\u4e8e\u5176\u4ed6\u7684\u672c\u6587\u4e0d\u505a\u8fc7\u591a\u7684\u5c55\u5f00\uff0c\u8bf7\u8bf8\u4f4d\u81ea\u884c\u67e5\u627e\u8d44\u6599","title":"5.14.4 \u51fd\u6570\u7ed3\u6784"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5145","text":"\u51fd\u6570\u7684\u58f0\u660e\u4e0d\u9700\u8981\u6211\u4eec\u5b9e\u73b0\u51fd\u6570\u7684\u5177\u4f53\u8bed\u53e5\u5417\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5199\u597d\u51fd\u6570\u7ed3\u6784\u7684\u7b2c\u4e00\u884c\u5373\u53ef\uff0c\u4e3e\u4e2a\u6817\u5b50 C++ int function ( int a , int b ); int function ( int , int ); \u6ce8\u610f\uff0c\u4e0a\u9762\u7684\u4e24\u79cd\u58f0\u660e\u662f\u7b49\u4ef7\u7684\uff0c\u6211\u4eec\u5728\u58f0\u660e\u7684\u65f6\u5019\u5176\u5b9e\u6ca1\u5fc5\u8981\u7ed9\u51fa\u5f62\u53c2\u7684\u540d\u5b57\uff0c\u6211\u4eec\u53ea\u9700\u8981\u660e\u786e\u7ed9\u51fa\u6570\u636e\u7c7b\u578b\u4ee5\u53ca\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u5373\u53ef","title":"5.14.5 \u51fd\u6570\u58f0\u660e"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5146","text":"\u5bf9\u4e8e\u51fd\u6570\u7684\u5b9a\u4e49\u7684\u8bdd\uff0c\u5c31\u9700\u8981\u6211\u4eec\u5b8c\u5b8c\u6574\u6574\u7684\u5199\u5b8c\u51fd\u6570\u4e86\uff0c\u6211\u4e3e\u4e2a\u6817\u5b50 C++ int function ( int a , int b ) { int c = a + b ; return c ; } \u4e0a\u9762\u7684\u8fd9\u4e2a\u6817\u5b50\u5c31\u662f\u5b9e\u73b0\u4e86\u4e00\u4e2a\u52a0\u6cd5\u51fd\u6570\uff0c\u6211\u4eec\u6765\u770b\u8fd4\u56de\u7c7b\u578b\u662fint\uff0c\u6211\u4eec\u4f20\u5165\u4e86\u4e24\u4e2a\u53c2\u6570a\u548cb\uff0c\u6ce8\u610f\u6b64\u65f6\u7684\u5706\u62ec\u53f7\u540e\u9762\u6ca1\u6709\u5206\u53f7\uff0c\u51fd\u6570\u91cc\u9762\u5219\u662f\u6211\u4eec\u7684\u903b\u8f91\u8bed\u53e5\uff0c\u8fd9\u91cc\u7684\u8bdd\u5c31\u662f\u5c06\u4f20\u5165\u7684\u4e24\u4e2a\u53c2\u6570\u76f8\u52a0\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2aint\u7c7b\u578b\u7684\u503c\u3002\u51fd\u6570\u5176\u5b9e\u5c31\u662f**\u901a\u8fc7\u4f20\u5165\u7684\u4e00\u4e9b\u53c2\u6570\u6216\u8005\u4e0d\u7528\u53c2\u6570\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u903b\u8f91\u64cd\u4f5c\u5b9e\u73b0\u67d0\u79cd\u7279\u5b9a\u4efb\u52a1\uff0c\u8fd9\u79cd\u4efb\u52a1\u7684\u7ed3\u679c\u6211\u4eec\u53ef\u4ee5\u7ed9\u4e00\u4e2a\u8fd4\u56de\u503c\u90a3\u4e48\u5c31\u9700\u8981\u6ce8\u610f\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u5982\u679c\u4e0d\u9700\u8981\u8fd4\u56de\u503c\uff0c\u90a3\u4e48\u5c31\u5b9a\u4e49\u4e3avoid\u7c7b\u578b\u7684\u5373\u53ef**","title":"5.14.6 \u51fd\u6570\u5b9a\u4e49"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#515","text":"\u5176\u5b9e\u6307\u9488\u624d\u662fC/C++\u7684\u6838\u5fc3\u5185\u5bb9\uff0c\u672c\u6765\u662f\u60f3\u653e\u5728\u6570\u7ec4\u540e\u9762\u63a5\u7740\u8bb2\uff0c\u4f46\u662f\u6015\u8bfb\u8005\u5c06\u4e24\u8005\u6df7\u6dc6\u4e86\uff0c\u6216\u8005\u8bf4\u4e0d\u80fd\u66f4\u597d\u7684\u7406\u89e3\u6307\u9488\uff0c\u6240\u4ee5\u6211\u653e\u5728\u4e86\u51fd\u6570\u7684\u540e\u9762\u3002","title":"5.15 \u6307\u9488"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5151","text":"\u7b80\u5355\u70b9\u8bf4\u6307\u9488\u5176\u5b9e\u5c31\u662f**\u5b58\u50a8\u5730\u5740**\u7684\u53d8\u91cfor\u5e38\u91cf","title":"5.15.1 \u4ec0\u4e48\u662f\u6307\u9488\uff1f"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5152","text":"C \u6570\u636e\u7c7b\u578b * \u6307\u9488\u540d //\u4f8b\u5982 int * a ; //\u6307\u9488\u7c7b\u578b\u4e3aint * \u6307\u9488\u6307\u5411\u7684\u7c7b\u578b\u662fint char * b ; //\u6307\u9488\u7c7b\u578b\u4e3achar * \u6307\u9488\u6307\u5411\u7684\u7c7b\u578b\u662fchar float * c ; //\u6307\u9488\u7c7b\u578b\u4e3afloat * \u6307\u9488\u6307\u5411\u7684\u7c7b\u578b\u662ffloat \u6ce8\u610f\u7684\u662f**\u6307\u9488\u7c7b\u578b**\u548c**\u6307\u9488\u6307\u5411\u7684\u7c7b\u578b**\u662f\u4e0d\u540c\u7684","title":"5.15.2 \u6307\u9488\u7684\u5f62\u5f0f"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5153","text":"\u572832\u4f4d\u7cfb\u7edf\u4e0b\u4e00\u4e2a\u6307\u9488\u7684\u7684\u5927\u5c0f\u5c31\u662f4\u4e2a\u5b57\u8282\uff0c64\u4f4d\u7cfb\u7edf\u4e0b\u5c31\u662f8\u5b57\u8282\uff0c\u540c\u5b66\u4eec\u53ef\u4ee5\u53bb\u7528 sizeof \u9a8c\u8bc1\u4e00\u4e0b \u8ba1\u7b97\u673a\u51e0\u4e4e\u6240\u6709\u7684\u4e1c\u897f\u90fd\u6709\u4e00\u4e2a\u5185\u5b58\u5730\u5740\u8fd9\u6837\u4e00\u4e2a\u201c\u552f\u4e00\u6807\u8bc6\u7b26\u201d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5730\u5740\u8bbf\u95ee\u5230\u8be5\u5730\u5740\u4e0a\u7684\u503c\uff0c\u6216\u8005\u662f\u4fee\u6539 \u4e0d\u662f\u6240\u6709\u7684\u5730\u5740\u6211\u4eec\u90fd\u80fd\u8bbf\u95ee\uff0c\u6240\u4ee5\u5728\u4f7f\u7528\u6307\u9488\u7684\u65f6\u5019\u5c3d\u91cf\u4e0d\u8981\u8bbf\u95ee\u5230\u4e0d\u8be5\u8bbf\u95ee\u7684\u5730\u65b9(\u6bd4\u5982\u5185\u6838\u533a\u7b49) \u201c\u91ce\u201d\u6307\u9488\u662f\u5f88\u53ef\u6015\u7684\uff0c\u6240\u4ee5\u5728\u4f7f\u7528\u6307\u9488\u7684\u65f6\u5019\u8bf7\u52a1\u5fc5\u521d\u59cb\u5316\u3002 \u6307\u9488\u4e5f\u6709\u7b97\u6570\u8fd0\u7b97 \u6307\u9488\u548c\u6570\u7ec4\u662f\u4e00\u4e2a\u4e1c\u897f\u5417\uff1f\u663e\u7136\u4e0d\u662f","title":"5.15.3 \u6307\u9488\u7684\u4e00\u4e9b\u4fe1\u606f"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5154","text":"\u6211\u5148\u4e3e\u4e2a\u4f8b\u5b50\uff1a C++ #include <stdio.h> void MySwap ( int a , int b ) { int temp = b ; b = a ; a = temp ; printf ( \"%d %d \\n \" , a , b ); } int main () { int a = 0 , b = 10 ; printf ( \"%d %d \\n \" , a , b ); MySwap ( a , b ); printf ( \"%d %d \\n \" , a , b ); return 0 ; } \u4f60\u89c9\u5f97\u8fd9\u4e2a\u4f1a\u8f93\u51fa\u4ec0\u4e48\u5462\uff1f\u6ca1\u9519\uff0c\u8f93\u51fa\u7684\u662f\uff1a Text Only 0 10 0 10 \u8fd9\u65f6\u5019\u6709\u7684\u540c\u5b66\u53ef\u80fd\u8bb0\u5f97\u4e4b\u524d\u8bb2\u8fc7\u7684\u4f5c\u7528\u57df\u7684\u4e1c\u897f\uff0c\u4e00\u53e3\u5c31\u8bf4\u51fa\u4e86\u7b54\u6848 \u90a3\u4e48\u60f3\u8981\u5b9e\u73b0\u8fd9\u4e2a\u4ea4\u6362\u51fd\u6570\u53ef\u4ee5\u600e\u4e48\u505a\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u5c06main\u51fd\u6570\u91cc\u9762\u5b9a\u4e49\u7684a\u548cb\u7684\u5730\u5740\u4f20\u7ed9\u4ea4\u6362\u51fd\u6570\uff0c\u7136\u540e\u6211\u4eec\u64cd\u4f5c\u5730\u5740\u4e0a\u9762\u7684\u503c\uff0c\u8fd9\u65f6\u5019\u4ea4\u6362\u5c31\u80fd\u5b9e\u73b0\u4e86 C++ #include <stdio.h> void MySwap ( int * a , int * b ) { int temp = * b ; * b = * a ; * a = temp ; } int main () { int a = 0 , b = 10 ; printf ( \"%d %d \\n \" , a , b ); MySwap ( & a , & b ); printf ( \"%d %d \\n \" , a , b ); return 0 ; } /* \u8f93\u51fa\u7ed3\u679c\uff1a 0 10 10 0 */ \u8fd9\u5c31\u662f\u6307\u9488\u7684\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u6848\u4f8b","title":"5.15.4 \u5728\u51fd\u6570\u7684\u5f62\u53c2\u4f7f\u7528\u6307\u9488"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5155","text":"\u6307\u9488\u53ef\u4ee5\u901a\u8fc7\u6307\u9488+\u6570\u5b57\u7684\u65b9\u5f0f\u83b7\u53d6\u4e00\u4e2a**\u504f\u79fb\u5730\u5740** \u4e3e\u4e2a\u6817\u5b50\uff1a C #include <stdio.h> int main () { int a [ 10 ] = { 0 , 1 , 2 , 3 , 4 }; int * p = a ; printf ( \"\u504f\u79fb\u524dp = %p \\n \" , p ); p += 3 ; printf ( \"\u504f\u79fb\u540ep = %p \\n \" , p ); return 0 ; } /* \u504f\u79fb\u524dp = 000000000061FDF0 \u504f\u79fb\u540ep = 000000000061FDFC */ \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u504f\u79fb\u540e\u7684\u6307\u9488\u7684\u5730\u5740\u6bd4\u504f\u79fb\u524d\u591a\u4e8612\uff0c\u53ef\u80fd\u6709\u7684\u540c\u5b66\u4f1a\u89c9\u5f97\u52a0\u7684\u4e0d\u5e94\u8be5\u662f3\u5417\uff0c\u5730\u5740\u5e94\u8be5\u662f000000000061FDF3\u624d\u5bf9\uff0c\u5176\u5b9e\u6307\u9488\u504f\u79fb\u7684\u91cf\u662f\uff1a \u6570\u636e\u7c7b\u578b\u957f\u5ea6*\u504f\u79fb\u957f\u5ea6 \u8fd9\u91cc\u6211\u4eec\u6570\u636e\u7c7b\u578b\u662fint\uff0c\u504f\u79fb\u7684\u957f\u5ea6\u662f3\u6240\u4ee5\u603b\u5171\u7684\u504f\u79fb\u91cf\u662f12\u3002\u540c\u7406\u51cf\u6cd5\u662f\u5f80\u524d\u504f\u79fb\u3002 \u6307\u9488\u8fd8\u80fd\u901a\u8fc7\u5355\u76ee\u8fd0\u7b97\u7b26++\u3001--\u8fdb\u884c\u504f\u79fb\uff0c\u6211\u5c31\u4e0d\u5217\u4e3e\u4e86\u3002","title":"5.15.5 \u6307\u9488\u7684\u7b97\u672f\u8fd0\u7b97"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5156","text":"\u65e2\u7136\u6307\u9488\u662f\u5b58\u50a8\u7684\u5730\u5740\uff0c\u5e76\u4e14\u7cfb\u7edf\u4e5f\u4f1a\u7ed9\u6307\u9488\u5206\u914d\u5730\u5740\u90a3\u4e48\u6211\u4eec\u7528\u4e00\u4e2a\u6307\u9488\u6765\u5b58\u50a8\u53e6\u4e00\u4e2a\u6307\u9488\u7684\u5730\u5740\u53ef\u4ee5\u5417\uff1f\u663e\u7136\u662f\u53ef\u4ee5\u7684\uff0c\u8fd9\u79cd\u6307\u9488\u4e5f\u53eb\u505a**\u6307\u5411\u6307\u9488\u7684\u6307\u9488** \uff0c\u7406\u8bba\u4e0a\u8fd9\u79cd\u6307\u9488\u53ef\u4ee5\u65e0\u9650\u8fd9\u6837\u5faa\u73af\u4e0b\u53bb\uff0c\u5230N\u91cd\u6307\u9488\uff0c\u4f46\u662f\u4e00\u822c\u8d85\u8fc7\u4e09\u91cd\u6307\u9488\u5c31\u4e0d\u592a\u5b9e\u7528\uff0c\u6216\u8005\u4e0d\u6613\u9605\u8bfb\u7406\u89e3\u4e86\uff0c\u4e3e\u4e2a\u6817\u5b50 C #include <stdio.h> int main () { int k = 1 ; int * p1 = & k ; int ** p2 = & p1 ; printf ( \"k\u7684\u5730\u5740: \\t %p \\n \" , & k ); printf ( \"p1\u7684\u5730\u5740: \\t %p \\n \" , & p1 ); printf ( \"p2\u7684\u5730\u5740: \\t %p \\n \" , & p2 ); printf ( \"p2\u6307\u5411\u7684\u5730\u5740: \\t %p \\n \" , p2 ); return 0 ; } \u5728\u6211\u7684\u7535\u8111\u4e0a\u6253\u5370\u7684\u662f\u4ee5\u4e0b\u5185\u5bb9\uff1a(\u4f60\u4eec\u6d4b\u8bd5\u7684\u8bdd\u5730\u5740\u53ef\u80fd\u4f1a\u4e0d\u592a\u4e00\u6837) C k\u7684\u5730\u5740 : 000000000061F E1C p1\u7684\u5730\u5740 : 000000000061F E10 p2\u7684\u5730\u5740 : 000000000061F E08 p2\u6307\u5411\u7684\u5730\u5740 : 000000000061F E10 \u901a\u8fc7\u5730\u5740\u6211\u4eec\u80fd\u53d1\u73b0p2\u6307\u5411\u7684\u5730\u5740\u5c31\u662fp1\u7684\u5730\u5740","title":"5.15.6 \u4e8c\u7ea7\u6307\u9488"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5157","text":"\u533a\u522b\u70b9 \u6307\u9488 \u6570\u7ec4 \u5b58\u50a8\u5185\u5bb9 \u4fdd\u5b58\u6570\u636e\u7684\u5730\u5740\uff0c\u4efb\u4f55\u4f20\u5165\u6307\u9488\u7684\u503c\u90fd\u4f1a\u5c06\u5176\u5f53\u4f5c\u5730\u5740\uff0c\u4f46\u662fp\u672c\u8eab\u4e5f\u4f1a\u6709\u7f16\u8bd1\u5668\u5b58\u50a8 \u4fdd\u5b58\u6570\u636e\uff0c\u6570\u7ec4\u540da\u4ee3\u8868\u7684\u662f\u6570\u7ec4\u9996\u5143\u7d20\u7684\u9996\u5730\u5740\u800c\u4e0d\u662f\u6570\u7ec4\u7684\u9996\u5730\u5740\uff0c&a\u624d\u662f\u6574\u4e2a\u6570\u7ec4\u7684\u9996\u5730\u5740 \u8bbf\u95ee\u6570\u636e\u65b9\u5f0f **\u95f4\u63a5\u8bbf\u95ee**\u6570\u636e\uff0c\u6211\u4eec\u901a\u8fc7\u6307\u9488\u53d8\u91cfp\u7684\u5730\u5740\u8bbf\u95ee\u8be5\u5730\u5740\u4e0a\u7684\u503c\uff0c\u6bd4\u5982*(p+i)\u7684\u65b9\u5f0f\u8bbf\u95ee\u4ee5p\u4e3a\u8d77\u59cb\u5730\u5740\u504f\u79fbi\u4e2a\u4f4d\u7f6e\u540e\u7684\u5730\u5740\u7684\u503c \u76f4\u63a5\u8bbf\u95ee \uff0c\u901a\u8fc7\u6570\u7ec4\u540d\u548c\u4e0b\u6807\u7684\u65b9\u5f0f\u8bbf\u95ee\uff0c\u6bd4\u5982a[i]\u8868\u793a\u8bbf\u95ee\u6570\u7ec4\u7b2ci+1\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u6216\u8005\u7528\u6307\u9488\u7684\u65b9\u5f0f\u8bbf\u95ee\u4e5f\u53ef\u4ee5 \u4f7f\u7528\u573a\u5408 **\u52a8\u6001**\u5206\u914d\u7684\u65f6\u5019 **\u56fa\u5b9a**\u5206\u914d\u5927\u5c0f\u7684\u65f6\u5019 \u7a7a\u95f4\u5206\u914d\u548c\u5220\u9664 malloc\u5206\u914d\uff0cfree\u5220\u9664 \u7cfb\u7edf\u81ea\u52a8\u5904\u7406","title":"5.15.7 \u6307\u9488\u548c\u6570\u7ec4\u7684\u5f02\u540c\u70b9"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5158","text":"\u6307\u9488\u6570\u7ec4\u548c\u6570\u7ec4\u6307\u9488 \u51fd\u6570\u6307\u9488 \u51fd\u6570\u6307\u9488\u6570\u7ec4\u3001\u51fd\u6570\u6307\u9488\u6570\u7ec4\u6307\u9488 \u5185\u5b58\u7ba1\u7406(\u8fd9\u4e2a\u5f85\u4f1a\u4f1a\u63d0\u5230\u4e00\u70b9) \u56e0\u4e3a\u672c\u7bc7\u4e3a\u901f\u901a\u6559\u7a0b\uff0c\u6240\u4ee5\u5176\u5b9e\u8fd8\u6709\u5f88\u591a\u6307\u9488\u7684\u4e1c\u897f\u90fd\u672a\u8bb2\u5230\uff0c\u8fd8\u8bf7\u89c1\u8c05\uff0c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u5df1\u53bb\u62d3\u5c55","title":"5.15.8 \u5173\u4e8e\u6307\u9488\u66f4\u591a\u4e1c\u897f"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#516","text":"","title":"5.16 \u5185\u5b58\u7ba1\u7406"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5161","text":"\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u7406\u89e3\u4e3a\u7a0b\u5e8f\u7684\u5185\u5b58\u5206\u4e3a**\u4e09\u4e2a\u90e8\u5206**\uff1a \u5806\u533a \uff1a\u7531malloc\u6216\u8005new\u64cd\u4f5c\u7b26\u5206\u914d\u7684\u5185\u5b58\uff0c\u7531\u8fd9\u4e24\u79cd\u64cd\u4f5c\u7b26\u5206\u914d\u7684\u5185\u5b58\u7684\u751f\u547d\u5468\u671f\u5206\u522b\u7531free\u548cdelete\u8fd9\u4e24\u79cd\u91ca\u653e\u64cd\u4f5c\u7b26\u51b3\u5b9a\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u4e24\u79cd\u91ca\u653e\u64cd\u4f5c\u7b26\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5185\u5b58\u5c31\u4f1a\u4e00\u76f4\u5230\u7a0b\u5e8f\u7ed3\u675f\u624d\u91ca\u653e \u6808\u533a \uff1a\u5c40\u90e8\u53d8\u91cf\u7684\u5b58\u50a8\u533a\u57df\uff0c\u6808\u533a\u7684\u5185\u5bb9\u5728\u4ee5\u51fd\u6570\u4e3a\u9996\u7684\u8303\u56f4\u5185\u5b58\u5728\uff0c\u5f53\u51fd\u6570\u8fd0\u884c\u7ed3\u675f\u90a3\u4e48\u53d8\u91cf\u81ea\u52a8\u91ca\u653e\uff0c\u6ce8\u610f\u5176\u5b9e\u66f4\u51c6\u786e\u7684\u8bf4\u662f\u53d8\u91cf\u5728\u79bb\u5f00\u5f53\u524d\u4f5c\u7528\u57df\u540e\u5c31\u4f1a\u81ea\u52a8\u9500\u6bc1 \u9759\u6001\u533a \uff1a\u4fdd\u5b58\u5168\u5c40\u53d8\u91cf\u548cstatic\u53d8\u91cf(\u5305\u62ec\u5c40\u90e8\u7684)\uff0c\u9759\u6001\u533a\u7684\u53d8\u91cf\u5728\u6574\u4e2a\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u90fd\u5b58\u5728","title":"5.16.1 \u5185\u5b58\u5206\u533a"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5162-malloc","text":"\u4e0a\u9762\u4e5f\u4ecb\u7ecd\u4e86malloc\u662f\u5185\u5b58\u7684\u5206\u914d\u7684\u51fd\u6570\uff0c\u7531\u8be5\u51fd\u6570\u5206\u914d\u7684\u5185\u5b58\u653e\u5728\u4e86\u5806\u533a\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u968f\u7740\u51fd\u6570\u7684\u7ed3\u675f\u6d88\u4ea1\uff0c\u4f46\u662f\u5982\u679c\u4f60**\u628a\u63e1\u4e0d\u4f4f**\uff0c\u90a3\u4e48\u5c31\u53ef\u80fd\u9020\u6210**\u91ce\u6307\u9488**\u3001**\u5185\u5b58\u6cc4\u6f0f**\u7b49\u4e00\u7cfb\u5217\u95ee\u9898 malloc\u7684\u5934\u6587\u4ef6\u662f <stdlib.h>","title":"5.16.2 malloc"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#51621","text":"C void * __cdecl malloc ( _In_ _CRT_GUARDOVERFLOW size_t _Size ); //\u7b80\u5316\u4e3a\u4e0b\u9762\u5f62\u5f0f void * malloc ( size_t size ) \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u662fvoid *\u7684\uff0c\u4f20\u5165\u7684\u53c2\u6570\u662f\u7533\u8bf7\u5185\u5b58\u7684\u5927\u5c0f(\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d)","title":"5.16.2.1 \u51fd\u6570\u58f0\u660e"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#51622","text":"\u6211\u4eec\u53ef\u4ee5\u6765\u4e3e\u4e2a\u6817\u5b50 C #include <stdio.h> #include <string.h> #include <stdlib.h> int * f ( int length ) { int * a = ( int * ) malloc ( sizeof ( int ) * length ); //\u6211\u4eec\u7533\u8bf7\u5185\u5b58\uff0c\u6ce8\u610f\u9700\u8981\u5f3a\u5236\u8f6c\u6362\u8fd4\u56de\u6570\u636e\u7c7b\u578b for ( int i = 0 ; i < length ; ++ i ) { a [ i ] = i ; } return a ; } int main () { int * p = f ( 10 ); for ( int i = 0 ; i < 10 ; ++ i ) { printf ( \"\u7b2c%d\u4e2a\u6570 = %d \\n \" , i , p [ i ]); } free ( p ); //\u6ce8\u610f\u91ca\u653e\u5185\u5b58\uff0c\u5e76\u4e14\u5185\u5b58\u91ca\u653e\u591a\u6b21\u53ef\u80fd\u4f1a\u51fa\u9519 p = NULL ; //\u4e0d\u7528\u7684\u6307\u9488\u6211\u4eec\u5c31\u5c06\u5176\u7f6e\u4e3aNULL return 0 ; } /*\u8f93\u51fa\u5185\u5bb9 \u7b2c0\u4e2a\u6570 = 0 \u7b2c1\u4e2a\u6570 = 1 \u7b2c2\u4e2a\u6570 = 2 \u7b2c3\u4e2a\u6570 = 3 \u7b2c4\u4e2a\u6570 = 4 \u7b2c5\u4e2a\u6570 = 5 \u7b2c6\u4e2a\u6570 = 6 \u7b2c7\u4e2a\u6570 = 7 \u7b2c8\u4e2a\u6570 = 8 \u7b2c9\u4e2a\u6570 = 9 */","title":"5.16.2.2 \u6837\u4f8b"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#51623","text":"\u5185\u5b58\u91ca\u653e\u4e0d\u8981\u591a\u6b21free\u6216\u8005delete\uff0c\u4e00\u4e2amalloc\u5bf9\u5e94\u4e00\u4e2afree \u5bf9\u4e8e\u6307\u5411NULL\u7684\u6307\u9488\u591a\u6b21\u91ca\u653e\u6ca1\u6709\u95ee\u9898 \u5bf9\u4e8e\u7533\u8bf7\u7684\u5185\u5b58\uff0c\u7528\u5b8c\u540e\u4e0d\u91ca\u653e\u5c31\u4f1a\u5bfc\u81f4\u5185\u5b58\u6cc4\u6f0f \u5bf9\u4e8e\u6ca1\u6709\u7533\u8bf7\u5230\u7684\u7a7a\u95f4\u8bbf\u95ee\u53ef\u80fd\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5**\u201c\u7ba1\u597d\u81ea\u5df1\u7684\u6307\u9488\u201d**","title":"5.16.2.3 \u6ce8\u610f"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#517","text":"","title":"5.17 \u7ed3\u6784\u4f53"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5171-diy","text":"\u901a\u4fd7\u6765\u8bb2\uff0c\u7ed3\u6784\u4f53\u5c31\u662f\u5c06\u591a\u79cd\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf\u5c01\u88c5\u6210\u4e00\u4e2a\u72ec\u7acb\u6570\u636e\u7c7b\u578b\uff0c\u8fd9\u65f6\u5019\u5c31\u6709\u540c\u5b66\u95ee\u4e86\uff0c\u90a3\u6211\u653e\u4e00\u4e2a\u5143\u7d20\u7c7b\u578b\u7684\u53d8\u91cf\u884c\u4e0d\u884c\u5462\uff1f\u90a3\u80af\u5b9a\u884c\u554a\uff0c\u4f46\u662f\u6709\u4ec0\u4e48\u7528\u5462\uff1f","title":"5.17.1 \u4ec0\u4e48\u662f\u7ed3\u6784\u4f53\uff1f\u53efDIY\u7684\u6570\u636e\uff01"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#51711","text":"C struct StructName { /* int a; double b; \u7b49\u7b49\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b */ }; //\u6ce8\u610f\u8fd9\u91cc\u7684\u5206\u53f7 \u6211\u4eec\u4f7f\u7528\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u7528struct StructName + \u53d8\u91cf\u540d\u6765\u5b9e\u73b0\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u5b9a\u4e49","title":"5.17.1.1 \u7ed3\u6784\u4f53\u7684\u5f62\u5f0f"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#51712","text":"C++ #include <stdio.h> #include <string.h> #include <stdlib.h> struct Node { int L , W ; } k1 ; int main () { struct Node k2 ; //\u666e\u901a\u53d8\u91cf\u901a\u8fc7.\u7684\u65b9\u5f0f\u8bbf\u95ee\u7ed3\u6784\u4f53\u4e2d\u7684\u5143\u7d20 k1 . L = 1 ; k1 . W = 2 ; k2 . L = 2 ; k2 . W = 3 ; printf ( \"L = %d W = %d \\n \" , k1 . L , k1 . W ); printf ( \"L = %d W = %d \\n \" , k2 . L , k2 . W ); puts ( \"-----------------------\" ); //\u6307\u9488\u53d8\u91cf\u901a\u8fc7->\u8bbf\u95ee\u7ed3\u6784\u4f53\u4e2d\u7684\u5143\u7d20 struct Node * k3 = ( struct Node * ) malloc ( sizeof ( struct Node )); k3 -> L = 3 ; k3 -> W = 4 ; printf ( \"L = %d W = %d \\n \" , k3 -> L , k3 -> W ); return 0 ; } \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5728\u5b9a\u4e49\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5728\u7ed3\u6784\u4f53\u5927\u62ec\u53f7\u540e\u9762\u52a0\u4e0a\u53d8\u91cf\u540d\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528struct StructName + \u53d8\u91cf\u540d\u7684\u65b9\u5f0f\u5b9a\u4e49 \u6307\u9488\u7ed3\u6784\u4f53\u7684\u8bbf\u95ee\u65b9\u5f0f\u662f\u901a\u8fc7->\u800c\u4e0d\u662f. \u7ed3\u6784\u4f53\u91cc\u9762\u53ef\u4ee5\u653e\u7ed3\u6784\u4f53\uff0c\u8fd9\u4e5f\u5c31\u662f\u7ed3\u6784\u4f53\u7684\u5d4c\u5957 \u7ed3\u6784\u4f53\u4e2d\u5982\u679c\u6709\u6307\u9488\u5143\u7d20\uff0c\u5e76\u4e14\u8981\u4f7f\u7528\u5230\u8be5\u6307\u9488\u5143\u7d20\u7684\u65f6\u5019\u8bf7\u7ed9\u8be5\u6307\u9488\u5143\u7d20\u7533\u8bf7\u7a7a\u95f4 \u7ed3\u6784\u4f53\u4e5f\u8981\u521d\u59cb\u5316\uff0c\u522b\u5fd8\u8bb0\u4e86 \u7ed3\u6784\u4f53\u4f60\u53ef\u4ee5\u628a\u5b83\u5f53\u4f5cDIY\u7684\u6570\u636e\u7c7b\u578b\uff0c\u81ea\u7136\u4e5f\u6709\u6307\u9488\u3001\u6570\u7ec4\u7b49\u4e1c\u897f\u4e86","title":"5.17.1.2 \u4e3e\u4e2a\u6817\u5b50"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5172-","text":"\u4f60\u89c9\u5f97\u4ee5\u4e0b\u4e24\u4efd\u7ed3\u6784\u4f53\u6240\u5360\u7684\u7a7a\u95f4\u662f\u4e00\u6837\u7684\u5417\uff1f C struct Node1 { char a , b ; int c ; }; struct Node2 { char a ; int b ; char c ; }; \u76f8\u4fe1\u5df2\u7ecf\u6709\u5c0f\u4f19\u4f34\u5f00\u59cb\u52a8\u624b\u5199\u4ee3\u7801\u5b9e\u9a8c\u4e86\u563f\u563f\uff0c\u6211\u8fd9\u91cc\u76f4\u63a5\u544a\u8bc9\u4f60\u7b54\u6848\uff0c\u8fd9\u4e24\u4e2a\u7ed3\u6784\u4f53\u5360\u7684\u7a7a\u95f4\u662f\u4e0d\u4e00\u6837\u7684\uff01 \u8fd9\u4e2a\u4e1c\u897f\u5c31\u53eb\u505a\u5185\u5b58\u5bf9\u9f50\uff0c\u5177\u4f53\u7684\u539f\u7406\u4f60\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u535a\u5ba2\uff1a \u5185\u5b58\u5bf9\u9f50\u7684\u89c4\u5219\u4ee5\u53ca\u4f5c\u7528 \u6211\u8fd9\u91cc\u7ed9\u4f60\u4e00\u4e2a\u6d4b\u8bd5\u7a0b\u5e8f\uff1a C #include <stdio.h> #include <string.h> #include <stdlib.h> struct Node1 { char a , b ; int c ; } A ; struct Node2 { char a ; int b ; char c ; } B ; int main () { printf ( \"struct Node1's size = %d \\n \" , sizeof ( struct Node1 )); printf ( \"a = %p \\n \" , & A . a ); printf ( \"b = %p \\n \" , & A . b ); printf ( \"c = %p \\n \" , & A . c ); puts ( \"------------------------------\" ); printf ( \"a = %p \\n \" , & B . a ); printf ( \"b = %p \\n \" , & B . b ); printf ( \"c = %p \\n \" , & B . c ); printf ( \"struct Node2's size = %d \\n \" , sizeof ( struct Node2 )); return 0 ; } \u672c\u6587\u5c31\u4e0d\u5c55\u5f00\u4e86\u3002","title":"5.17.2 \u5c0f\u62d3\u5c55-\u5185\u5b58\u5bf9\u9f50"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#518-io","text":"","title":"5.18 \u6587\u4ef6IO"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5181","text":"\u6587\u4ef6\u5c31\u662f\u4fe1\u606f\u7684\u4e00\u4e2a\u5408\u96c6\uff0c\u7136\u540e\u88ab\u4e0d\u540c\u7684\u65b9\u5f0f\u5305\u88c5\u8d77\u6765\uff1f","title":"5.18.1 \u4ec0\u4e48\u662f\u6587\u4ef6\uff1f"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5182-fopen","text":"\u6211\u4eec\u6765\u770bfopen\u7684\u58f0\u660e\uff1a C FILE * fopen ( const char * filename , const char * mode ); \u8fd4\u56de\u7c7b\u578b\u662fFILE *\u7684\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6587\u4ef6\u540d\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6253\u5f00\u65b9\u5f0f\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u8fd9\u91cc\u5982\u679c\u76f4\u63a5\u5199\u4e0a\u6587\u4ef6\u540d\u7684\u8bdd\u90a3\u5c31\u4f1a\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u7684\u6587\u4ef6\u5939\u4e2d\u5bfb\u627e\u540c\u6587\u4ef6\u5939\u4e2d\u7684\u8be5\u6587\u4ef6\uff0c\u8fd9\u4e5f\u5c31\u662f\u5927\u5bb6\u5e38\u8bf4\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u5f53\u7136\u4f60\u60f3\u6253\u5f00\u4e00\u4e2a\u5176\u4ed6\u78c1\u76d8\u7684\u4e00\u4e2a\u6587\u4ef6\u4f60\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84\u653e\u8fdb\u8fd9\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u53eb\u7edd\u5bf9\u8def\u5f84 \u56e0\u4e3a\u8fd9\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u662f\u4e00\u4e2aFILE*\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u4e5f\u5e94\u8be5\u53bb\u9876\u4e00\u4e2a\u4e00\u4e2a\u8fd9\u4e2a\u7c7b\u578b\u53bb\u63a5\u53d7\u6211\u4eecfopen\u7684\u8fd4\u56de\u503c\uff0c\u6211\u4e3e\u4e2a\u6817\u5b50\uff1a C FILE * fp = fopen ( \"a.txt\" , \"r\" ); //\u8868\u793a\u7684\u662f\u4ee5\u53ea\u8bfb\u7684\u65b9\u5f0f\u6253\u5f00a.txt\u6587\u4ef6","title":"5.18.2 \u7a0b\u5e8f\u6253\u5f00\u6587\u4ef6 fopen\u51fd\u6570"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5183-fclose","text":"\u5728\u6211\u4eec\u5b8c\u6210\u5806\u6587\u4ef6\u7684\u64cd\u4f5c\u540e\u6211\u4eec\u5f00\u59cb\u5b9a\u4e49\u7684FILE *\u7684\u6307\u9488fp\u5c31\u8981\u5173\u95ed\u6587\u4ef6\u8bbf\u95ee\uff0c\u540c\u6837\u7684\u4e00\u4e2afclose\u5bf9\u5e94\u4e00\u4e2afopen\uff0c\u4e0d\u8981\u591a\u6b21fclose\uff0c\u6211\u4e3e\u4e2a\u6817\u5b50 C FILE * fp = fopen ( \"a.txt\" , \"r\" ); //\u8868\u793a\u7684\u662f\u4ee5\u53ea\u8bfb\u7684\u65b9\u5f0f\u6253\u5f00a.txt\u6587\u4ef6 // xxxx\u64cd\u4f5c fclose ( fp )","title":"5.18.3 \u7a0b\u5e8f\u5173\u95ed\u6587\u4ef6 fclose\u51fd\u6570"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5184","text":"\u4e0a\u9762\u8bb2\u7684\u662f\u6253\u5f00\u548c\u5173\u95ed\u6587\u4ef6\uff0c\u6211\u4eec\u771f\u6b63\u60f3\u505a\u7684\u4e8b\u60c5\u662f\u67e5\u770b\u6216\u8005\u4fee\u6539\u6216\u8005\u589e\u6dfb\u6587\u4ef6\u5185\u5bb9\u800c\u4e0d\u53ea\u662f\u6253\u5f00\u6216\u5173\u95ed\uff0c\u6211\u8fd9\u91cc\u53ea\u8bb2\u683c\u5f0f\u5316\u8f93\u5165\u8f93\u51fa\u7684\u51fd\u6570\uff0c\u5176\u4ed6\u7684\u4f60\u770b\u770b\u4e5f\u5c31\u80fd\u660e\u767d\uff0c\u5728\u8fd9\u91cc\u8bb2\u5c31\u662f\u6d6a\u8d39\u65f6\u95f4","title":"5.18.4 \u6587\u4ef6\u7684\u8bfb\u548c\u5199"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#51841-fscanf","text":"\u6211\u4eec\u5148\u6765\u770b\u770b\u8fd9\u4e2a\u51fd\u6570\u7684\u58f0\u660e\uff1a C int fscanf ( FILE * stream , const char * format , ...) \u662f\u4e0d\u662f\u548c\u6211\u4eec\u6700\u5f00\u59cb\u8bb2\u7684scanf\u5f88\u50cf\uff1f\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2aFILE *stream\u7684\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u5c31\u662f\u4f20\u5165\u7684\u6587\u4ef6\u6807\u8bc6\u7b26(\u4e5f\u5c31\u662f\u6211\u4eec\u662f\u5728\u54ea\u4e2a\u6587\u4ef6\u8bfb)\uff0c\u4e5f\u5c31\u662f\u4e0a\u9762\u63d0\u5230\u7684fp\u6307\u9488\u3002\u5176\u4f59\u7528\u6cd5\u548cscanf\u4e00\u6837","title":"5.18.4.1 fscanf\u51fd\u6570"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#51842-fprintf","text":"\u6211\u4eec\u6765\u770b\u8fd9\u4e2a\u51fd\u6570\u7684\u58f0\u660e\uff1a C int fprintf ( FILE * stream , const char * format , ...) \u4f60\u53c8\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u4e5f\u662f\u591a\u4e86\u4e2aFILE *\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u539f\u7406\u548c\u4e0a\u9762\u4e00\u6837\uff0c\u8fd9\u91cc\u6211\u5c31\u7701\u7565\u4e86","title":"5.18.4.2 fprintf\u51fd\u6570"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5185","text":"\u5047\u8bbe\u8bf4\u6211\u4eec\u6709\u4e00\u4e2a\u53eba.txt\u7684\u6587\u4ef6\uff0c\u8fd9\u4e2a\u6587\u4ef6\u91cc\u9762\u6709\u4e00\u4e32\u6570\u5b57\uff0c\u6211\u4eec\u5e0c\u671b\u8bfb\u53d6\u6bcf\u4e2a\u6570\u5b57\u7136\u540e\u8ba9\u8fd9\u4e2a\u6570\u5b57+10 C #include <stdio.h> #include <string.h> #include <stdlib.h> #define N 10 int main () { int a [ N ]; FILE * fp1 = fopen ( \"a.txt\" , \"r\" ); //\u4ee5\u53ea\u8bfb\u7684\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6 if ( fp1 == NULL ) { //\u5982\u679c\u6253\u5f00\u5931\u8d25\uff0c\u90a3\u4e48\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f perror ( \"open_error:\" ); return -1 ; } int len = 0 ; while ( EOF != fscanf ( fp1 , \"%d\" , & a [ len ])) { //\u4e00\u76f4\u8bfb\u5230\u6587\u4ef6\u672b\u5c3e\uff0cEOF => End Of File len ++ ; } fclose ( fp1 ); //\u8bfb\u5b8c\u4e86\uff0c\u5173\u95ed\u6587\u4ef6\u6d41 FILE * fp2 = fopen ( \"a.txt\" , \"w\" ); //\u4ee5\u53ea\u5199\u7684\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u5982\u679c\u6709\u6587\u4ef6\u90a3\u4e48\u5c31\u6e05\u7a7a if ( fp2 == NULL ) { //\u5982\u679c\u6253\u5f00\u5931\u8d25\uff0c\u90a3\u4e48\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f perror ( \"open_error:\" ); return -1 ; } for ( int i = 0 ; i < len ; ++ i ) { //\u5faa\u73af\u5199\u5165 a [ i ] += 10 ; fprintf ( fp2 , \"%d \\n \" , a [ i ]); } fclose ( fp2 ); //\u5173\u6d41 return 0 ; }","title":"5.18.5 \u4e3e\u4e2a\u6817\u5b50"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#5186","text":"","title":"5.18.6 \u5c0f\u62d3\u5c55"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#51861-fseek","text":"\u6709\u7684\u65f6\u5019\u6211\u4eec\u60f3\u4ece\u6587\u4ef6\u7684\u67d0\u4e2a\u90e8\u5206\u5f00\u59cb\u8bfb\uff0c\u6216\u8005\u5199\uff0c\u800c\u4e0d\u662f\u4ece\u5f00\u5934\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u7528\u5230fseek\u51fd\u6570\u8ba9\u6211\u4eec\u5f53\u524d\u7684\u201c\u5149\u6807\u201d\u5b9a\u4f4d\u5230\u6587\u4ef6\u7684\u67d0\u4e2a\u6211\u4eec\u60f3\u8981\u7684\u90e8\u5206 \u6211\u4eec\u5148\u6765\u770b\u8fd9\u4e2a\u51fd\u6570\u7684\u58f0\u660e\uff1a C int fseek ( FILE * stream , long int offset , int whence ) \u7b2c\u4e00\u4e2a\u53c2\u6570\u662fFILE * \u7b2c\u4e8c\u4e2a\u53c2\u6570\u53eb\u504f\u79fb\u91cf\uff0c\u4f46\u662f\u662f\u76f8\u5bf9whence\u7684 \u7b2c\u4e09\u4e2a\u662f\u6587\u4ef6\u4ece\u4ec0\u4e48\u5730\u65b9\u5f00\u59cb\u8bfb\uff0c\u4e00\u5171\u6709\u4e09\u4e2a\u5e38\u91cf\u8868\u793a \u5e38\u91cf \u63cf\u8ff0 SEEK_SET \u6587\u4ef6\u7684\u5f00\u5934 SEEK_CUR \u6587\u4ef6\u6307\u9488\u7684\u5f53\u524d\u4f4d\u7f6e SEEK_END \u6587\u4ef6\u7684\u672b\u5c3e \u5982\u679c\u51fd\u6570\u6267\u884c\u6210\u529f\u90a3\u4e48\u5c31\u8fd4\u56de\u96f6\uff0c\u5426\u5219\u8fd4\u56de\u975e\u96f6\u503c \u4e3e\u4e2a\u6817\u5b50 C #include <stdio.h> int main () { FILE * fp ; fp = fopen ( \"a.txt\" , \"w+\" ); fputs ( \"This is runoob.com\" , fp ); fseek ( fp , 7 , SEEK_SET ); fputs ( \" C Programming Langauge\" , fp ); fclose ( fp ); return ( 0 ); }","title":"5.18.6.1 fseek\u51fd\u6570"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#51862","text":"\u6a21\u5f0f \u63cf\u8ff0 r \u6253\u5f00\u4e00\u4e2a\u5df2\u6709\u7684\u6587\u672c\u6587\u4ef6\uff0c\u5141\u8bb8\u8bfb\u53d6\u6587\u4ef6\u3002 w \u6253\u5f00\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u5141\u8bb8\u5199\u5165\u6587\u4ef6\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\u3002\u5728\u8fd9\u91cc\uff0c\u60a8\u7684\u7a0b\u5e8f\u4f1a\u4ece\u6587\u4ef6\u7684\u5f00\u5934\u5199\u5165\u5185\u5bb9\u3002\u5982\u679c\u6587\u4ef6\u5b58\u5728\uff0c\u5219\u8be5\u4f1a\u88ab\u622a\u65ad\u4e3a\u96f6\u957f\u5ea6\uff0c\u91cd\u65b0\u5199\u5165\u3002 a \u6253\u5f00\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u4ee5\u8ffd\u52a0\u6a21\u5f0f\u5199\u5165\u6587\u4ef6\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\u3002\u5728\u8fd9\u91cc\uff0c\u60a8\u7684\u7a0b\u5e8f\u4f1a\u5728\u5df2\u6709\u7684\u6587\u4ef6\u5185\u5bb9\u4e2d\u8ffd\u52a0\u5185\u5bb9\u3002 r+ \u6253\u5f00\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u5141\u8bb8\u8bfb\u5199\u6587\u4ef6\u3002 w+ \u6253\u5f00\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u5141\u8bb8\u8bfb\u5199\u6587\u4ef6\u3002\u5982\u679c\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u5219\u6587\u4ef6\u4f1a\u88ab\u622a\u65ad\u4e3a\u96f6\u957f\u5ea6\uff0c\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\u3002 a+ \u6253\u5f00\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u5141\u8bb8\u8bfb\u5199\u6587\u4ef6\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\u3002\u8bfb\u53d6\u4f1a\u4ece\u6587\u4ef6\u7684\u5f00\u5934\u5f00\u59cb\uff0c\u5199\u5165\u5219\u53ea\u80fd\u662f\u8ffd\u52a0\u6a21\u5f0f\u3002 \u5982\u679c\u5904\u7406\u7684\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5219\u9700\u4f7f\u7528\u4e0b\u9762\u7684\u8bbf\u95ee\u6a21\u5f0f\u6765\u53d6\u4ee3\u4e0a\u9762\u7684\u8bbf\u95ee\u6a21\u5f0f\uff1a C \"rb\" , \"wb\" , \"ab\" , \"rb+\" , \"r+b\" , \"wb+\" , \"w+b\" , \"ab+\" , \"a+b\"","title":"5.18.6.2 \u6587\u4ef6\u6253\u5f00\u65b9\u5f0f"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#_3","text":"","title":"\u516d\u3001\u5173\u4e8e\u8c03\u8bd5"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#61","text":"\u50cf Dev-c++ \u3001 Vscode \u3001 Visual Studio \u3001 Clion \u7b49\u7b49\u5f00\u53d1\u8f6f\u4ef6\uff0c\u90fd\u662f\u5177\u6709 \u6253\u65ad\u70b9\u8c03\u8bd5\u529f\u80fd \u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728\u6211\u4eec\u60f3\u8ba9\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u8fd0\u884c\u5230\u67d0\u4e00\u884c\u5c31\u505c\u6b62\u7684\u5730\u65b9\u6253\u4e00\u4e2a\u65ad\u70b9\uff0c\u7136\u540e\uff0c\u4e0a\u65b9\u6709\u4e00\u4e2a\u8c03\u8bd5\uff08debug\uff09\u7684\u6309\u94ae \u6211\u4eec\u4ee5Dev-c++\u4e3a\u4f8b\uff0c\u6211\u4eec\u9700\u8981\u73b0\u5728\u4e0a\u65b9\u7684\u9009\u9879\u4e2d\u70b9\u51fb \u5de5\u5177 -> \u7f16\u8bd1\u9009\u9879 -> \u4ee3\u7801\u751f\u6210 -> \u8fde\u63a5\u5668 -> \u4ea7\u751f\u8c03\u8bd5\u4fe1\u606f \uff0c\u7136\u540e\u5c06\u8fd9\u91cc\u6539\u4e3a Yes \uff0c\u7136\u540e\u5c31\u80fd\u4f7f\u7528\u8c03\u8bd5\u529f\u80fd\u4e86\uff0c\u8c03\u8bd5\u7684\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u5c06\u6211\u4eec\u9700\u8981\u89c2\u5bdf\u7684\u53d8\u91cf\u653e\u5728\u5de6\u4fa7\u7684\u8c03\u8bd5\u533a\uff0c\u7136\u540e\u6bcf\u6267\u884c\u4e00\u884c\u6211\u4eec\u89c2\u5bdf\u5176\u53d8\u5316\uff0c\u6765\u5224\u65ad\u6211\u4eec\u7684\u7a0b\u5e8f\u7684\u903b\u8f91\u662f\u5426\u6b63\u786e","title":"6.1 \u56fe\u5f62\u5316\u754c\u9762"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#62","text":"\u8fd9\u79cd\u4e00\u822c\u662f\u5728\u6211\u4eec\u4f7f\u7528\u4e00\u4e9b shell \u6216\u8005 \u7ec8\u7aef \uff0c\u94fe\u63a5\u6211\u4eec\u7684\u670d\u52a1\u5668\u6216\u8005\u865a\u62df\u673a\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6ca1\u6709\u56fe\u5f62\u5316\u754c\u9762\u7684IDE\u6765\u8f85\u52a9\u6211\u4eec\u8c03\u8bd5\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u5199\u4e00\u4e2a print() \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c31\u6253\u5370\u5f53\u524d\u6211\u4eec\u5e0c\u671b\u89c2\u5bdf\u7684\u53d8\u91cf\u7684\u503c\uff0c\u90a3\u4e48\u8fd9\u6837\u6211\u4eec\u4e5f\u80fd\u6765\u901a\u8fc7\u63a7\u5236\u53f0\u6253\u5370\u7684\u4fe1\u606f\u6765\u5224\u65ad\u6211\u4eec\u7a0b\u5e8f\u7684\u903b\u8f91\u662f\u5426\u6b63\u786e","title":"6.2 \u975e\u56fe\u5f62\u5316\u754c\u9762"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#63","text":"\u6211\u4eec\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\u5e76\u4e0d\u80fd\u6bcf\u6b21\u90fd\u4fdd\u8bc1\u81ea\u5df1\u5199\u7684\u4ee3\u7801\u6ca1\u6709bug\uff0c\u90a3\u4e48\u5f53\u4e00\u4e2a\u7a0b\u5e8f\u51fa\u73b0\u4e86bug\uff0c\u6211\u4eec\u901a\u8fc7 \u65e5\u5fd7 \u80fd\u5feb\u901f\u627e\u5230\u95ee\u9898\u7684\u53d1\u751f\uff0c\u90a3\u4e48 \u8c03\u8bd5 \u5c31\u80fd\u8ba9\u6211\u4eec\u5feb\u901f\u7684\u53d1\u73b0\u95ee\u9898\u51fa\u73b0\u7684\u539f\u56e0\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u7684\u4ee3\u7801\u51fa\u73b0\u4e86\u4e00\u4e9b\u903b\u8f91\u4e0a\u7684\u95ee\u9898\u7684\u65f6\u5019\uff0c\u8bf7\u4e0d\u8981\u627e\u522b\u4eba\u5e2e\u4f60\u770b\uff0c\u8fd9\u5bf9\u4f60\u6765\u8bf4\u4e5f\u662f\u4e00\u79cd\u78e8\u7ec3","title":"6.3 \u8c03\u8bd5\u7684\u91cd\u8981\u6027"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#_4","text":"\u540c\u5b66\u4eec\u5b66\u5230\u8fd9\u91cc\uff0c\u5176\u5b9e**\u201c\u7a0b\u5e8f\u8bbe\u8ba1\u201d**\u5927\u81f4\u5c31\u4f1a\u4e86\uff0c\u53ef\u80fd\u6709\u4e00\u4e9b\u5c0f\u7ec6\u8282\u4e0d\u592a\u4f1a\uff0c\u6216\u8005\u4e4b\u524d\u8bb2\u7684\u6ca1\u6d88\u5316\uff0c\u540e\u9762\u6211\u60f3\u8bf4\u8bf4\u5728\u672c\u4e66\u7ed3\u675f\u540e\uff0c\u4f60\u7684**\u5b66\u4e60\u8def\u7ebf**\u53c8\u5e94\u8be5\u662f\u600e\u6837\u7684\uff0c\u5e0c\u671b\u80fd\u7ed9\u5230\u4e00\u4e2a\u5efa\u8bae","title":"\u4e03\u3001\u66f4\u591a\u62d3\u5c55"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#71-oi-or-acm","text":"","title":"7.1 \u4fe1\u606f\u5b66\u7ade\u8d5b(OI or ACM)"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#711-about","text":"\u5982\u679c\u4f60\u662f\u521d\u9ad8\u4e2d\u751f\u63a5\u89e6\u5230\u7f16\u7a0b\u5927\u81f4\u662f\u4e3a\u4e86OI\uff0c\u5927\u5b66\u7684\u8bdd\u53ef\u80fd\u4f1a\u542c\u8fc7\u6709\u4e00\u4e2a\u53ebACM\u7684\u7ec4\u7ec7\u6216\u8005\u5b9e\u9a8c\u5ba4\uff1f \u7b14\u8005\u5728\u521d\u9ad8\u4e2d\u4ece\u672a\u63a5\u89e6\u7f16\u7a0b\uff0c\u521d\u6b21\u63a5\u89e6\u662f\u5728\u5927\u5b66\u9009\u4e86\u8ba1\u7b97\u673a\u7c7b\u7684\u7684\u4e13\u4e1a\uff0c\u4e5f\u6709\u5e78(\u4e0d\u5e78\uff1f)\u5728\u8001\u5e08\u7684\u4ecb\u7ecd\u4e0b\u52a0\u5165\u4e86ACM\u5b9e\u9a8c\u5ba4\uff0c\u6240\u4ee5\u5bf9\u8fd9\u4e00\u5757\u8fd8\u7b97\u7565\u77e5\u4e00\u4e8c\uff0c\u5982\u679c\u4f60\u60f3\u5f80\u8fd9\u4e2a\u65b9\u5411\u8d70\u4e0b\u53bb\u7684\u8bdd\uff0c\u90a3\u6211\u6709\u51e0\u70b9\u5efa\u8bae\u7ed9\u4f60\u5206\u4eab\uff0c\u9996\u5148\u95ee\u4f60\u51e0\u4e2a\u95ee\u9898\uff0c\u4f60\u770b\u5408\u4e0d\u5408\u81ea\u5df1\u7684\u80c3\u53e3 \u4f60\u662f\u5426\u559c\u6b22\u6570\u5b66\uff1f\u6216\u8005\u5728\u6570\u5b66\u4e0a\u9762\u6709\u4e00\u5b9a\u5929\u8d4b\uff1f \u4f60\u662f\u5426\u80fd\u80fd\u63a5\u53d7\u4e00\u592910h\u53ca\u4ee5\u4e0a\u7684\u8bad\u7ec3\u65f6\u95f4\uff1f \u4f60\u662f\u5426\u80fd\u63a5\u53d7\u4f60\u8981\u653e\u5f03\u4f60\u7684\u5176\u4ed6\u5b66\u79d1\u6216\u8005\u662f\u8bfe\u7a0b\uff1f(\u4e0d\u662f\u6302\u79d1\uff0c\u53ea\u662f\u53ef\u80fd\u5206\u6ca1\u522b\u4eba\u90a3\u4e48\u9ad8\uff0c\u5927\u4f6c\u9664\u5916) \u4f60\u662f\u5426\u80fd\u8010\u5f97\u4f4f\u5bc2\u5bde\uff0c\u65e0\u8bba\u6625\u79cb\u51ac\u590f\u7684\u5047\u671f\u90fd\u8981\u8bad\u7ec3\uff1f \u4f60\u662f\u5426\u80fd\u80fd\u63a5\u53d7\u4e00\u573a5h\u7684\u6bd4\u8d5b\uff0c\u4f60\u662f\u5426\u6709\u8db3\u591f\u7684\u81ea\u4fe1\uff1f \u2026\u2026 \u5176\u5b9e\u7ade\u8d5b\u7684\u9053\u8def\u672c\u6765\u5c31\u5f88\u62e5\u6324\u4e86\uff0c\u7b14\u8005\u5176\u5b9e\u4e0d\u5efa\u8bae\u5927\u5bb6\u5165\u5751\u7684\uff0c\u968f\u7740\u7f16\u7a0b\u666e\u53ca\u5316\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u5b66\u751f\u4ece\u5c0f\u5c31\u6709\u8ba1\u7b97\u673a\u80cc\u666f\uff0c\u4f60\u8d77\u6b65\u665a\u53ef\u522b\u4eba\u4e0d\u665a\uff0c\u4f60\u5927\u5b66\u5b66\u7684\u4e1c\u897f\u4eba\u5bb6\u9ad8\u4e2d\u751a\u81f3\u521d\u4e2d\u5c31\u5b66\u4e86\uff0c\u8fd9\u4f1a\u600e\u6837\u5462\uff1f\u4f1a\u8ba9\u4f60\u611f\u89c9\u4ed8\u51fa\u548c\u6536\u83b7\u4e0d\u6210\u6b63\u6bd4\uff0c\u5f53\u7136\u4e0d\u662f\u8bf4\u4f60\u4e3a\u4e86\u5956\u800c\u6765\uff0c\u8fd9\u6837\u6ce8\u5b9a\u4f1a\u5931\u671b\u7684\uff0c\u4f60\u5e94\u8be5\u6000\u7740\u4e00\u9897\u597d\u5947\u63a2\u77e5\u7684\u5fc3\uff0c\u5173\u6ce8\u8fc7\u7a0b\u5c31\u884c\uff0c\u4e0d\u8981\u5728\u610f\u7ed3\u679c\u3002\u5982\u679c\u4f60\u975e\u8981\u6765\u8bd5\u8bd5\uff0c\u4f60\u4f1a\u53d1\u73b0\u641e\u7ade\u8d5b\u7684\u5206\u4e24\u79cd\u4eba\uff0c\u4e00\u79cd**\u201c\u5929\u8d4b\u578b\u201d\u9009\u624b**\uff0c\u53e6\u4e00\u79cd\u662f**\u201c\u81ea\u8d70\u4eba\u5f62\u9898\u5e93\u201d**\uff0c\u7b14\u8005\u81ea\u77e5\u6ca1\u6709\u5929\u8d4b\uff0c\u6240\u4ee5\u7b97\u662f\u540e\u8005\uff0c\u4e24\u5e74\u65f6\u95f4\u6d3b\u8dc3\u5728\u5404\u5927OJ\u5927\u7ea6\u5237\u4e861k3\u5de6\u53f3\u7684\u9898\u76ee\uff0c\u4f46\u662f\u4ecd\u7136\u4e0d\u591f\u2026\u2026 \u53ef\u4ee5\u5148\u53bb\u505a HDUOJ \u9898\u53f72000-2099\u7684\u9898\u76eeor\u53bb\u6d1b\u8c37\u7684\u5165\u95e8\u63d0\u5355+\u7b97\u6cd51-x\u9898\u5355\uff0c\u8bed\u6cd5\u9898\u505a\u5230\u4e00\u5b9a\u7a0b\u5ea6\u5c31\u53ef\u4ee5\u4e0d\u505a\u4e86\uff0c\u6ca1\u5fc5\u8981\u505a\u5b8c \u5165\u95e8\u540e\u4f60\u53ef\u4ee5\u9010\u6b65\u4e86\u89e3\u4ee5\u4e0b\u5404\u79cd\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784(\u5148\u4ece\u7b80\u5355\u7684\u8d2a\u5fc3\u3001\u641c\u7d22\u5f00\u59cb)\uff0c\u7136\u540e\u53bb Virtual Judge \u4e0a\u9762\u5237\u76f8\u5e94\u7684\u9898\u5355 \u4f60\u53ef\u4ee5\u901a\u8fc7\u770b\u522b\u4eba\u7684\u535a\u5ba2\u5b66\u4e60\uff0c\u4e5f\u53ef\u4ee5\u4e70\u4e00\u4e24\u672c\u7b97\u6cd5\u4e66\u5b66\u4e60 \u5982\u679c\u4f60\u8981\u53c2\u52a0ICPC or CCPC\u7b49\u8fd9\u4e00\u7c7b\u7684\u6bd4\u8d5b\uff0c\u4f60\u53ef\u4ee5\u53bb Codeforces \u4e0a\u9762\u6253\u4e00\u4e0b\u5b83\u7684\u6bd4\u8d5b\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u7ade\u8d5b\u7f51\u7ad9\uff0c\u6709\u5f88\u591a\u5de7\u5999\u7684\u601d\u7ef4\u9898\u7b49\u53ef\u4ee5\u62d3\u5c55\u4f60\u7684\u601d\u7ef4 \u6e29\u6545\u800c\u77e5\u65b0\uff0c\u5bf9\u4e8e\u81ea\u5df1\u5b66\u7684\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u8981\u7ecf\u5e38\u590d\u4e60\uff0c\u7136\u540e\u53ef\u4ee5\u5e73\u65f6\u7ec3\u4e60\u4e00\u4e0b\u81ea\u5df1\u7684\u624b\u901f\uff0c\u4ee5\u53ca\u4ee3\u7801\u7684\u51c6\u5ea6 \u5982\u679c\u6709\u80fd\u529b\u7684\u8bdd\u53ef\u4ee5\u53bb\u770b\u4e00\u4e0b\u56fd\u5bb6\u96c6\u8bad\u961f\u7684\u8bba\u6587 \u591a\u770b\u522b\u4eba\u7684\u4ee3\u7801\uff0c\u4e0d\u80fd\u61d2\uff0c\u591a\u4e9b\u9898 \u66f4\u591a\u522b\u4eba\u7684ACM\u5b66\u4e60\u65b9\u6cd5\uff0c\u5927\u5bb6\u53ef\u4ee5\u53bb\u767e\u5ea6\u641c\u4e00\u4e0b\uff0c\u5176\u5b9e\u9002\u5408\u81ea\u5df1\u7684\u65b9\u6cd5\u624d\u662f\u6700\u597d\u7684\uff0c\u80fd\u4e00\u76f4**\u575a\u6301**\u4e5f\u662f\u6700\u597d\u7684\u3002 \u4e0b\u9762\u662f\u6211\u63a8\u8350\u7684\u4e24\u672c\u7b97\u6cd5\u4e66\uff08\u6392\u540d\u4e0d\u5206\u5148\u540e\uff09\uff1a 1\uff1a\u300a\u6311\u6218\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\uff08\u7b2c2\u7248\uff09\u300b 2\uff1a\u300a\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178(\u5218\u4f73\u6c5d)\u300b \u5176\u5b9e\u6211\u662f\u4e0d\u5efa\u8bae\u5927\u5bb6\u770b\u8fd9\u672c\u4e66\u7684\uff0c\u56e0\u4e3a**\u5761\u5ea6**\u5f88\u5927\uff0c\u4e0d\u9002\u5408\u65b0\u624b 3:**\u535a\u5ba2\u56ed**\u548cCSDN \u591a\u770b\u524d\u4eba\u603b\u7ed3\u7684\u4e1c\u897f\u6709\u52a9\u4e8e\u6211\u4eec\u7406\u89e3\u548c\u5b66\u4e60\u7b97\u6cd5 \u4f60\u4eec\u4e5f\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u6211\u5f53\u65f6\u7684\u63d0\u95ee\uff1a https://www.zhihu.com/question/361725313","title":"7.1.1 about"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#712","text":"","title":"7.1.2 \u6280\u80fd\u6811"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#713-online-judge","text":"\u6b22\u8fce\u5927\u5bb6\u6765\u6211\u642d\u5efa\u7684OJ\uff1a www.mangata.ltd \u505a\u9898\uff0c\u73b0\u5728\u5df2\u7ecf\u4e0a\u4f20\u4e86\u8bb8\u591a\u9898\u76ee\uff0c\u8fd8\u4f1a\u4e0d\u5b9a\u671f\u4e3e\u529e\u6bd4\u8d5b\uff08\u6e9c\uff0c\u5982\u679c\u60f3\u6765\u51fa\u9898\u7684\u5927\u4f6c\u6211\u4e5f\u975e\u5e38\u6b22\u8fceb\uff08\uffe3\u25bd\uffe3\uff09d","title":"7.1.3 \u7b14\u8005\u7684Online-Judge"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#72","text":"\u5176\u5b9e\u66f4\u591a\u7684\u4eba\u9009\u62e9\u7684\u90fd\u662f\u9879\u76ee\u5f00\u53d1\uff0c\u6bd5\u7adf\u8981\u6070\u996d\u7684\u561b\uff0c\u9879\u76ee\u5f00\u53d1\u7684\u8bdd\uff0c\u90a3\u624e\u5b9e\u7684\u7a0b\u5e8f\u57fa\u7840\u662f\u5f88\u6709\u5fc5\u8981\u7684\uff0c\u8fd9\u7bc7\u901f\u901a\u6559\u7a0b\u53ea\u662f\u4e00\u4e2a\u5f00\u59cb \u4f60\u8981\u4ece\u5934\u518d\u4ed4\u7ec6\u5b66\u4e60\u4e00\u904d\uff0c\u7136\u540e\u771f\u6b63\u7406\u89e3\u201c\u7a0b\u5e8f\u8bbe\u8ba1\u201d \u638c\u63e1\u7b80\u5355\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5(\u5982\u94fe\u8868\u3001\u4e8c\u53c9\u6811\u3001B+\u6811\u3001\u5e76\u67e5\u96c6\u3001\u6df1\u5ea6\u3001\u5e7f\u5ea6\u641c\u7d22\u7b49\u7b49) \u5b66\u4e60\u9762\u5bf9\u5bf9\u8c61\u601d\u60f3 \u5b66\u4e60Git\u600e\u4e48\u4f7f\u7528\uff0c\u4ee5\u53ca\u547d\u4ee4\uff0c\u6709\u60f3\u505a\u7684\u9879\u76ee\u53ef\u4ee5\u4e0a\u53bb\u770b\u770b\u522b\u4eba\u7684\u4ee3\u7801\u4f5c\u4e3a\u5b66\u4e60 \u5b66\u4e60linux\u7f16\u7a0b\u548clinux\u4f7f\u7528 \u5b66\u4e60\u5e76\u53d1\u7f16\u7a0b \u5b66\u4e60\u7f51\u7edc\u7f16\u7a0b(\u5982\u679c\u53ef\u80fd\u7684\u8bdd\u53ef\u4ee5\u770b\u4e00\u70b9\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u4e66) \u5b66\u4e60\u5982\u4f55\u5bf9\u8be5\u8bed\u8a00\u9879\u76ee\u8fdb\u884c\u7f16\u8bd1\u3001\u6253\u5305\u3001\u90e8\u7f72\u548c\u8fd0\u884c \u5b66\u4f1a\u8bed\u8a00\u7684\u7f16\u8bd1\u5b9e\u73b0\uff0c\u6bd4\u5982 \u6c47\u7f16\u3001\u5b57\u8282\u7801\u3001 \u865a\u62df\u673a\u3001CPU \u6307\u4ee4\u96c6 \u5728\u5b66\u7684\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u53bb\u627e\u4e00\u4e9b\u5bf9\u5e94\u7684\u9879\u76ee\uff0c\u6bd4\u5982\u7ba1\u7406\u7cfb\u7edf\u5565\u7684 \u53ef\u4ee5\u53bb leetcode or \u725b\u5ba2 \u505a\u4e00\u4e0b\u9762\u8bd5\u9898\u5de9\u56fa\u4e00\u4e0b\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u57fa\u7840\uff0c\u6bcf\u5468\u8fd8\u6709\u5468\u8d5b\u8c8c\u4f3c \u63a8\u8350\u4e66\u7c4d\uff1a CPimerPlus C\u8bed\u8a00\u6df1\u5ea6\u5256\u6790 Python\u722c\u866b\u6743\u5a01\u6307\u5357 \u9ad8\u8d28\u91cfLinux\u7f16\u7a0b \u8bbe\u8ba1\u6a21\u5f0f\u4e4b\u7985 \u5251\u6307offer \u7f16\u7a0b\u4e4b\u7f8e \u535a\u5ba2\u56ed\u548cCSDN\u8fd9\u4e24\u4e2a\u7f51\u7ad9 \u83dc\u9e1f\u6559\u7a0b(\u7f51\u7ad9) \u5176\u5b9e\u8981\u4e0e\u65f6\u4ff1\u8fdb\u8fd8\u662f\u8981\u591a\u770b\u770b\u522b\u4eba\u7684\u535a\u5ba2\u548c\u5b98\u65b9\u7684\u53c2\u8003\u624b\u518c\u8fd9\u624d\u662f\u6700\u91cd\u8981\u7684","title":"7.2 \u9879\u76ee\u5f00\u53d1"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#73","text":"\u5f88\u591a\u516c\u53f8\u4e5f\u8981\u6c42\u4e86\u9700\u8981\u638c\u63e1\u81f3\u5c11\u4e00\u95e8\u811a\u672c\u8bed\u8a00\uff0c\u56e0\u4e3a\u811a\u672c\u8bed\u8a00\u771f\u7684\u4f1a\u4f18\u5316\u6211\u4eec\u7684\u6548\u7387\uff0c\u6709\u4e9b\u91cd\u590d\u67af\u71e5\u7684\u4e8b\u60c5\uff0c\u4e22\u7ed9\u811a\u672c\uff0c\u53ef\u80fd\u51e0\u79d2\u5c31\u597d\u4e86\uff0c\u6240\u4ee5\u5728\u5b66\u4e60\u7684\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u559c\u597d\u53bb\u5b66\u4e60\u4e00\u95e8\u811a\u672c\u8bed\u8a00\uff0c\u8fd9\u771f\u7684\u8fd8\u662f\u86ee\u91cd\u8981\u7684\uff0c\u6211\u8fd9\u8fb9\u7684\u8bdd\u662f\u63a8\u8350\u5b66\u4e60 python \uff0c\u56e0\u4e3a\u6211\u81ea\u8eab\u4f53\u4f1a\u611f\u89c9python\u662f\u771f\u7684\u4e0d\u9519\uff0c\u65e0\u8bba\u662f\u5199\u70b9 \u5c0f\u722c\u866b \u8fd8\u662f\u8bf4\u5904\u7406\u4e00\u4e9b\u6587\u4ef6\u76f8\u5173\u7684\u4e1c\u897f\uff0c\u90fd\u662f\u975e\u5e38\u7b80\u77ed\u7684\uff0c\u800c\u4e14\u73b0\u5728\u7684\u8d8b\u52bf\u90fd\u5728\u5f80python\u7684\u4eba\u5de5\u667a\u80fd\u3001\u673a\u5668\u5b66\u4e60\u3001\u6570\u636e\u6316\u6398\u8fd9\u8fb9\u504f\uff0c\u4f46\u662f\u603b\u800c\u8a00\u4e4b\uff0c\u8fd8\u662f\u6839\u636e\u81ea\u5df1\u7684\u559c\u597d\u6765","title":"7.3 \u811a\u672c\u8bed\u8a00"},{"location":"%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/0%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E9%80%9F%E9%80%9A/#74","text":"\u603b\u4e4b\uff0c\u7f16\u7a0b\u8fd9\u4e00\u6761\u8def\u9700\u8981\u7684\u662f\u575a\u6301\uff0c\u4e0d\u8981\u8f7b\u6613\u653e\u5f03\uff01 \u6700\u540e\u795d\u613f\u6bcf\u4e2aCoder\u90fd\u80fd\u5728\u5b66\u4e60\u7684\u8fc7\u7a0b\u4e2d\u627e\u5230\u81ea\u5df1\u60f3\u8981\u7684\uff01\u5b8c\u7ed3\u6492\u82b1 \u4e0a\u8ff0\u63d0\u5230\u7684\u4e66\u7c4d\u5728\u7b14\u8005\u7684\u4ea4\u6d41\u7fa4\u4e2d\u5747\u6709\u7535\u5b50\u6863\uff0c\u5982\u679c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u52a0\u7fa4\u4ea4\u6d41\u4ee5\u4e0b\uff1a 1055277728","title":"7.4 \u6700\u540e"}]}